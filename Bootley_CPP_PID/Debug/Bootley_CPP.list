
Bootley_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080097a0  080097a0  000197a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bdc  08009bdc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009be4  08009be4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009be4  08009be4  00019be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001dc  08009dc8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08009dc8  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f99  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c40  00000000  00000000  000321a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00034de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002683c  00000000  00000000  00036bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013878  00000000  00000000  0005d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d566c  00000000  00000000  00070c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001462d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  00146320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009788 	.word	0x08009788

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009788 	.word	0x08009788

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0b00 	vstr	d0, [r7]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000f9e:	ec43 2b17 	vmov	d7, r2, r3
 8000fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa6:	eef0 0a67 	vmov.f32	s1, s15
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d107      	bne.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0x22>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7f1b      	ldrb	r3, [r3, #28]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d103      	bne.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0x22>
	{
		b_g_steering_ch1_done = true;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e05a      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}
	else if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d107      	bne.n	8001010 <HAL_TIM_IC_CaptureCallback+0x3c>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7f1b      	ldrb	r3, [r3, #28]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d103      	bne.n	8001010 <HAL_TIM_IC_CaptureCallback+0x3c>
	{
		b_g_steering_ch2_done = true;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0xec>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e04d      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}

	else if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d107      	bne.n	800102a <HAL_TIM_IC_CaptureCallback+0x56>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7f1b      	ldrb	r3, [r3, #28]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d103      	bne.n	800102a <HAL_TIM_IC_CaptureCallback+0x56>
	{
		b_g_accel_ch3_done = true;
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e040      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}
	else if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d107      	bne.n	8001044 <HAL_TIM_IC_CaptureCallback+0x70>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7f1b      	ldrb	r3, [r3, #28]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d103      	bne.n	8001044 <HAL_TIM_IC_CaptureCallback+0x70>
	{
		b_g_accel_ch4_done = true;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e033      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}

	else if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d107      	bne.n	800105e <HAL_TIM_IC_CaptureCallback+0x8a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7f1b      	ldrb	r3, [r3, #28]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d103      	bne.n	800105e <HAL_TIM_IC_CaptureCallback+0x8a>
	{
		b_g_auto_mode_ch1_done = true;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e026      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}
	else if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d107      	bne.n	8001078 <HAL_TIM_IC_CaptureCallback+0xa4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7f1b      	ldrb	r3, [r3, #28]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d103      	bne.n	8001078 <HAL_TIM_IC_CaptureCallback+0xa4>
	{
		b_g_auto_mode_ch2_done = true;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e019      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}

	else if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d107      	bne.n	8001092 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7f1b      	ldrb	r3, [r3, #28]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d103      	bne.n	8001092 <HAL_TIM_IC_CaptureCallback+0xbe>
	{
		b_g_drive_mode_ch3_done = true;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e00c      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	}
	else if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d107      	bne.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7f1b      	ldrb	r3, [r3, #28]
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d103      	bne.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
	{
		b_g_drive_mode_ch4_done = true;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_TIM_IC_CaptureCallback+0x108>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
	}
}
 80010aa:	e7ff      	b.n	80010ac <HAL_TIM_IC_CaptureCallback+0xd8>
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40010000 	.word	0x40010000
 80010bc:	20000200 	.word	0x20000200
 80010c0:	20000201 	.word	0x20000201
 80010c4:	2000020c 	.word	0x2000020c
 80010c8:	2000020d 	.word	0x2000020d
 80010cc:	40000400 	.word	0x40000400
 80010d0:	20000218 	.word	0x20000218
 80010d4:	20000219 	.word	0x20000219
 80010d8:	20000224 	.word	0x20000224
 80010dc:	20000225 	.word	0x20000225

080010e0 <_ZN7BootleyC1Ev>:




Bootley::Bootley()
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
{
	// printf("Bootley Initiated \r\n\n");
}
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_ZN7Bootley11SetCarStateEv>:


void Bootley::SetCarState()
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	GetPulseWidth();
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 fb2c 	bl	800175c <_ZN7Bootley13GetPulseWidthEv>
	GetSteeringVal();
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fd27 	bl	8001b58 <_ZN7Bootley14GetSteeringValEv>
	GetAccelVal();
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fd6c 	bl	8001be8 <_ZN7Bootley11GetAccelValEv>
	SetAutoMode();
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fdb1 	bl	8001c78 <_ZN7Bootley11SetAutoModeEv>
	SetDriveMode();
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fdd8 	bl	8001ccc <_ZN7Bootley12SetDriveModeEv>
//	printf("steer : %f\t", f_steering_val);			// for debugging
//	printf("accel : %f\t", f_accel_val);			// for debugging
//	printf("automode : %d\t", b_auto_mode);			// for debugging
//	printf("drivemode : %d\r\n\n", u8_drive_mode);	// for debugging

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN7Bootley5DriveEv>:


void Bootley::Drive()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (b_auto_mode == MANUAL_MODE) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001132:	2b00      	cmp	r3, #0
 8001134:	d124      	bne.n	8001180 <_ZN7Bootley5DriveEv+0x5c>
		if (u8_drive_mode == NORMAL_MODE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10d      	bne.n	800115c <_ZN7Bootley5DriveEv+0x38>
			NormalMode(f_accel_val, f_steering_val);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800114c:	eef0 0a47 	vmov.f32	s1, s14
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f81f 	bl	8001198 <_ZN7Bootley10NormalModeEff>
	else if (b_auto_mode == AUTO_MODE) {
		
		AutoDrive();
	}
		
}
 800115a:	e019      	b.n	8001190 <_ZN7Bootley5DriveEv+0x6c>
		else if (u8_drive_mode == SPINNING_MODE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <_ZN7Bootley5DriveEv+0x54>
			SpinningMode(f_steering_val);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f97d 	bl	8001470 <_ZN7Bootley12SpinningModeEf>
}
 8001176:	e00b      	b.n	8001190 <_ZN7Bootley5DriveEv+0x6c>
			EStopMode();
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa71 	bl	8001660 <_ZN7Bootley9EStopModeEv>
}
 800117e:	e007      	b.n	8001190 <_ZN7Bootley5DriveEv+0x6c>
	else if (b_auto_mode == AUTO_MODE) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <_ZN7Bootley5DriveEv+0x6c>
		AutoDrive();
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fa78 	bl	8001680 <_ZN7Bootley9AutoDriveEv>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN7Bootley10NormalModeEff>:



void Bootley::NormalMode(float accel, float steering)
{	
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011a4:	edc7 0a01 	vstr	s1, [r7, #4]
	GPIO_PinState FL_dir, FR_dir, RL_dir, RR_dir;
	float input_rpm, FL_rpm, FR_rpm, RL_rpm, RR_rpm;
	float steering_division = 1.;
 80011a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011ac:	61fb      	str	r3, [r7, #28]

	input_rpm = float_map(abs(accel), 0., ACCEL_MAX, RPM_MIN, RPM_MAX);
 80011ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80011b2:	f7ff feff 	bl	8000fb4 <_ZSt3absf>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 800145c <_ZN7Bootley10NormalModeEff+0x2c4>
 80011be:	eddf 1aa8 	vldr	s3, [pc, #672]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 80011c2:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8001464 <_ZN7Bootley10NormalModeEff+0x2cc>
 80011c6:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	f000 ffe9 	bl	80021a4 <_Z9float_mapfffff>
 80011d2:	ed87 0a06 	vstr	s0, [r7, #24]

	// 왼쪽으로 선회할 때
	if ((steering >= IGNORING_STEERING_MAX) && (steering <= STEERING_MAX))
 80011d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	db43      	blt.n	8001270 <_ZN7Bootley10NormalModeEff+0xd8>
 80011e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ec:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001464 <_ZN7Bootley10NormalModeEff+0x2cc>
 80011f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d83a      	bhi.n	8001270 <_ZN7Bootley10NormalModeEff+0xd8>
	{
		steering_division = float_map(steering, IGNORING_STEERING_MAX, STEERING_MAX, STEERING_DIVISION_MIN, STEERING_DIVISION_MAX);
 80011fa:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 80011fe:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001202:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8001464 <_ZN7Bootley10NormalModeEff+0x2cc>
 8001206:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800120a:	ed97 0a01 	vldr	s0, [r7, #4]
 800120e:	f000 ffc9 	bl	80021a4 <_Z9float_mapfffff>
 8001212:	ed87 0a07 	vstr	s0, [r7, #28]

		if (steering_division <= 1.)		steering_division = 1.;
 8001216:	edd7 7a07 	vldr	s15, [r7, #28]
 800121a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	d803      	bhi.n	8001230 <_ZN7Bootley10NormalModeEff+0x98>
 8001228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e00a      	b.n	8001246 <_ZN7Bootley10NormalModeEff+0xae>
		else if (steering_division >= 5.) 	steering_division = 5.;
 8001230:	edd7 7a07 	vldr	s15, [r7, #28]
 8001234:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	db01      	blt.n	8001246 <_ZN7Bootley10NormalModeEff+0xae>
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <_ZN7Bootley10NormalModeEff+0x2d0>)
 8001244:	61fb      	str	r3, [r7, #28]

		FL_rpm = input_rpm / steering_division;
 8001246:	edd7 6a06 	vldr	s13, [r7, #24]
 800124a:	ed97 7a07 	vldr	s14, [r7, #28]
 800124e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001252:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		FR_rpm = input_rpm;
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
		RL_rpm = input_rpm / steering_division;
 800125a:	edd7 6a06 	vldr	s13, [r7, #24]
 800125e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001266:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		RR_rpm = input_rpm;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e066      	b.n	800133e <_ZN7Bootley10NormalModeEff+0x1a6>

	}
	// 직진
	else if ((steering >= IGNORING_STEERING_MIN) && (steering <= IGNORING_STEERING_MAX))
 8001270:	edd7 7a01 	vldr	s15, [r7, #4]
 8001274:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	db11      	blt.n	80012a6 <_ZN7Bootley10NormalModeEff+0x10e>
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d808      	bhi.n	80012a6 <_ZN7Bootley10NormalModeEff+0x10e>
	{

		FL_rpm = input_rpm;
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
		FR_rpm = input_rpm;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
		RL_rpm = input_rpm;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
		RR_rpm = input_rpm;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	e04b      	b.n	800133e <_ZN7Bootley10NormalModeEff+0x1a6>
	}
	// 오른쪽으로 선회
	else if ((steering >= STEERING_MIN) && steering <= IGNORING_STEERING_MIN)
 80012a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012aa:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800146c <_ZN7Bootley10NormalModeEff+0x2d4>
 80012ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	db42      	blt.n	800133e <_ZN7Bootley10NormalModeEff+0x1a6>
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80012c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d839      	bhi.n	800133e <_ZN7Bootley10NormalModeEff+0x1a6>
	{
		steering_division = float_map(steering, STEERING_MIN, IGNORING_ACCEL_MIN, STEERING_DIVISION_MAX, STEERING_DIVISION_MIN);
 80012ca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80012ce:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80012d2:	eebb 1a04 	vmov.f32	s2, #180	; 0xc1a00000 -20.0
 80012d6:	eddf 0a65 	vldr	s1, [pc, #404]	; 800146c <_ZN7Bootley10NormalModeEff+0x2d4>
 80012da:	ed97 0a01 	vldr	s0, [r7, #4]
 80012de:	f000 ff61 	bl	80021a4 <_Z9float_mapfffff>
 80012e2:	ed87 0a07 	vstr	s0, [r7, #28]

		if (steering_division <= 1.)		steering_division = 1.;
 80012e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	d803      	bhi.n	8001300 <_ZN7Bootley10NormalModeEff+0x168>
 80012f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e00a      	b.n	8001316 <_ZN7Bootley10NormalModeEff+0x17e>
		else if (steering_division >= 5.) 	steering_division = 5.;
 8001300:	edd7 7a07 	vldr	s15, [r7, #28]
 8001304:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	db01      	blt.n	8001316 <_ZN7Bootley10NormalModeEff+0x17e>
 8001312:	4b55      	ldr	r3, [pc, #340]	; (8001468 <_ZN7Bootley10NormalModeEff+0x2d0>)
 8001314:	61fb      	str	r3, [r7, #28]

		FL_rpm = input_rpm;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
		FR_rpm = input_rpm / steering_division;
 800131a:	edd7 6a06 	vldr	s13, [r7, #24]
 800131e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001326:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		RL_rpm = input_rpm;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
		RR_rpm = input_rpm / steering_division;
 800132e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001332:	ed97 7a07 	vldr	s14, [r7, #28]
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	edc7 7a08 	vstr	s15, [r7, #32]

	}


	// 신호가 중간값 부근일 땐 아무것도 하지 않음
	if ((accel >= IGNORING_ACCEL_MIN) && (accel <= IGNORING_ACCEL_MAX))
 800133e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001342:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	db1d      	blt.n	800138c <_ZN7Bootley10NormalModeEff+0x1f4>
 8001350:	edd7 7a02 	vldr	s15, [r7, #8]
 8001354:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d814      	bhi.n	800138c <_ZN7Bootley10NormalModeEff+0x1f4>
	{
		FL_RunMotor(0., CW);
 8001362:	2000      	movs	r0, #0
 8001364:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 8001368:	f000 fd94 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
		FR_RunMotor(0., CW);
 800136c:	2000      	movs	r0, #0
 800136e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 8001372:	f000 fdf1 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
		RL_RunMotor(0., CW);
 8001376:	2000      	movs	r0, #0
 8001378:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 800137c:	f000 fe4e 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
		RR_RunMotor(0., CW);
 8001380:	2000      	movs	r0, #0
 8001382:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001460 <_ZN7Bootley10NormalModeEff+0x2c8>
 8001386:	f000 feab 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
			RR_RunMotor(RR_rpm, RR_dir);

		}
	}
	
}
 800138a:	e063      	b.n	8001454 <_ZN7Bootley10NormalModeEff+0x2bc>
	else if ((accel >= ACCEL_MIN) && (accel <= ACCEL_MAX))
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800146c <_ZN7Bootley10NormalModeEff+0x2d4>
 8001394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	da00      	bge.n	80013a0 <_ZN7Bootley10NormalModeEff+0x208>
}
 800139e:	e059      	b.n	8001454 <_ZN7Bootley10NormalModeEff+0x2bc>
	else if ((accel >= ACCEL_MIN) && (accel <= ACCEL_MAX))
 80013a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001464 <_ZN7Bootley10NormalModeEff+0x2cc>
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d900      	bls.n	80013b4 <_ZN7Bootley10NormalModeEff+0x21c>
}
 80013b2:	e04f      	b.n	8001454 <_ZN7Bootley10NormalModeEff+0x2bc>
		if (accel >= 0.)		// 직진일 때
 80013b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	db20      	blt.n	8001404 <_ZN7Bootley10NormalModeEff+0x26c>
			FL_dir = CCW;
 80013c2:	2301      	movs	r3, #1
 80013c4:	75fb      	strb	r3, [r7, #23]
			FR_dir = CW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75bb      	strb	r3, [r7, #22]
			RL_dir = CCW;
 80013ca:	2301      	movs	r3, #1
 80013cc:	757b      	strb	r3, [r7, #21]
			RR_dir = CW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	753b      	strb	r3, [r7, #20]
			FL_RunMotor(FL_rpm, FL_dir);
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4618      	mov	r0, r3
 80013d6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013da:	f000 fd5b 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
			FR_RunMotor(FR_rpm, FR_dir);
 80013de:	7dbb      	ldrb	r3, [r7, #22]
 80013e0:	4618      	mov	r0, r3
 80013e2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80013e6:	f000 fdb7 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
			RL_RunMotor(RL_rpm, RL_dir);
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	4618      	mov	r0, r3
 80013ee:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80013f2:	f000 fe13 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
			RR_RunMotor(RR_rpm, RR_dir);
 80013f6:	7d3b      	ldrb	r3, [r7, #20]
 80013f8:	4618      	mov	r0, r3
 80013fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80013fe:	f000 fe6f 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
}
 8001402:	e027      	b.n	8001454 <_ZN7Bootley10NormalModeEff+0x2bc>
		} else if (accel < 0.)
 8001404:	edd7 7a02 	vldr	s15, [r7, #8]
 8001408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d400      	bmi.n	8001414 <_ZN7Bootley10NormalModeEff+0x27c>
}
 8001412:	e01f      	b.n	8001454 <_ZN7Bootley10NormalModeEff+0x2bc>
			FL_dir = CW;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
			FR_dir = CCW;
 8001418:	2301      	movs	r3, #1
 800141a:	75bb      	strb	r3, [r7, #22]
			RL_dir = CW;
 800141c:	2300      	movs	r3, #0
 800141e:	757b      	strb	r3, [r7, #21]
			RR_dir = CCW;
 8001420:	2301      	movs	r3, #1
 8001422:	753b      	strb	r3, [r7, #20]
			FL_RunMotor(FL_rpm, FL_dir);
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	4618      	mov	r0, r3
 8001428:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800142c:	f000 fd32 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
			FR_RunMotor(FR_rpm, FR_dir);
 8001430:	7dbb      	ldrb	r3, [r7, #22]
 8001432:	4618      	mov	r0, r3
 8001434:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001438:	f000 fd8e 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
			RL_RunMotor(RL_rpm, RL_dir);
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	4618      	mov	r0, r3
 8001440:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001444:	f000 fdea 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
			RR_RunMotor(RR_rpm, RR_dir);
 8001448:	7d3b      	ldrb	r3, [r7, #20]
 800144a:	4618      	mov	r0, r3
 800144c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001450:	f000 fe46 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	43e10000 	.word	0x43e10000
 8001460:	00000000 	.word	0x00000000
 8001464:	43fa0000 	.word	0x43fa0000
 8001468:	40a00000 	.word	0x40a00000
 800146c:	c3fa0000 	.word	0xc3fa0000

08001470 <_ZN7Bootley12SpinningModeEf>:

void Bootley::SpinningMode(float steering)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	ed2d 8b02 	vpush	{d8}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	ed87 0a00 	vstr	s0, [r7]
	GPIO_PinState FL_dir = CW;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FR_dir = CW;
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState RL_dir = CW;
 8001488:	2300      	movs	r3, #0
 800148a:	737b      	strb	r3, [r7, #13]
	GPIO_PinState RR_dir = CW;
 800148c:	2300      	movs	r3, #0
 800148e:	733b      	strb	r3, [r7, #12]

	float rpm;

	// 왼쪽으로 빙빙돌아
	if ((steering >= IGNORING_SPINNING_MAX) && (steering <= STEERING_MAX))
 8001490:	edd7 7a00 	vldr	s15, [r7]
 8001494:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001648 <_ZN7Bootley12SpinningModeEf+0x1d8>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	db37      	blt.n	8001512 <_ZN7Bootley12SpinningModeEf+0xa2>
 80014a2:	edd7 7a00 	vldr	s15, [r7]
 80014a6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800164c <_ZN7Bootley12SpinningModeEf+0x1dc>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d82e      	bhi.n	8001512 <_ZN7Bootley12SpinningModeEf+0xa2>
	{
		FL_dir = CW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
		FR_dir = CW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73bb      	strb	r3, [r7, #14]
		RL_dir = CW;
 80014bc:	2300      	movs	r3, #0
 80014be:	737b      	strb	r3, [r7, #13]
		RR_dir = CW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	733b      	strb	r3, [r7, #12]

		rpm = float_map(steering, IGNORING_SPINNING_MAX, STEERING_MAX, SPINNING_RPM_MIN, SPINNING_RPM_MAX);
 80014c4:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8001648 <_ZN7Bootley12SpinningModeEf+0x1d8>
 80014c8:	eddf 1a61 	vldr	s3, [pc, #388]	; 8001650 <_ZN7Bootley12SpinningModeEf+0x1e0>
 80014cc:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800164c <_ZN7Bootley12SpinningModeEf+0x1dc>
 80014d0:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8001648 <_ZN7Bootley12SpinningModeEf+0x1d8>
 80014d4:	ed97 0a00 	vldr	s0, [r7]
 80014d8:	f000 fe64 	bl	80021a4 <_Z9float_mapfffff>
 80014dc:	ed87 0a02 	vstr	s0, [r7, #8]
		FL_RunMotor(rpm, FL_dir);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4618      	mov	r0, r3
 80014e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014e8:	f000 fcd4 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
		FR_RunMotor(rpm, FR_dir);
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	4618      	mov	r0, r3
 80014f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80014f4:	f000 fd30 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
		RL_RunMotor(rpm, RL_dir);
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	4618      	mov	r0, r3
 80014fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001500:	f000 fd8c 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
		RR_RunMotor(rpm, RR_dir);
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	f000 fde8 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
 8001510:	e089      	b.n	8001626 <_ZN7Bootley12SpinningModeEf+0x1b6>
	}
	// 아무것도 안함
	else if ((steering >= IGNORING_SPINNING_MIN) && (steering <= IGNORING_SPINNING_MAX))
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001654 <_ZN7Bootley12SpinningModeEf+0x1e4>
 800151a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	db21      	blt.n	8001568 <_ZN7Bootley12SpinningModeEf+0xf8>
 8001524:	edd7 7a00 	vldr	s15, [r7]
 8001528:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001648 <_ZN7Bootley12SpinningModeEf+0x1d8>
 800152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	d818      	bhi.n	8001568 <_ZN7Bootley12SpinningModeEf+0xf8>
	{

		FL_RunMotor(0., FL_dir);
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	4618      	mov	r0, r3
 800153a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001658 <_ZN7Bootley12SpinningModeEf+0x1e8>
 800153e:	f000 fca9 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
		FR_RunMotor(0., FR_dir);
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	4618      	mov	r0, r3
 8001546:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8001658 <_ZN7Bootley12SpinningModeEf+0x1e8>
 800154a:	f000 fd05 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
		RL_RunMotor(0., RL_dir);
 800154e:	7b7b      	ldrb	r3, [r7, #13]
 8001550:	4618      	mov	r0, r3
 8001552:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001658 <_ZN7Bootley12SpinningModeEf+0x1e8>
 8001556:	f000 fd61 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
		RR_RunMotor(0., RR_dir);
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8001658 <_ZN7Bootley12SpinningModeEf+0x1e8>
 8001562:	f000 fdbd 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
 8001566:	e05e      	b.n	8001626 <_ZN7Bootley12SpinningModeEf+0x1b6>

	}

	// 오른쪽으로 빙빙돌아
	else if ((steering >= STEERING_MIN) && (steering <= IGNORING_SPINNING_MIN))
 8001568:	edd7 7a00 	vldr	s15, [r7]
 800156c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800165c <_ZN7Bootley12SpinningModeEf+0x1ec>
 8001570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	da00      	bge.n	800157c <_ZN7Bootley12SpinningModeEf+0x10c>
		FR_RunMotor(rpm, FR_dir);
		RL_RunMotor(rpm, RL_dir);
		RR_RunMotor(rpm, RR_dir);
	}

}
 800157a:	e054      	b.n	8001626 <_ZN7Bootley12SpinningModeEf+0x1b6>
	else if ((steering >= STEERING_MIN) && (steering <= IGNORING_SPINNING_MIN))
 800157c:	edd7 7a00 	vldr	s15, [r7]
 8001580:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001654 <_ZN7Bootley12SpinningModeEf+0x1e4>
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d900      	bls.n	8001590 <_ZN7Bootley12SpinningModeEf+0x120>
}
 800158e:	e04a      	b.n	8001626 <_ZN7Bootley12SpinningModeEf+0x1b6>
		FL_dir = CCW;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
		FR_dir = CCW;
 8001594:	2301      	movs	r3, #1
 8001596:	73bb      	strb	r3, [r7, #14]
		RL_dir = CCW;
 8001598:	2301      	movs	r3, #1
 800159a:	737b      	strb	r3, [r7, #13]
		RR_dir = CCW;
 800159c:	2301      	movs	r3, #1
 800159e:	733b      	strb	r3, [r7, #12]
		rpm = float_map(abs(steering), abs(STEERING_MIN), abs(IGNORING_SPINNING_MIN), SPINNING_RPM_MIN, SPINNING_RPM_MAX);
 80015a0:	ed97 0a00 	vldr	s0, [r7]
 80015a4:	f7ff fd06 	bl	8000fb4 <_ZSt3absf>
 80015a8:	eeb0 8a40 	vmov.f32	s16, s0
 80015ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001638 <_ZN7Bootley12SpinningModeEf+0x1c8>
 80015b0:	f7ff fcec 	bl	8000f8c <_ZSt3absd>
 80015b4:	ec53 2b10 	vmov	r2, r3, d0
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb14 	bl	8000be8 <__aeabi_d2f>
 80015c0:	4604      	mov	r4, r0
 80015c2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001640 <_ZN7Bootley12SpinningModeEf+0x1d0>
 80015c6:	f7ff fce1 	bl	8000f8c <_ZSt3absd>
 80015ca:	ec53 2b10 	vmov	r2, r3, d0
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fb09 	bl	8000be8 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8001648 <_ZN7Bootley12SpinningModeEf+0x1d8>
 80015dc:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8001650 <_ZN7Bootley12SpinningModeEf+0x1e0>
 80015e0:	ee01 3a10 	vmov	s2, r3
 80015e4:	ee00 4a90 	vmov	s1, r4
 80015e8:	eeb0 0a48 	vmov.f32	s0, s16
 80015ec:	f000 fdda 	bl	80021a4 <_Z9float_mapfffff>
 80015f0:	ed87 0a02 	vstr	s0, [r7, #8]
		FL_RunMotor(rpm, FL_dir);
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	4618      	mov	r0, r3
 80015f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80015fc:	f000 fc4a 	bl	8001e94 <_Z11FL_RunMotorf13GPIO_PinState>
		FR_RunMotor(rpm, FR_dir);
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	4618      	mov	r0, r3
 8001604:	ed97 0a02 	vldr	s0, [r7, #8]
 8001608:	f000 fca6 	bl	8001f58 <_Z11FR_RunMotorf13GPIO_PinState>
		RL_RunMotor(rpm, RL_dir);
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	4618      	mov	r0, r3
 8001610:	ed97 0a02 	vldr	s0, [r7, #8]
 8001614:	f000 fd02 	bl	800201c <_Z11RL_RunMotorf13GPIO_PinState>
		RR_RunMotor(rpm, RR_dir);
 8001618:	7b3b      	ldrb	r3, [r7, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001620:	f000 fd5e 	bl	80020e0 <_Z11RR_RunMotorf13GPIO_PinState>
}
 8001624:	e7ff      	b.n	8001626 <_ZN7Bootley12SpinningModeEf+0x1b6>
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	ecbd 8b02 	vpop	{d8}
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	bf00      	nop
 8001634:	f3af 8000 	nop.w
 8001638:	00000000 	.word	0x00000000
 800163c:	c07f4000 	.word	0xc07f4000
 8001640:	00000000 	.word	0x00000000
 8001644:	c0590000 	.word	0xc0590000
 8001648:	42c80000 	.word	0x42c80000
 800164c:	43fa0000 	.word	0x43fa0000
 8001650:	42480000 	.word	0x42480000
 8001654:	c2c80000 	.word	0xc2c80000
 8001658:	00000000 	.word	0x00000000
 800165c:	c3fa0000 	.word	0xc3fa0000

08001660 <_ZN7Bootley9EStopModeEv>:

void Bootley::EStopMode()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	FL_BrakeEnable();
 8001668:	f000 fb6c 	bl	8001d44 <_Z14FL_BrakeEnablev>
	FR_BrakeEnable();
 800166c:	f000 fb94 	bl	8001d98 <_Z14FR_BrakeEnablev>
	RL_BrakeEnable();
 8001670:	f000 fbbc 	bl	8001dec <_Z14RL_BrakeEnablev>
	RR_BrakeEnable();
 8001674:	f000 fbe4 	bl	8001e40 <_Z14RR_BrakeEnablev>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN7Bootley9AutoDriveEv>:

void Bootley::AutoDrive()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	/* 추후 ROS subscriber 이용 구동 */
	FL_BrakeEnable();
 8001688:	f000 fb5c 	bl	8001d44 <_Z14FL_BrakeEnablev>
	FR_BrakeEnable();
 800168c:	f000 fb84 	bl	8001d98 <_Z14FR_BrakeEnablev>
	RL_BrakeEnable();
 8001690:	f000 fbac 	bl	8001dec <_Z14RL_BrakeEnablev>
	RR_BrakeEnable();
 8001694:	f000 fbd4 	bl	8001e40 <_Z14RR_BrakeEnablev>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN7Bootley10InitModuleEv>:
/*
 * HAL Library 이용 각종 init 함수
 * cubeMX로 생성되는 init 함수 이외의 것들을 별도로 작성
 */
void Bootley::InitModule()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)u16_steering_capture1, 2);
 80016a8:	2302      	movs	r3, #2
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <_ZN7Bootley10InitModuleEv+0x90>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4821      	ldr	r0, [pc, #132]	; (8001734 <_ZN7Bootley10InitModuleEv+0x94>)
 80016b0:	f003 fc8a 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>
//	htim1.State = HAL_TIM_STATE_READY;
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)u16_steering_capture2, 2);
 80016b4:	2302      	movs	r3, #2
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <_ZN7Bootley10InitModuleEv+0x98>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	481e      	ldr	r0, [pc, #120]	; (8001734 <_ZN7Bootley10InitModuleEv+0x94>)
 80016bc:	f003 fc84 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>

	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)u16_accel_capture1, 2);
 80016c0:	2302      	movs	r3, #2
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <_ZN7Bootley10InitModuleEv+0x9c>)
 80016c4:	2108      	movs	r1, #8
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <_ZN7Bootley10InitModuleEv+0x94>)
 80016c8:	f003 fc7e 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t *)u16_accel_capture2, 2);
 80016cc:	2302      	movs	r3, #2
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <_ZN7Bootley10InitModuleEv+0xa0>)
 80016d0:	210c      	movs	r1, #12
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <_ZN7Bootley10InitModuleEv+0x94>)
 80016d4:	f003 fc78 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>

	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)u16_auto_mode_capture1, 2);
 80016d8:	2302      	movs	r3, #2
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <_ZN7Bootley10InitModuleEv+0xa4>)
 80016dc:	2100      	movs	r1, #0
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <_ZN7Bootley10InitModuleEv+0xa8>)
 80016e0:	f003 fc72 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)u16_auto_mode_capture2, 2);
 80016e4:	2302      	movs	r3, #2
 80016e6:	4a19      	ldr	r2, [pc, #100]	; (800174c <_ZN7Bootley10InitModuleEv+0xac>)
 80016e8:	2104      	movs	r1, #4
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <_ZN7Bootley10InitModuleEv+0xa8>)
 80016ec:	f003 fc6c 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>

	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t *)u16_drive_mode_capture1, 2);
 80016f0:	2302      	movs	r3, #2
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <_ZN7Bootley10InitModuleEv+0xb0>)
 80016f4:	2108      	movs	r1, #8
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <_ZN7Bootley10InitModuleEv+0xa8>)
 80016f8:	f003 fc66 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)u16_drive_mode_capture2, 2);
 80016fc:	2302      	movs	r3, #2
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <_ZN7Bootley10InitModuleEv+0xb4>)
 8001700:	210c      	movs	r1, #12
 8001702:	4811      	ldr	r0, [pc, #68]	; (8001748 <_ZN7Bootley10InitModuleEv+0xa8>)
 8001704:	f003 fc60 	bl	8004fc8 <HAL_TIM_IC_Start_DMA>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <_ZN7Bootley10InitModuleEv+0xb8>)
 800170c:	f003 fb3a 	bl	8004d84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	4811      	ldr	r0, [pc, #68]	; (8001758 <_ZN7Bootley10InitModuleEv+0xb8>)
 8001714:	f003 fb36 	bl	8004d84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001718:	2108      	movs	r1, #8
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <_ZN7Bootley10InitModuleEv+0xb8>)
 800171c:	f003 fb32 	bl	8004d84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001720:	210c      	movs	r1, #12
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <_ZN7Bootley10InitModuleEv+0xb8>)
 8001724:	f003 fb2e 	bl	8004d84 <HAL_TIM_PWM_Start>


}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200001f8 	.word	0x200001f8
 8001734:	2000022c 	.word	0x2000022c
 8001738:	200001fc 	.word	0x200001fc
 800173c:	20000204 	.word	0x20000204
 8001740:	20000208 	.word	0x20000208
 8001744:	20000210 	.word	0x20000210
 8001748:	200002bc 	.word	0x200002bc
 800174c:	20000214 	.word	0x20000214
 8001750:	2000021c 	.word	0x2000021c
 8001754:	20000220 	.word	0x20000220
 8001758:	20000274 	.word	0x20000274

0800175c <_ZN7Bootley13GetPulseWidthEv>:
 * HAL_TIM_IC_CaptureCallback에서 채널 읽기 시작(true로 초기화)된 순간을 읽어
 * dma에 저장된 us 단위의 신호(TIM들 prescaler 이용 주파수 1Mhz)를 이용
 * freq, period, active(pulse width), duty 게산
 */
void Bootley::GetPulseWidth()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	/* 수신기 ch1 계산 부분 시작 */
	if(b_g_steering_ch1_done)
 8001764:	4b7d      	ldr	r3, [pc, #500]	; (800195c <_ZN7Bootley13GetPulseWidthEv+0x200>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d031      	beq.n	80017d0 <_ZN7Bootley13GetPulseWidthEv+0x74>
	{
		if(u16_steering_capture1[0] > u16_steering_capture1[1])
 800176c:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	429a      	cmp	r2, r3
 8001776:	d90b      	bls.n	8001790 <_ZN7Bootley13GetPulseWidthEv+0x34>
		{
			u32_receiver_ch1_period = htim1.Instance->ARR + u16_steering_capture1[1] - u16_steering_capture1[0];
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <_ZN7Bootley13GetPulseWidthEv+0x208>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	4a78      	ldr	r2, [pc, #480]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001780:	8852      	ldrh	r2, [r2, #2]
 8001782:	4413      	add	r3, r2
 8001784:	4a76      	ldr	r2, [pc, #472]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	1a9a      	subs	r2, r3, r2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e008      	b.n	80017a2 <_ZN7Bootley13GetPulseWidthEv+0x46>
		}
		else
		{
			u32_receiver_ch1_period = u16_steering_capture1[1] - u16_steering_capture1[0];
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	461a      	mov	r2, r3
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
		}

		u32_receiver_ch1_freq_Hz = (HAL_RCC_GetPCLK1Freq() * 2) / (htim1.Instance->PSC + 1);  //84000000
 80017a2:	f002 fd51 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80017a6:	4603      	mov	r3, r0
 80017a8:	005a      	lsls	r2, r3, #1
 80017aa:	4b6e      	ldr	r3, [pc, #440]	; (8001964 <_ZN7Bootley13GetPulseWidthEv+0x208>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	3301      	adds	r3, #1
 80017b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]
		u32_receiver_ch1_freq_Hz = u32_receiver_ch1_freq_Hz / u32_receiver_ch1_period;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]

		b_g_steering_ch1_done = false;
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <_ZN7Bootley13GetPulseWidthEv+0x200>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
	}
	if(b_g_steering_ch2_done)
 80017d0:	4b65      	ldr	r3, [pc, #404]	; (8001968 <_ZN7Bootley13GetPulseWidthEv+0x20c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d038      	beq.n	800184a <_ZN7Bootley13GetPulseWidthEv+0xee>
	{
		if(u16_steering_capture2[0] >= u16_steering_capture1[0] && u16_steering_capture2[0] <= u16_steering_capture1[1])
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	4b60      	ldr	r3, [pc, #384]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d30f      	bcc.n	8001804 <_ZN7Bootley13GetPulseWidthEv+0xa8>
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 80017ea:	885b      	ldrh	r3, [r3, #2]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d809      	bhi.n	8001804 <_ZN7Bootley13GetPulseWidthEv+0xa8>
		{
			u32_steering_pw_us = u16_steering_capture2[0] - u16_steering_capture1[0];
 80017f0:	4b5e      	ldr	r3, [pc, #376]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	e014      	b.n	800182e <_ZN7Bootley13GetPulseWidthEv+0xd2>
		}
		else if(u16_steering_capture2[1] >= u16_steering_capture1[0] && u16_steering_capture2[1] <= u16_steering_capture1[1])
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 8001806:	885a      	ldrh	r2, [r3, #2]
 8001808:	4b55      	ldr	r3, [pc, #340]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d30e      	bcc.n	800182e <_ZN7Bootley13GetPulseWidthEv+0xd2>
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 8001812:	885a      	ldrh	r2, [r3, #2]
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001816:	885b      	ldrh	r3, [r3, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	d808      	bhi.n	800182e <_ZN7Bootley13GetPulseWidthEv+0xd2>
		{
			u32_steering_pw_us = u16_steering_capture2[1] - u16_steering_capture1[0];
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <_ZN7Bootley13GetPulseWidthEv+0x210>)
 800181e:	885b      	ldrh	r3, [r3, #2]
 8001820:	461a      	mov	r2, r3
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <_ZN7Bootley13GetPulseWidthEv+0x204>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	605a      	str	r2, [r3, #4]
		}

		u32_receiver_ch1_duty = u32_steering_pw_us * 100 / u32_receiver_ch1_period;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2264      	movs	r2, #100	; 0x64
 8001834:	fb03 f202 	mul.w	r2, r3, r2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]
		b_g_steering_ch2_done = false;
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <_ZN7Bootley13GetPulseWidthEv+0x20c>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
	}
	/* 수신기 ch1 계산 부분 끝 */

	/* 수신기 ch2 계산 부분 시작 */
	if(b_g_accel_ch3_done)
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <_ZN7Bootley13GetPulseWidthEv+0x214>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d031      	beq.n	80018b6 <_ZN7Bootley13GetPulseWidthEv+0x15a>
		{
			if(u16_accel_capture1[0] > u16_accel_capture1[1])
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 8001854:	881a      	ldrh	r2, [r3, #0]
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 8001858:	885b      	ldrh	r3, [r3, #2]
 800185a:	429a      	cmp	r2, r3
 800185c:	d90b      	bls.n	8001876 <_ZN7Bootley13GetPulseWidthEv+0x11a>
			{
				u32_receiver_ch2_period = htim1.Instance->ARR + u16_accel_capture1[1] - u16_accel_capture1[0];
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <_ZN7Bootley13GetPulseWidthEv+0x208>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	4a43      	ldr	r2, [pc, #268]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 8001866:	8852      	ldrh	r2, [r2, #2]
 8001868:	4413      	add	r3, r2
 800186a:	4a42      	ldr	r2, [pc, #264]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	1a9a      	subs	r2, r3, r2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	e008      	b.n	8001888 <_ZN7Bootley13GetPulseWidthEv+0x12c>
			}
			else
			{
				u32_receiver_ch2_period = u16_accel_capture1[1] - u16_accel_capture1[0];
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 8001878:	885b      	ldrh	r3, [r3, #2]
 800187a:	461a      	mov	r2, r3
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	611a      	str	r2, [r3, #16]
			}

			u32_receiver_ch2_freq_Hz = (HAL_RCC_GetPCLK1Freq() * 2) / (htim1.Instance->PSC + 1);  //84000000
 8001888:	f002 fcde 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800188c:	4603      	mov	r3, r0
 800188e:	005a      	lsls	r2, r3, #1
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <_ZN7Bootley13GetPulseWidthEv+0x208>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	3301      	adds	r3, #1
 8001898:	fbb2 f2f3 	udiv	r2, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
			u32_receiver_ch2_freq_Hz = u32_receiver_ch2_freq_Hz / u32_receiver_ch2_period;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]

			b_g_accel_ch3_done = false;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <_ZN7Bootley13GetPulseWidthEv+0x214>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
		}
	if(b_g_accel_ch4_done)
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <_ZN7Bootley13GetPulseWidthEv+0x21c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d038      	beq.n	8001930 <_ZN7Bootley13GetPulseWidthEv+0x1d4>
	{
		if(u16_accel_capture2[0] >= u16_accel_capture1[0] && u16_accel_capture2[0] <= u16_accel_capture1[1])
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d30f      	bcc.n	80018ea <_ZN7Bootley13GetPulseWidthEv+0x18e>
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 80018d0:	885b      	ldrh	r3, [r3, #2]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d809      	bhi.n	80018ea <_ZN7Bootley13GetPulseWidthEv+0x18e>
		{
			u32_accel_pw_us = u16_accel_capture2[0] - u16_accel_capture1[0];
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	e014      	b.n	8001914 <_ZN7Bootley13GetPulseWidthEv+0x1b8>
		}
		else if(u16_accel_capture2[1] >= u16_accel_capture1[0] && u16_accel_capture2[1] <= u16_accel_capture1[1])
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 80018ec:	885a      	ldrh	r2, [r3, #2]
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d30e      	bcc.n	8001914 <_ZN7Bootley13GetPulseWidthEv+0x1b8>
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 80018f8:	885a      	ldrh	r2, [r3, #2]
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 80018fc:	885b      	ldrh	r3, [r3, #2]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d808      	bhi.n	8001914 <_ZN7Bootley13GetPulseWidthEv+0x1b8>
		{
			u32_accel_pw_us = u16_accel_capture2[1] - u16_accel_capture1[0];
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <_ZN7Bootley13GetPulseWidthEv+0x220>)
 8001904:	885b      	ldrh	r3, [r3, #2]
 8001906:	461a      	mov	r2, r3
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <_ZN7Bootley13GetPulseWidthEv+0x218>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	615a      	str	r2, [r3, #20]
		}

		u32_receiver_ch2_duty = u32_accel_pw_us * 100 / u32_receiver_ch2_period;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	2264      	movs	r2, #100	; 0x64
 800191a:	fb03 f202 	mul.w	r2, r3, r2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	fbb2 f2f3 	udiv	r2, r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	61da      	str	r2, [r3, #28]
		b_g_accel_ch4_done = false;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <_ZN7Bootley13GetPulseWidthEv+0x21c>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
	}
	/* 수신기 ch2 계산 부분 끝 */

	/* 수신기 ch3 계산 부분 시작 */
	if(b_g_auto_mode_ch1_done)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_ZN7Bootley13GetPulseWidthEv+0x224>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d049      	beq.n	80019cc <_ZN7Bootley13GetPulseWidthEv+0x270>
	{
		if(u16_auto_mode_capture1[0] > u16_auto_mode_capture1[1])
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <_ZN7Bootley13GetPulseWidthEv+0x228>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_ZN7Bootley13GetPulseWidthEv+0x228>)
 800193e:	885b      	ldrh	r3, [r3, #2]
 8001940:	429a      	cmp	r2, r3
 8001942:	d923      	bls.n	800198c <_ZN7Bootley13GetPulseWidthEv+0x230>
		{
			u32_receiver_ch3_period = htim3.Instance->ARR + u16_auto_mode_capture1[1] - u16_auto_mode_capture1[0];
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_ZN7Bootley13GetPulseWidthEv+0x22c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <_ZN7Bootley13GetPulseWidthEv+0x228>)
 800194c:	8852      	ldrh	r2, [r2, #2]
 800194e:	4413      	add	r3, r2
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <_ZN7Bootley13GetPulseWidthEv+0x228>)
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	1a9a      	subs	r2, r3, r2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	621a      	str	r2, [r3, #32]
 800195a:	e020      	b.n	800199e <_ZN7Bootley13GetPulseWidthEv+0x242>
 800195c:	20000200 	.word	0x20000200
 8001960:	200001f8 	.word	0x200001f8
 8001964:	2000022c 	.word	0x2000022c
 8001968:	20000201 	.word	0x20000201
 800196c:	200001fc 	.word	0x200001fc
 8001970:	2000020c 	.word	0x2000020c
 8001974:	20000204 	.word	0x20000204
 8001978:	2000020d 	.word	0x2000020d
 800197c:	20000208 	.word	0x20000208
 8001980:	20000218 	.word	0x20000218
 8001984:	20000210 	.word	0x20000210
 8001988:	200002bc 	.word	0x200002bc
		}
		else
		{
			u32_receiver_ch2_period = u16_auto_mode_capture1[1] - u16_auto_mode_capture1[0];
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 800198e:	885b      	ldrh	r3, [r3, #2]
 8001990:	461a      	mov	r2, r3
 8001992:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]
		}

		u32_receiver_ch3_freq_Hz = (HAL_RCC_GetPCLK1Freq() * 2) / (htim3.Instance->PSC + 1);  //84000000
 800199e:	f002 fc53 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80019a2:	4603      	mov	r3, r0
 80019a4:	005a      	lsls	r2, r3, #1
 80019a6:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <_ZN7Bootley13GetPulseWidthEv+0x3dc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	3301      	adds	r3, #1
 80019ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
		u32_receiver_ch3_freq_Hz = u32_receiver_ch3_freq_Hz / u32_receiver_ch3_period;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

		b_g_auto_mode_ch1_done = false;
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <_ZN7Bootley13GetPulseWidthEv+0x3e0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
	}
	if(b_g_auto_mode_ch2_done)
 80019cc:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <_ZN7Bootley13GetPulseWidthEv+0x3e4>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d038      	beq.n	8001a46 <_ZN7Bootley13GetPulseWidthEv+0x2ea>
	{
		if(u16_auto_mode_capture2[0] >= u16_auto_mode_capture1[0] && u16_auto_mode_capture2[0] <= u16_auto_mode_capture1[1])
 80019d4:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d30f      	bcc.n	8001a00 <_ZN7Bootley13GetPulseWidthEv+0x2a4>
 80019e0:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d809      	bhi.n	8001a00 <_ZN7Bootley13GetPulseWidthEv+0x2a4>
		{
			u32_auto_mode_pw_us = u16_auto_mode_capture2[0] - u16_auto_mode_capture1[0];
 80019ec:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
 80019fe:	e014      	b.n	8001a2a <_ZN7Bootley13GetPulseWidthEv+0x2ce>
		}
		else if(u16_auto_mode_capture2[1] >= u16_auto_mode_capture1[0] && u16_auto_mode_capture2[1] <= u16_auto_mode_capture1[1])
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 8001a02:	885a      	ldrh	r2, [r3, #2]
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d30e      	bcc.n	8001a2a <_ZN7Bootley13GetPulseWidthEv+0x2ce>
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 8001a0e:	885a      	ldrh	r2, [r3, #2]
 8001a10:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 8001a12:	885b      	ldrh	r3, [r3, #2]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d808      	bhi.n	8001a2a <_ZN7Bootley13GetPulseWidthEv+0x2ce>
		{
			u32_auto_mode_pw_us = u16_auto_mode_capture2[1] - u16_auto_mode_capture1[0];
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <_ZN7Bootley13GetPulseWidthEv+0x3e8>)
 8001a1a:	885b      	ldrh	r3, [r3, #2]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <_ZN7Bootley13GetPulseWidthEv+0x3d8>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
		}

		u32_receiver_ch3_duty = u32_auto_mode_pw_us * 100 / u32_receiver_ch3_period;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	2264      	movs	r2, #100	; 0x64
 8001a30:	fb03 f202 	mul.w	r2, r3, r2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
		b_g_auto_mode_ch2_done = false;
 8001a40:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <_ZN7Bootley13GetPulseWidthEv+0x3e4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	}
	/* 수신기 ch3 계산 부분 끝 */

	/* 수신기 ch4 계산 부분 시작 */
	if(b_g_drive_mode_ch3_done)
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <_ZN7Bootley13GetPulseWidthEv+0x3ec>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d031      	beq.n	8001ab2 <_ZN7Bootley13GetPulseWidthEv+0x356>
	{
		if(u16_drive_mode_capture1[0] > u16_drive_mode_capture1[1])
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a54:	885b      	ldrh	r3, [r3, #2]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d90b      	bls.n	8001a72 <_ZN7Bootley13GetPulseWidthEv+0x316>
		{
			u32_receiver_ch4_period = htim3.Instance->ARR + u16_drive_mode_capture1[1] - u16_drive_mode_capture1[0];
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <_ZN7Bootley13GetPulseWidthEv+0x3dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a62:	8852      	ldrh	r2, [r2, #2]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a39      	ldr	r2, [pc, #228]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	1a9a      	subs	r2, r3, r2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a70:	e008      	b.n	8001a84 <_ZN7Bootley13GetPulseWidthEv+0x328>
		}
		else
		{
			u32_receiver_ch4_period = u16_drive_mode_capture1[1] - u16_drive_mode_capture1[0];
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a74:	885b      	ldrh	r3, [r3, #2]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
		}

		u32_receiver_ch4_freq_Hz = (HAL_RCC_GetPCLK1Freq() * 2) / (htim3.Instance->PSC + 1);  //84000000
 8001a84:	f002 fbe0 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	005a      	lsls	r2, r3, #1
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <_ZN7Bootley13GetPulseWidthEv+0x3dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	3301      	adds	r3, #1
 8001a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
		u32_receiver_ch4_freq_Hz = u32_receiver_ch4_freq_Hz / u32_receiver_ch4_period;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38

		b_g_drive_mode_ch3_done = false;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <_ZN7Bootley13GetPulseWidthEv+0x3ec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	}
	if(b_g_drive_mode_ch4_done)
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <_ZN7Bootley13GetPulseWidthEv+0x3f4>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d038      	beq.n	8001b2c <_ZN7Bootley13GetPulseWidthEv+0x3d0>
	{
		if(u16_drive_mode_capture2[0] >= u16_drive_mode_capture1[0] && u16_drive_mode_capture2[0] <= u16_drive_mode_capture1[1])
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d30f      	bcc.n	8001ae6 <_ZN7Bootley13GetPulseWidthEv+0x38a>
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d809      	bhi.n	8001ae6 <_ZN7Bootley13GetPulseWidthEv+0x38a>
		{
			u32_drive_mode_pw_us = u16_drive_mode_capture2[0] - u16_drive_mode_capture1[0];
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae4:	e014      	b.n	8001b10 <_ZN7Bootley13GetPulseWidthEv+0x3b4>
		}
		else if(u16_drive_mode_capture2[1] >= u16_drive_mode_capture1[0] && u16_drive_mode_capture2[1] <= u16_drive_mode_capture1[1])
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001ae8:	885a      	ldrh	r2, [r3, #2]
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d30e      	bcc.n	8001b10 <_ZN7Bootley13GetPulseWidthEv+0x3b4>
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001af4:	885a      	ldrh	r2, [r3, #2]
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001af8:	885b      	ldrh	r3, [r3, #2]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d808      	bhi.n	8001b10 <_ZN7Bootley13GetPulseWidthEv+0x3b4>
		{
			u32_drive_mode_pw_us = u16_drive_mode_capture2[1] - u16_drive_mode_capture1[0];
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_ZN7Bootley13GetPulseWidthEv+0x3f8>)
 8001b00:	885b      	ldrh	r3, [r3, #2]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_ZN7Bootley13GetPulseWidthEv+0x3f0>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
		}

		u32_receiver_ch4_duty = u32_drive_mode_pw_us * 100 / u32_receiver_ch4_period;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	2264      	movs	r2, #100	; 0x64
 8001b16:	fb03 f202 	mul.w	r2, r3, r2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c
		b_g_drive_mode_ch4_done = false;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <_ZN7Bootley13GetPulseWidthEv+0x3f4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
	}
	/* 수신기 ch4 계산 부분 끝 */


}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000210 	.word	0x20000210
 8001b38:	200002bc 	.word	0x200002bc
 8001b3c:	20000218 	.word	0x20000218
 8001b40:	20000219 	.word	0x20000219
 8001b44:	20000214 	.word	0x20000214
 8001b48:	20000224 	.word	0x20000224
 8001b4c:	2000021c 	.word	0x2000021c
 8001b50:	20000225 	.word	0x20000225
 8001b54:	20000220 	.word	0x20000220

08001b58 <_ZN7Bootley14GetSteeringValEv>:



void Bootley::GetSteeringVal()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	float pulse_width_us = (float)u32_steering_pw_us - STEERING_PW_ERROR_US;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b74:	edc7 7a03 	vstr	s15, [r7, #12]

	if(pulse_width_us < (float)RECEIVER_MIN_PW) 		pulse_width_us = (float)RECEIVER_MIN_PW;
 8001b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bd0 <_ZN7Bootley14GetSteeringValEv+0x78>
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	d502      	bpl.n	8001b90 <_ZN7Bootley14GetSteeringValEv+0x38>
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <_ZN7Bootley14GetSteeringValEv+0x7c>)
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e00a      	b.n	8001ba6 <_ZN7Bootley14GetSteeringValEv+0x4e>
	else if(pulse_width_us > (float)RECEIVER_MAX_PW)	pulse_width_us = (float)RECEIVER_MAX_PW;
 8001b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b94:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001bd8 <_ZN7Bootley14GetSteeringValEv+0x80>
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	dd01      	ble.n	8001ba6 <_ZN7Bootley14GetSteeringValEv+0x4e>
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <_ZN7Bootley14GetSteeringValEv+0x84>)
 8001ba4:	60fb      	str	r3, [r7, #12]

	
	f_steering_val = float_map(pulse_width_us, RECEIVER_MIN_PW, RECEIVER_MAX_PW, RIGHT_MAX_STEERING_VAL, LEFT_MAX_STEERING_VAL);
 8001ba6:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001be0 <_ZN7Bootley14GetSteeringValEv+0x88>
 8001baa:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001be4 <_ZN7Bootley14GetSteeringValEv+0x8c>
 8001bae:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001bd8 <_ZN7Bootley14GetSteeringValEv+0x80>
 8001bb2:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001bd0 <_ZN7Bootley14GetSteeringValEv+0x78>
 8001bb6:	ed97 0a03 	vldr	s0, [r7, #12]
 8001bba:	f000 faf3 	bl	80021a4 <_Z9float_mapfffff>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	447a0000 	.word	0x447a0000
 8001bd4:	447a0000 	.word	0x447a0000
 8001bd8:	44fa0000 	.word	0x44fa0000
 8001bdc:	44fa0000 	.word	0x44fa0000
 8001be0:	43fa0000 	.word	0x43fa0000
 8001be4:	c3fa0000 	.word	0xc3fa0000

08001be8 <_ZN7Bootley11GetAccelValEv>:

void Bootley::GetAccelVal()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	float pulse_width_us = (float)u32_accel_pw_us - ACCEL_PW_ERROR_US;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c04:	edc7 7a03 	vstr	s15, [r7, #12]

	if(pulse_width_us < (float)RECEIVER_MIN_PW) 		pulse_width_us = (float)RECEIVER_MIN_PW;
 8001c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c60 <_ZN7Bootley11GetAccelValEv+0x78>
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d502      	bpl.n	8001c20 <_ZN7Bootley11GetAccelValEv+0x38>
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <_ZN7Bootley11GetAccelValEv+0x7c>)
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e00a      	b.n	8001c36 <_ZN7Bootley11GetAccelValEv+0x4e>
	else if(pulse_width_us > (float)RECEIVER_MAX_PW)	pulse_width_us = (float)RECEIVER_MAX_PW;
 8001c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c24:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c68 <_ZN7Bootley11GetAccelValEv+0x80>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	dd01      	ble.n	8001c36 <_ZN7Bootley11GetAccelValEv+0x4e>
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <_ZN7Bootley11GetAccelValEv+0x84>)
 8001c34:	60fb      	str	r3, [r7, #12]


	f_accel_val = float_map(pulse_width_us, RECEIVER_MIN_PW, RECEIVER_MAX_PW, BACKWARD_MAX_ACCEL_VAL, FORWARD_MAX_ACCEL_VAL);
 8001c36:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8001c70 <_ZN7Bootley11GetAccelValEv+0x88>
 8001c3a:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001c74 <_ZN7Bootley11GetAccelValEv+0x8c>
 8001c3e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001c68 <_ZN7Bootley11GetAccelValEv+0x80>
 8001c42:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001c60 <_ZN7Bootley11GetAccelValEv+0x78>
 8001c46:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c4a:	f000 faab 	bl	80021a4 <_Z9float_mapfffff>
 8001c4e:	eef0 7a40 	vmov.f32	s15, s0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	447a0000 	.word	0x447a0000
 8001c64:	447a0000 	.word	0x447a0000
 8001c68:	44fa0000 	.word	0x44fa0000
 8001c6c:	44fa0000 	.word	0x44fa0000
 8001c70:	43fa0000 	.word	0x43fa0000
 8001c74:	c3fa0000 	.word	0xc3fa0000

08001c78 <_ZN7Bootley11SetAutoModeEv>:


void Bootley::SetAutoMode()
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if ((u32_auto_mode_pw_us > 900) && (u32_auto_mode_pw_us < 1500))		b_auto_mode = MANUAL_MODE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001c88:	d90a      	bls.n	8001ca0 <_ZN7Bootley11SetAutoModeEv+0x28>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d804      	bhi.n	8001ca0 <_ZN7Bootley11SetAutoModeEv+0x28>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	else if ((u32_auto_mode_pw_us > 1500) && u32_auto_mode_pw_us < 2200)	b_auto_mode = AUTO_MODE;

}
 8001c9e:	e00f      	b.n	8001cc0 <_ZN7Bootley11SetAutoModeEv+0x48>
	else if ((u32_auto_mode_pw_us > 1500) && u32_auto_mode_pw_us < 2200)	b_auto_mode = AUTO_MODE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d909      	bls.n	8001cc0 <_ZN7Bootley11SetAutoModeEv+0x48>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f640 0297 	movw	r2, #2199	; 0x897
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d803      	bhi.n	8001cc0 <_ZN7Bootley11SetAutoModeEv+0x48>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_ZN7Bootley12SetDriveModeEv>:


void Bootley::SetDriveMode()
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	if ((u32_drive_mode_pw_us > 900) && (u32_drive_mode_pw_us < 1300))		u8_drive_mode = SPINNING_MODE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001cdc:	d90a      	bls.n	8001cf4 <_ZN7Bootley12SetDriveModeEv+0x28>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	f240 5213 	movw	r2, #1299	; 0x513
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d804      	bhi.n	8001cf4 <_ZN7Bootley12SetDriveModeEv+0x28>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001cf2:	e021      	b.n	8001d38 <_ZN7Bootley12SetDriveModeEv+0x6c>
	else if ((u32_drive_mode_pw_us > 1301) && u32_drive_mode_pw_us < 1700)	u8_drive_mode = NORMAL_MODE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	f240 5215 	movw	r2, #1301	; 0x515
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d90a      	bls.n	8001d16 <_ZN7Bootley12SetDriveModeEv+0x4a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d804      	bhi.n	8001d16 <_ZN7Bootley12SetDriveModeEv+0x4a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001d14:	e010      	b.n	8001d38 <_ZN7Bootley12SetDriveModeEv+0x6c>
	else if ((u32_drive_mode_pw_us > 1701) && u32_drive_mode_pw_us < 2200)	u8_drive_mode = LOCK_MODE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	f240 62a5 	movw	r2, #1701	; 0x6a5
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d90a      	bls.n	8001d38 <_ZN7Bootley12SetDriveModeEv+0x6c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	f640 0297 	movw	r2, #2199	; 0x897
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d804      	bhi.n	8001d38 <_ZN7Bootley12SetDriveModeEv+0x6c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

}
 8001d36:	e7ff      	b.n	8001d38 <_ZN7Bootley12SetDriveModeEv+0x6c>
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_Z14FL_BrakeEnablev>:

#include "MY36GP_3650.hpp"



void FL_BrakeEnable(void) { HAL_GPIO_WritePin(FL_BRAKE_PORT, FL_BRAKE_PIN, GPIO_PIN_RESET); }
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <_Z14FL_BrakeEnablev+0x14>)
 8001d4e:	f002 f96f 	bl	8004030 <HAL_GPIO_WritePin>
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020000 	.word	0x40020000

08001d5c <_Z15FL_BrakeDisablev>:
void FL_BrakeDisable(void) { HAL_GPIO_WritePin(FL_BRAKE_PORT, FL_BRAKE_PIN, GPIO_PIN_SET); }
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	2201      	movs	r2, #1
 8001d62:	2110      	movs	r1, #16
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <_Z15FL_BrakeDisablev+0x14>)
 8001d66:	f002 f963 	bl	8004030 <HAL_GPIO_WritePin>
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40020000 	.word	0x40020000

08001d74 <_Z9FL_SetDir13GPIO_PinState>:
void FL_SetDir(GPIO_PinState dir) { HAL_GPIO_WritePin(FL_DIR_PORT, FL_DIR_PIN, dir); }	// CW 일 때 pin reset, CCW일 때 set
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	461a      	mov	r2, r3
 8001d82:	2102      	movs	r1, #2
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <_Z9FL_SetDir13GPIO_PinState+0x20>)
 8001d86:	f002 f953 	bl	8004030 <HAL_GPIO_WritePin>
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020400 	.word	0x40020400

08001d98 <_Z14FR_BrakeEnablev>:

void FR_BrakeEnable(void) { HAL_GPIO_WritePin(FR_BRAKE_PORT, FR_BRAKE_PIN, GPIO_PIN_RESET); }
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <_Z14FR_BrakeEnablev+0x14>)
 8001da2:	f002 f945 	bl	8004030 <HAL_GPIO_WritePin>
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40020400 	.word	0x40020400

08001db0 <_Z15FR_BrakeDisablev>:
void FR_BrakeDisable(void) { HAL_GPIO_WritePin(FR_BRAKE_PORT, FR_BRAKE_PIN, GPIO_PIN_SET); }
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	2201      	movs	r2, #1
 8001db6:	2101      	movs	r1, #1
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <_Z15FR_BrakeDisablev+0x14>)
 8001dba:	f002 f939 	bl	8004030 <HAL_GPIO_WritePin>
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <_Z9FR_SetDir13GPIO_PinState>:
void FR_SetDir(GPIO_PinState dir) { HAL_GPIO_WritePin(FR_DIR_PORT, FR_DIR_PIN, dir); }	// CW 일 때 pin reset, CCW일 때 set
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dda:	4803      	ldr	r0, [pc, #12]	; (8001de8 <_Z9FR_SetDir13GPIO_PinState+0x20>)
 8001ddc:	f002 f928 	bl	8004030 <HAL_GPIO_WritePin>
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40020400 	.word	0x40020400

08001dec <_Z14RL_BrakeEnablev>:

void RL_BrakeEnable(void) { HAL_GPIO_WritePin(RL_BRAKE_PORT, RL_BRAKE_PIN, GPIO_PIN_RESET); }
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	2200      	movs	r2, #0
 8001df2:	2102      	movs	r1, #2
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <_Z14RL_BrakeEnablev+0x14>)
 8001df6:	f002 f91b 	bl	8004030 <HAL_GPIO_WritePin>
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020800 	.word	0x40020800

08001e04 <_Z15RL_BrakeDisablev>:
void RL_BrakeDisable(void) { HAL_GPIO_WritePin(RL_BRAKE_PORT, RL_BRAKE_PIN, GPIO_PIN_SET); }
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <_Z15RL_BrakeDisablev+0x14>)
 8001e0e:	f002 f90f 	bl	8004030 <HAL_GPIO_WritePin>
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40020800 	.word	0x40020800

08001e1c <_Z9RL_SetDir13GPIO_PinState>:
void RL_SetDir(GPIO_PinState dir) { HAL_GPIO_WritePin(RL_DIR_PORT, RL_DIR_PIN, dir); }	// CW 일 때 pin reset, CCW일 때 set
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <_Z9RL_SetDir13GPIO_PinState+0x20>)
 8001e30:	f002 f8fe 	bl	8004030 <HAL_GPIO_WritePin>
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40020400 	.word	0x40020400

08001e40 <_Z14RR_BrakeEnablev>:

void RR_BrakeEnable(void) { HAL_GPIO_WritePin(RR_BRAKE_PORT, RR_BRAKE_PIN, GPIO_PIN_RESET); }
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	2200      	movs	r2, #0
 8001e46:	2101      	movs	r1, #1
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <_Z14RR_BrakeEnablev+0x14>)
 8001e4a:	f002 f8f1 	bl	8004030 <HAL_GPIO_WritePin>
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020800 	.word	0x40020800

08001e58 <_Z15RR_BrakeDisablev>:
void RR_BrakeDisable(void) { HAL_GPIO_WritePin(RR_BRAKE_PORT, RR_BRAKE_PIN, GPIO_PIN_SET); }
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <_Z15RR_BrakeDisablev+0x14>)
 8001e62:	f002 f8e5 	bl	8004030 <HAL_GPIO_WritePin>
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40020800 	.word	0x40020800

08001e70 <_Z9RR_SetDir13GPIO_PinState>:
void RR_SetDir(GPIO_PinState dir) { HAL_GPIO_WritePin(RR_DIR_PORT, RR_DIR_PIN, dir); }	// CW 일 때 pin reset, CCW일 때 set
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <_Z9RR_SetDir13GPIO_PinState+0x20>)
 8001e84:	f002 f8d4 	bl	8004030 <HAL_GPIO_WritePin>
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020400 	.word	0x40020400

08001e94 <_Z11FL_RunMotorf13GPIO_PinState>:
 * 최대 RPM -> CCR = 140
 * 최소 RPM -> CCR = 750
 * dir  : CW or CCW
*/
void FL_RunMotor(float rpm, GPIO_PinState dir)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	70fb      	strb	r3, [r7, #3]
    float f_RPMtoCCR;
    uint32_t u32_input_CCR;

    f_RPMtoCCR = float_map(rpm, 0.0, FL_RATED_RPM, FL_MIN_SPEED_CCR, FL_RATED_SPEED_CCR);
 8001ea2:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8001f38 <_Z11FL_RunMotorf13GPIO_PinState+0xa4>
 8001ea6:	eddf 1a25 	vldr	s3, [pc, #148]	; 8001f3c <_Z11FL_RunMotorf13GPIO_PinState+0xa8>
 8001eaa:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8001f40 <_Z11FL_RunMotorf13GPIO_PinState+0xac>
 8001eae:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001f44 <_Z11FL_RunMotorf13GPIO_PinState+0xb0>
 8001eb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001eb6:	f000 f975 	bl	80021a4 <_Z9float_mapfffff>
 8001eba:	ed87 0a03 	vstr	s0, [r7, #12]

	// constrain
    if (f_RPMtoCCR > FL_MIN_SPEED_CCR)    		f_RPMtoCCR = FL_MIN_SPEED_CCR;
 8001ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ec2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001f3c <_Z11FL_RunMotorf13GPIO_PinState+0xa8>
 8001ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	dd02      	ble.n	8001ed6 <_Z11FL_RunMotorf13GPIO_PinState+0x42>
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <_Z11FL_RunMotorf13GPIO_PinState+0xb4>)
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e00a      	b.n	8001eec <_Z11FL_RunMotorf13GPIO_PinState+0x58>
    else if(f_RPMtoCCR < FL_RATED_SPEED_CCR) 	f_RPMtoCCR = FL_RATED_SPEED_CCR;
 8001ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eda:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f38 <_Z11FL_RunMotorf13GPIO_PinState+0xa4>
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d501      	bpl.n	8001eec <_Z11FL_RunMotorf13GPIO_PinState+0x58>
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <_Z11FL_RunMotorf13GPIO_PinState+0xb8>)
 8001eea:	60fb      	str	r3, [r7, #12]

	// 모터가 전원만 받고 안돌아가면 꺼지더라구요 -> 최소 출력 설정
    if (f_RPMtoCCR < FL_MOTOR_STOP_CCR) 	u32_input_CCR = (uint32_t)f_RPMtoCCR;
 8001eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f50 <_Z11FL_RunMotorf13GPIO_PinState+0xbc>
 8001ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	d507      	bpl.n	8001f0e <_Z11FL_RunMotorf13GPIO_PinState+0x7a>
 8001efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f06:	ee17 3a90 	vmov	r3, s15
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	e002      	b.n	8001f14 <_Z11FL_RunMotorf13GPIO_PinState+0x80>
    else 									u32_input_CCR = OUTPUT_HIGH;
 8001f0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8001f12:	60bb      	str	r3, [r7, #8]


	FL_BrakeDisable();
 8001f14:	f7ff ff22 	bl	8001d5c <_Z15FL_BrakeDisablev>
    FL_SetDir(dir);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff2a 	bl	8001d74 <_Z9FL_SetDir13GPIO_PinState>
    TIM2->CCR1 = u32_input_CCR;
 8001f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6353      	str	r3, [r2, #52]	; 0x34

    printf("\r\nFL CCR : %d\t", u32_input_CCR);	// for debugging
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <_Z11FL_RunMotorf13GPIO_PinState+0xc0>)
 8001f2c:	f005 fb68 	bl	8007600 <iprintf>

}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	430c0000 	.word	0x430c0000
 8001f3c:	443b8000 	.word	0x443b8000
 8001f40:	43e10000 	.word	0x43e10000
 8001f44:	00000000 	.word	0x00000000
 8001f48:	443b8000 	.word	0x443b8000
 8001f4c:	430c0000 	.word	0x430c0000
 8001f50:	44368000 	.word	0x44368000
 8001f54:	080097a0 	.word	0x080097a0

08001f58 <_Z11FR_RunMotorf13GPIO_PinState>:

void FR_RunMotor(float rpm, GPIO_PinState dir)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f62:	4603      	mov	r3, r0
 8001f64:	70fb      	strb	r3, [r7, #3]
    float f_RPMtoCCR;
    uint32_t u32_input_CCR;

    f_RPMtoCCR = float_map(rpm, 0.0, FR_RATED_RPM, FR_MIN_SPEED_CCR, FR_RATED_SPEED_CCR);
 8001f66:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8001ffc <_Z11FR_RunMotorf13GPIO_PinState+0xa4>
 8001f6a:	eddf 1a25 	vldr	s3, [pc, #148]	; 8002000 <_Z11FR_RunMotorf13GPIO_PinState+0xa8>
 8001f6e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8002004 <_Z11FR_RunMotorf13GPIO_PinState+0xac>
 8001f72:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002008 <_Z11FR_RunMotorf13GPIO_PinState+0xb0>
 8001f76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f7a:	f000 f913 	bl	80021a4 <_Z9float_mapfffff>
 8001f7e:	ed87 0a03 	vstr	s0, [r7, #12]

	// constrain
    if (f_RPMtoCCR > FR_MIN_SPEED_CCR)    		f_RPMtoCCR = FR_MIN_SPEED_CCR;
 8001f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f86:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002000 <_Z11FR_RunMotorf13GPIO_PinState+0xa8>
 8001f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	dd02      	ble.n	8001f9a <_Z11FR_RunMotorf13GPIO_PinState+0x42>
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <_Z11FR_RunMotorf13GPIO_PinState+0xb4>)
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e00a      	b.n	8001fb0 <_Z11FR_RunMotorf13GPIO_PinState+0x58>
    else if(f_RPMtoCCR < FR_RATED_SPEED_CCR) 	f_RPMtoCCR = FR_RATED_SPEED_CCR;
 8001f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ffc <_Z11FR_RunMotorf13GPIO_PinState+0xa4>
 8001fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	d501      	bpl.n	8001fb0 <_Z11FR_RunMotorf13GPIO_PinState+0x58>
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <_Z11FR_RunMotorf13GPIO_PinState+0xb8>)
 8001fae:	60fb      	str	r3, [r7, #12]

	// 모터가 전원만 받고 안돌아가면 꺼지더라구요 -> 최소 출력 설정
    if (f_RPMtoCCR < FR_MOTOR_STOP_CCR) 	u32_input_CCR = (uint32_t)f_RPMtoCCR;
 8001fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002014 <_Z11FR_RunMotorf13GPIO_PinState+0xbc>
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	d507      	bpl.n	8001fd2 <_Z11FR_RunMotorf13GPIO_PinState+0x7a>
 8001fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fca:	ee17 3a90 	vmov	r3, s15
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	e002      	b.n	8001fd8 <_Z11FR_RunMotorf13GPIO_PinState+0x80>
    else 									u32_input_CCR = OUTPUT_HIGH;
 8001fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8001fd6:	60bb      	str	r3, [r7, #8]


	FR_BrakeDisable();
 8001fd8:	f7ff feea 	bl	8001db0 <_Z15FR_BrakeDisablev>
    FR_SetDir(dir);
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fef2 	bl	8001dc8 <_Z9FR_SetDir13GPIO_PinState>
    TIM2->CCR2 = u32_input_CCR;
 8001fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6393      	str	r3, [r2, #56]	; 0x38

    printf("FR CCR : %d\t", u32_input_CCR);	// for debugging
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	480a      	ldr	r0, [pc, #40]	; (8002018 <_Z11FR_RunMotorf13GPIO_PinState+0xc0>)
 8001ff0:	f005 fb06 	bl	8007600 <iprintf>

}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	430c0000 	.word	0x430c0000
 8002000:	443b8000 	.word	0x443b8000
 8002004:	43e10000 	.word	0x43e10000
 8002008:	00000000 	.word	0x00000000
 800200c:	443b8000 	.word	0x443b8000
 8002010:	430c0000 	.word	0x430c0000
 8002014:	44368000 	.word	0x44368000
 8002018:	080097b0 	.word	0x080097b0

0800201c <_Z11RL_RunMotorf13GPIO_PinState>:

void RL_RunMotor(float rpm, GPIO_PinState dir)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	ed87 0a01 	vstr	s0, [r7, #4]
 8002026:	4603      	mov	r3, r0
 8002028:	70fb      	strb	r3, [r7, #3]
    float f_RPMtoCCR;
    uint32_t u32_input_CCR;

    f_RPMtoCCR = float_map(rpm, 0.0, RL_RATED_RPM, RL_MIN_SPEED_CCR, RL_RATED_SPEED_CCR);
 800202a:	ed9f 2a25 	vldr	s4, [pc, #148]	; 80020c0 <_Z11RL_RunMotorf13GPIO_PinState+0xa4>
 800202e:	eddf 1a25 	vldr	s3, [pc, #148]	; 80020c4 <_Z11RL_RunMotorf13GPIO_PinState+0xa8>
 8002032:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80020c8 <_Z11RL_RunMotorf13GPIO_PinState+0xac>
 8002036:	eddf 0a25 	vldr	s1, [pc, #148]	; 80020cc <_Z11RL_RunMotorf13GPIO_PinState+0xb0>
 800203a:	ed97 0a01 	vldr	s0, [r7, #4]
 800203e:	f000 f8b1 	bl	80021a4 <_Z9float_mapfffff>
 8002042:	ed87 0a03 	vstr	s0, [r7, #12]

	// constrain
    if (f_RPMtoCCR > RL_MIN_SPEED_CCR)    		f_RPMtoCCR = RL_MIN_SPEED_CCR;
 8002046:	edd7 7a03 	vldr	s15, [r7, #12]
 800204a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80020c4 <_Z11RL_RunMotorf13GPIO_PinState+0xa8>
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	dd02      	ble.n	800205e <_Z11RL_RunMotorf13GPIO_PinState+0x42>
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <_Z11RL_RunMotorf13GPIO_PinState+0xb4>)
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e00a      	b.n	8002074 <_Z11RL_RunMotorf13GPIO_PinState+0x58>
    else if(f_RPMtoCCR < RL_RATED_SPEED_CCR) 	f_RPMtoCCR = RL_RATED_SPEED_CCR;
 800205e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002062:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020c0 <_Z11RL_RunMotorf13GPIO_PinState+0xa4>
 8002066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	d501      	bpl.n	8002074 <_Z11RL_RunMotorf13GPIO_PinState+0x58>
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <_Z11RL_RunMotorf13GPIO_PinState+0xb8>)
 8002072:	60fb      	str	r3, [r7, #12]

	// 모터가 전원만 받고 안돌아가면 꺼지더라구요 -> 최소 출력 설정
    if (f_RPMtoCCR < RL_MOTOR_STOP_CCR) 	u32_input_CCR = (uint32_t)f_RPMtoCCR;
 8002074:	edd7 7a03 	vldr	s15, [r7, #12]
 8002078:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020d8 <_Z11RL_RunMotorf13GPIO_PinState+0xbc>
 800207c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	d507      	bpl.n	8002096 <_Z11RL_RunMotorf13GPIO_PinState+0x7a>
 8002086:	edd7 7a03 	vldr	s15, [r7, #12]
 800208a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208e:	ee17 3a90 	vmov	r3, s15
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e002      	b.n	800209c <_Z11RL_RunMotorf13GPIO_PinState+0x80>
    else 									u32_input_CCR = OUTPUT_HIGH;
 8002096:	f242 730f 	movw	r3, #9999	; 0x270f
 800209a:	60bb      	str	r3, [r7, #8]


	RL_BrakeDisable();
 800209c:	f7ff feb2 	bl	8001e04 <_Z15RL_BrakeDisablev>
    RL_SetDir(dir);
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff feba 	bl	8001e1c <_Z9RL_SetDir13GPIO_PinState>
    TIM2->CCR3 = u32_input_CCR;
 80020a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	63d3      	str	r3, [r2, #60]	; 0x3c

    printf("RL CCR : %d\t", u32_input_CCR);	// for debugging
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <_Z11RL_RunMotorf13GPIO_PinState+0xc0>)
 80020b4:	f005 faa4 	bl	8007600 <iprintf>

}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	430c0000 	.word	0x430c0000
 80020c4:	443b8000 	.word	0x443b8000
 80020c8:	43e10000 	.word	0x43e10000
 80020cc:	00000000 	.word	0x00000000
 80020d0:	443b8000 	.word	0x443b8000
 80020d4:	430c0000 	.word	0x430c0000
 80020d8:	44368000 	.word	0x44368000
 80020dc:	080097c0 	.word	0x080097c0

080020e0 <_Z11RR_RunMotorf13GPIO_PinState>:



void RR_RunMotor(float rpm, GPIO_PinState dir)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
    float f_RPMtoCCR;
    uint32_t u32_input_CCR;

    f_RPMtoCCR = float_map(rpm, 0.0, RR_RATED_RPM, RR_MIN_SPEED_CCR, RR_RATED_SPEED_CCR);
 80020ee:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8002184 <_Z11RR_RunMotorf13GPIO_PinState+0xa4>
 80020f2:	eddf 1a25 	vldr	s3, [pc, #148]	; 8002188 <_Z11RR_RunMotorf13GPIO_PinState+0xa8>
 80020f6:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800218c <_Z11RR_RunMotorf13GPIO_PinState+0xac>
 80020fa:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002190 <_Z11RR_RunMotorf13GPIO_PinState+0xb0>
 80020fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002102:	f000 f84f 	bl	80021a4 <_Z9float_mapfffff>
 8002106:	ed87 0a03 	vstr	s0, [r7, #12]

	// constrain
    if (f_RPMtoCCR > RR_MIN_SPEED_CCR)    		f_RPMtoCCR = RR_MIN_SPEED_CCR;
 800210a:	edd7 7a03 	vldr	s15, [r7, #12]
 800210e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002188 <_Z11RR_RunMotorf13GPIO_PinState+0xa8>
 8002112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	dd02      	ble.n	8002122 <_Z11RR_RunMotorf13GPIO_PinState+0x42>
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <_Z11RR_RunMotorf13GPIO_PinState+0xb4>)
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e00a      	b.n	8002138 <_Z11RR_RunMotorf13GPIO_PinState+0x58>
    else if(f_RPMtoCCR < RR_RATED_SPEED_CCR) 	f_RPMtoCCR = RR_RATED_SPEED_CCR;
 8002122:	edd7 7a03 	vldr	s15, [r7, #12]
 8002126:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002184 <_Z11RR_RunMotorf13GPIO_PinState+0xa4>
 800212a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d501      	bpl.n	8002138 <_Z11RR_RunMotorf13GPIO_PinState+0x58>
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <_Z11RR_RunMotorf13GPIO_PinState+0xb8>)
 8002136:	60fb      	str	r3, [r7, #12]

	// 모터가 전원만 받고 안돌아가면 꺼지더라구요 -> 최소 출력 설정
    if (f_RPMtoCCR < RR_MOTOR_STOP_CCR) 	u32_input_CCR = (uint32_t)f_RPMtoCCR;
 8002138:	edd7 7a03 	vldr	s15, [r7, #12]
 800213c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800219c <_Z11RR_RunMotorf13GPIO_PinState+0xbc>
 8002140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d507      	bpl.n	800215a <_Z11RR_RunMotorf13GPIO_PinState+0x7a>
 800214a:	edd7 7a03 	vldr	s15, [r7, #12]
 800214e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002152:	ee17 3a90 	vmov	r3, s15
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e002      	b.n	8002160 <_Z11RR_RunMotorf13GPIO_PinState+0x80>
    else 									u32_input_CCR = OUTPUT_HIGH;
 800215a:	f242 730f 	movw	r3, #9999	; 0x270f
 800215e:	60bb      	str	r3, [r7, #8]


	RR_BrakeDisable();
 8002160:	f7ff fe7a 	bl	8001e58 <_Z15RR_BrakeDisablev>
    RR_SetDir(dir);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe82 	bl	8001e70 <_Z9RR_SetDir13GPIO_PinState>
    TIM2->CCR4 = u32_input_CCR;
 800216c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6413      	str	r3, [r2, #64]	; 0x40

    printf("RR CCR : %d\r\n", u32_input_CCR);	// for debugging
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	480a      	ldr	r0, [pc, #40]	; (80021a0 <_Z11RR_RunMotorf13GPIO_PinState+0xc0>)
 8002178:	f005 fa42 	bl	8007600 <iprintf>

}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	430c0000 	.word	0x430c0000
 8002188:	443b8000 	.word	0x443b8000
 800218c:	43e10000 	.word	0x43e10000
 8002190:	00000000 	.word	0x00000000
 8002194:	443b8000 	.word	0x443b8000
 8002198:	430c0000 	.word	0x430c0000
 800219c:	44368000 	.word	0x44368000
 80021a0:	080097d0 	.word	0x080097d0

080021a4 <_Z9float_mapfffff>:




float float_map(float x, float in_min, float in_max, float out_min, float out_max)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80021ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80021b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80021b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80021ba:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021be:	ed97 7a05 	vldr	s14, [r7, #20]
 80021c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021da:	ed97 7a03 	vldr	s14, [r7, #12]
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <MX_DMA_Init+0xc8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <MX_DMA_Init+0xc8>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <MX_DMA_Init+0xc8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <MX_DMA_Init+0xc8>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <MX_DMA_Init+0xc8>)
 800222c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <MX_DMA_Init+0xc8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	200d      	movs	r0, #13
 8002244:	f001 f9b9 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002248:	200d      	movs	r0, #13
 800224a:	f001 f9d2 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	200f      	movs	r0, #15
 8002254:	f001 f9b1 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002258:	200f      	movs	r0, #15
 800225a:	f001 f9ca 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2010      	movs	r0, #16
 8002264:	f001 f9a9 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002268:	2010      	movs	r0, #16
 800226a:	f001 f9c2 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	202f      	movs	r0, #47	; 0x2f
 8002274:	f001 f9a1 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002278:	202f      	movs	r0, #47	; 0x2f
 800227a:	f001 f9ba 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2039      	movs	r0, #57	; 0x39
 8002284:	f001 f999 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002288:	2039      	movs	r0, #57	; 0x39
 800228a:	f001 f9b2 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	203a      	movs	r0, #58	; 0x3a
 8002294:	f001 f991 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002298:	203a      	movs	r0, #58	; 0x3a
 800229a:	f001 f9aa 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	203c      	movs	r0, #60	; 0x3c
 80022a4:	f001 f989 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80022a8:	203c      	movs	r0, #60	; 0x3c
 80022aa:	f001 f9a2 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2045      	movs	r0, #69	; 0x45
 80022b4:	f001 f981 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80022b8:	2045      	movs	r0, #69	; 0x45
 80022ba:	f001 f99a 	bl	80035f2 <HAL_NVIC_EnableIRQ>

}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <MX_GPIO_Init+0x104>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a39      	ldr	r2, [pc, #228]	; (80023d0 <MX_GPIO_Init+0x104>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <MX_GPIO_Init+0x104>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <MX_GPIO_Init+0x104>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <MX_GPIO_Init+0x104>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <MX_GPIO_Init+0x104>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_BRAKE_Pin|RL_BRAKE_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2103      	movs	r1, #3
 8002356:	481f      	ldr	r0, [pc, #124]	; (80023d4 <MX_GPIO_Init+0x108>)
 8002358:	f001 fe6a 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FL_BRAKE_Pin|LD2_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	2130      	movs	r1, #48	; 0x30
 8002360:	481d      	ldr	r0, [pc, #116]	; (80023d8 <MX_GPIO_Init+0x10c>)
 8002362:	f001 fe65 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FR_BRAKE_Pin|FL_DIR_Pin|RR_DIR_Pin|RL_DIR_Pin
 8002366:	2200      	movs	r2, #0
 8002368:	f24e 0103 	movw	r1, #57347	; 0xe003
 800236c:	481b      	ldr	r0, [pc, #108]	; (80023dc <MX_GPIO_Init+0x110>)
 800236e:	f001 fe5f 	bl	8004030 <HAL_GPIO_WritePin>
                          |FR_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RR_BRAKE_Pin|RL_BRAKE_Pin;
 8002372:	2303      	movs	r3, #3
 8002374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4812      	ldr	r0, [pc, #72]	; (80023d4 <MX_GPIO_Init+0x108>)
 800238a:	f001 fcbd 	bl	8003d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FL_BRAKE_Pin|LD2_Pin;
 800238e:	2330      	movs	r3, #48	; 0x30
 8002390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <MX_GPIO_Init+0x10c>)
 80023a6:	f001 fcaf 	bl	8003d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = FR_BRAKE_Pin|FL_DIR_Pin|RR_DIR_Pin|RL_DIR_Pin
 80023aa:	f24e 0303 	movw	r3, #57347	; 0xe003
 80023ae:	617b      	str	r3, [r7, #20]
                          |FR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <MX_GPIO_Init+0x110>)
 80023c4:	f001 fca0 	bl	8003d08 <HAL_GPIO_Init>

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400

080023e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b094      	sub	sp, #80	; 0x50
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e6:	f000 ff9b 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ea:	f000 f81d 	bl	8002428 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ee:	f7ff ff6d 	bl	80022cc <MX_GPIO_Init>
  MX_DMA_Init();
 80023f2:	f7ff ff05 	bl	8002200 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80023f6:	f000 fee5 	bl	80031c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80023fa:	f000 fa21 	bl	8002840 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023fe:	f000 fac5 	bl	800298c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002402:	f000 fb5b 	bl	8002abc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	  Bootley bootley;
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fe69 	bl	80010e0 <_ZN7BootleyC1Ev>
	  bootley.InitModule();
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f945 	bl	80016a0 <_ZN7Bootley10InitModuleEv>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  check_IC();
	  bootley.SetCarState();
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fe6c 	bl	80010f6 <_ZN7Bootley11SetCarStateEv>
	  bootley.Drive();
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fe7f 	bl	8001124 <_ZN7Bootley5DriveEv>
	  bootley.SetCarState();
 8002426:	e7f6      	b.n	8002416 <main+0x36>

08002428 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2234      	movs	r2, #52	; 0x34
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fc70 	bl	8006d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <_Z18SystemClock_Configv+0xe8>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <_Z18SystemClock_Configv+0xe8>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <_Z18SystemClock_Configv+0xe8>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002468:	2300      	movs	r3, #0
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <_Z18SystemClock_Configv+0xec>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <_Z18SystemClock_Configv+0xec>)
 8002476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <_Z18SystemClock_Configv+0xec>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248c:	2301      	movs	r3, #1
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002490:	2310      	movs	r3, #16
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002494:	2302      	movs	r3, #2
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002498:	2300      	movs	r3, #0
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800249c:	2310      	movs	r3, #16
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024a6:	2304      	movs	r3, #4
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024ae:	2302      	movs	r3, #2
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 f91e 	bl	80046f8 <HAL_RCC_OscConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80024cc:	f000 f824 	bl	8002518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d0:	230f      	movs	r3, #15
 80024d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d4:	2302      	movs	r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fdb9 	bl	8004064 <HAL_RCC_ClockConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8002502:	f000 f809 	bl	8002518 <Error_Handler>
  }
}
 8002506:	bf00      	nop
 8002508:	3750      	adds	r7, #80	; 0x50
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002520:	e7fe      	b.n	8002520 <Error_Handler+0x8>
	...

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_MspInit+0x4c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_MspInit+0x4c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <HAL_MspInit+0x4c>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002562:	2007      	movs	r0, #7
 8002564:	f001 f81e 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <NMI_Handler+0x4>

0800257a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler+0x4>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <UsageFault_Handler+0x4>

08002592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c0:	f000 ff00 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream2_IRQHandler+0x10>)
 80025ce:	f001 f931 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200005a4 	.word	0x200005a4

080025dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA1_Stream4_IRQHandler+0x10>)
 80025e2:	f001 f927 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000484 	.word	0x20000484

080025f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA1_Stream5_IRQHandler+0x10>)
 80025f6:	f001 f91d 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200004e4 	.word	0x200004e4

08002604 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM1_CC_IRQHandler+0x10>)
 800260a:	f002 fe87 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000022c 	.word	0x2000022c

08002618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM3_IRQHandler+0x10>)
 800261e:	f002 fe7d 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200002bc 	.word	0x200002bc

0800262c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <DMA1_Stream7_IRQHandler+0x10>)
 8002632:	f001 f8ff 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000544 	.word	0x20000544

08002640 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <DMA2_Stream1_IRQHandler+0x10>)
 8002646:	f001 f8f5 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000304 	.word	0x20000304

08002654 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <DMA2_Stream2_IRQHandler+0x10>)
 800265a:	f001 f8eb 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000364 	.word	0x20000364

08002668 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <DMA2_Stream4_IRQHandler+0x10>)
 800266e:	f001 f8e1 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000424 	.word	0x20000424

0800267c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <DMA2_Stream6_IRQHandler+0x10>)
 8002682:	f001 f8d7 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003c4 	.word	0x200003c4

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f004 fb0d 	bl	8006cc8 <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d2:	e7fe      	b.n	80026d2 <_exit+0x12>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
  }

  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fdbd 	bl	80032a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
  }
  return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	605a      	str	r2, [r3, #4]
  return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f004 fa72 	bl	8006cc8 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20020000 	.word	0x20020000
 8002810:	00000400 	.word	0x00000400
 8002814:	20000228 	.word	0x20000228
 8002818:	20000660 	.word	0x20000660

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002846:	f107 0318 	add.w	r3, r7, #24
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800285e:	463b      	mov	r3, r7
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <MX_TIM1_Init+0x144>)
 800286c:	4a46      	ldr	r2, [pc, #280]	; (8002988 <MX_TIM1_Init+0x148>)
 800286e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002870:	4b44      	ldr	r3, [pc, #272]	; (8002984 <MX_TIM1_Init+0x144>)
 8002872:	2253      	movs	r2, #83	; 0x53
 8002874:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <MX_TIM1_Init+0x144>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <MX_TIM1_Init+0x144>)
 800287e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002882:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <MX_TIM1_Init+0x144>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <MX_TIM1_Init+0x144>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <MX_TIM1_Init+0x144>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002896:	483b      	ldr	r0, [pc, #236]	; (8002984 <MX_TIM1_Init+0x144>)
 8002898:	f002 f9cc 	bl	8004c34 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80028a2:	f7ff fe39 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4834      	ldr	r0, [pc, #208]	; (8002984 <MX_TIM1_Init+0x144>)
 80028b4:	f002 ff98 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80028be:	f7ff fe2b 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80028c2:	4830      	ldr	r0, [pc, #192]	; (8002984 <MX_TIM1_Init+0x144>)
 80028c4:	f002 fb26 	bl	8004f14 <HAL_TIM_IC_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80028ce:	f7ff fe23 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4619      	mov	r1, r3
 80028e0:	4828      	ldr	r0, [pc, #160]	; (8002984 <MX_TIM1_Init+0x144>)
 80028e2:	f003 fd9f 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80028ec:	f7ff fe14 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028f4:	2301      	movs	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80028fc:	230f      	movs	r3, #15
 80028fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002900:	463b      	mov	r3, r7
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	481f      	ldr	r0, [pc, #124]	; (8002984 <MX_TIM1_Init+0x144>)
 8002908:	f002 fe10 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002912:	f7ff fe01 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002916:	2302      	movs	r3, #2
 8002918:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800291a:	2302      	movs	r3, #2
 800291c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002922:	463b      	mov	r3, r7
 8002924:	2204      	movs	r2, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4816      	ldr	r0, [pc, #88]	; (8002984 <MX_TIM1_Init+0x144>)
 800292a:	f002 fdff 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002934:	f7ff fdf0 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800293c:	2301      	movs	r3, #1
 800293e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 15;
 8002940:	230f      	movs	r3, #15
 8002942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002944:	463b      	mov	r3, r7
 8002946:	2208      	movs	r2, #8
 8002948:	4619      	mov	r1, r3
 800294a:	480e      	ldr	r0, [pc, #56]	; (8002984 <MX_TIM1_Init+0x144>)
 800294c:	f002 fdee 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8002956:	f7ff fddf 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800295a:	2302      	movs	r3, #2
 800295c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800295e:	2302      	movs	r3, #2
 8002960:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002966:	463b      	mov	r3, r7
 8002968:	220c      	movs	r2, #12
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_TIM1_Init+0x144>)
 800296e:	f002 fddd 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002978:	f7ff fdce 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000022c 	.word	0x2000022c
 8002988:	40010000 	.word	0x40010000

0800298c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	; 0x38
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a0:	f107 0320 	add.w	r3, r7, #32
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029bc:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80029c4:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029c6:	2204      	movs	r2, #4
 80029c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 820;
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029d2:	f44f 724d 	mov.w	r2, #820	; 0x334
 80029d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e4:	4834      	ldr	r0, [pc, #208]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 80029e6:	f002 f925 	bl	8004c34 <HAL_TIM_Base_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029f0:	f7ff fd92 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fe:	4619      	mov	r1, r3
 8002a00:	482d      	ldr	r0, [pc, #180]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a02:	f002 fef1 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a0c:	f7ff fd84 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a10:	4829      	ldr	r0, [pc, #164]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a12:	f002 f95e 	bl	8004cd2 <HAL_TIM_PWM_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a1c:	f7ff fd7c 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a28:	f107 0320 	add.w	r3, r7, #32
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4822      	ldr	r0, [pc, #136]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a30:	f003 fcf8 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a3a:	f7ff fd6d 	bl	8002518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a3e:	2360      	movs	r3, #96	; 0x60
 8002a40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 8002a42:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002a46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4818      	ldr	r0, [pc, #96]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a58:	f002 fe04 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a62:	f7ff fd59 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4812      	ldr	r0, [pc, #72]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a6e:	f002 fdf9 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002a78:	f7ff fd4e 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4619      	mov	r1, r3
 8002a82:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a84:	f002 fdee 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002a8e:	f7ff fd43 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	220c      	movs	r2, #12
 8002a96:	4619      	mov	r1, r3
 8002a98:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002a9a:	f002 fde3 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002aa4:	f7ff fd38 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <MX_TIM2_Init+0x12c>)
 8002aaa:	f000 fb33 	bl	8003114 <HAL_TIM_MspPostInit>

}
 8002aae:	bf00      	nop
 8002ab0:	3738      	adds	r7, #56	; 0x38
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000274 	.word	0x20000274

08002abc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0318 	add.w	r3, r7, #24
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ada:	463b      	mov	r3, r7
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <MX_TIM3_Init+0x144>)
 8002aea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002aee:	2253      	movs	r2, #83	; 0x53
 8002af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b0c:	483b      	ldr	r0, [pc, #236]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b0e:	f002 f891 	bl	8004c34 <HAL_TIM_Base_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002b18:	f7ff fcfe 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b22:	f107 0318 	add.w	r3, r7, #24
 8002b26:	4619      	mov	r1, r3
 8002b28:	4834      	ldr	r0, [pc, #208]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b2a:	f002 fe5d 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b34:	f7ff fcf0 	bl	8002518 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b38:	4830      	ldr	r0, [pc, #192]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b3a:	f002 f9eb 	bl	8004f14 <HAL_TIM_IC_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b44:	f7ff fce8 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	4829      	ldr	r0, [pc, #164]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b58:	f003 fc64 	bl	8006424 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002b62:	f7ff fcd9 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b66:	2300      	movs	r3, #0
 8002b68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002b72:	230f      	movs	r3, #15
 8002b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b76:	463b      	mov	r3, r7
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481f      	ldr	r0, [pc, #124]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002b7e:	f002 fcd5 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002b88:	f7ff fcc6 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002b90:	2302      	movs	r3, #2
 8002b92:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4817      	ldr	r0, [pc, #92]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002ba0:	f002 fcc4 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8002baa:	f7ff fcb5 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 15;
 8002bb6:	230f      	movs	r3, #15
 8002bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480e      	ldr	r0, [pc, #56]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002bc2:	f002 fcb3 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8002bcc:	f7ff fca4 	bl	8002518 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002bdc:	463b      	mov	r3, r7
 8002bde:	220c      	movs	r2, #12
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <MX_TIM3_Init+0x140>)
 8002be4:	f002 fca2 	bl	800552c <HAL_TIM_IC_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 8002bee:	f7ff fc93 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200002bc 	.word	0x200002bc
 8002c00:	40000400 	.word	0x40000400

08002c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8e      	ldr	r2, [pc, #568]	; (8002e5c <HAL_TIM_Base_MspInit+0x258>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	f040 8106 	bne.w	8002e34 <HAL_TIM_Base_MspInit+0x230>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	4a8b      	ldr	r2, [pc, #556]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6453      	str	r3, [r2, #68]	; 0x44
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a84      	ldr	r2, [pc, #528]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002c60:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4879      	ldr	r0, [pc, #484]	; (8002e64 <HAL_TIM_Base_MspInit+0x260>)
 8002c7e:	f001 f843 	bl	8003d08 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002c82:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002c84:	4a79      	ldr	r2, [pc, #484]	; (8002e6c <HAL_TIM_Base_MspInit+0x268>)
 8002c86:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002c88:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002c8a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002c8e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c9c:	4b72      	ldr	r3, [pc, #456]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca4:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002caa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cac:	4b6e      	ldr	r3, [pc, #440]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cba:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc2:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002cc8:	4867      	ldr	r0, [pc, #412]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cca:	f000 fcad 	bl	8003628 <HAL_DMA_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_TIM_Base_MspInit+0xd4>
    {
      Error_Handler();
 8002cd4:	f7ff fc20 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a63      	ldr	r2, [pc, #396]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cde:	4a62      	ldr	r2, [pc, #392]	; (8002e68 <HAL_TIM_Base_MspInit+0x264>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8002ce4:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002ce6:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_TIM_Base_MspInit+0x270>)
 8002ce8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002cec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002cf0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002cfe:	4b5c      	ldr	r3, [pc, #368]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d04:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d06:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d14:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002d2a:	4851      	ldr	r0, [pc, #324]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d2c:	f000 fc7c 	bl	8003628 <HAL_DMA_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_Base_MspInit+0x136>
    {
      Error_Handler();
 8002d36:	f7ff fbef 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_TIM_Base_MspInit+0x26c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d48:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <HAL_TIM_Base_MspInit+0x278>)
 8002d4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d4e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002d52:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d54:	4b48      	ldr	r3, [pc, #288]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d66:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d76:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8002d78:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002d8c:	483a      	ldr	r0, [pc, #232]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002d8e:	f000 fc4b 	bl	8003628 <HAL_DMA_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_MspInit+0x198>
    {
      Error_Handler();
 8002d98:	f7ff fbbe 	bl	8002518 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da2:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <HAL_TIM_Base_MspInit+0x274>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002daa:	4a36      	ldr	r2, [pc, #216]	; (8002e84 <HAL_TIM_Base_MspInit+0x280>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002db0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002db4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002dee:	4824      	ldr	r0, [pc, #144]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002df0:	f000 fc1a 	bl	8003628 <HAL_DMA_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_TIM_Base_MspInit+0x1fa>
    {
      Error_Handler();
 8002dfa:	f7ff fb8d 	bl	8002518 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
 8002e04:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_TIM_Base_MspInit+0x27c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	201b      	movs	r0, #27
 8002e28:	f000 fbc7 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e2c:	201b      	movs	r0, #27
 8002e2e:	f000 fbe0 	bl	80035f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e32:	e152      	b.n	80030da <HAL_TIM_Base_MspInit+0x4d6>
  else if(tim_baseHandle->Instance==TIM2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d124      	bne.n	8002e88 <HAL_TIM_Base_MspInit+0x284>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <HAL_TIM_Base_MspInit+0x25c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	e13e      	b.n	80030da <HAL_TIM_Base_MspInit+0x4d6>
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	20000304 	.word	0x20000304
 8002e6c:	40026428 	.word	0x40026428
 8002e70:	20000364 	.word	0x20000364
 8002e74:	40026440 	.word	0x40026440
 8002e78:	200003c4 	.word	0x200003c4
 8002e7c:	400264a0 	.word	0x400264a0
 8002e80:	20000424 	.word	0x20000424
 8002e84:	40026470 	.word	0x40026470
  else if(tim_baseHandle->Instance==TIM3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a95      	ldr	r2, [pc, #596]	; (80030e4 <HAL_TIM_Base_MspInit+0x4e0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 8123 	bne.w	80030da <HAL_TIM_Base_MspInit+0x4d6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a92      	ldr	r2, [pc, #584]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea4:	4b90      	ldr	r3, [pc, #576]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a8b      	ldr	r2, [pc, #556]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a84      	ldr	r2, [pc, #528]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_TIM_Base_MspInit+0x4e4>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002efa:	2302      	movs	r3, #2
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4879      	ldr	r0, [pc, #484]	; (80030ec <HAL_TIM_Base_MspInit+0x4e8>)
 8002f06:	f000 feff 	bl	8003d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4872      	ldr	r0, [pc, #456]	; (80030f0 <HAL_TIM_Base_MspInit+0x4ec>)
 8002f26:	f000 feef 	bl	8003d08 <HAL_GPIO_Init>
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002f2a:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f2c:	4a72      	ldr	r2, [pc, #456]	; (80030f8 <HAL_TIM_Base_MspInit+0x4f4>)
 8002f2e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002f30:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f32:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f38:	4b6e      	ldr	r3, [pc, #440]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b6b      	ldr	r3, [pc, #428]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f52:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f54:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002f5c:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f62:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002f64:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6a:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002f70:	4860      	ldr	r0, [pc, #384]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f72:	f000 fb59 	bl	8003628 <HAL_DMA_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_MspInit+0x37c>
      Error_Handler();
 8002f7c:	f7ff facc 	bl	8002518 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a5c      	ldr	r2, [pc, #368]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
 8002f86:	4a5b      	ldr	r2, [pc, #364]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a59      	ldr	r2, [pc, #356]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_TIM_Base_MspInit+0x4f0>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002f9a:	4a59      	ldr	r2, [pc, #356]	; (8003100 <HAL_TIM_Base_MspInit+0x4fc>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8002f9e:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fa0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002fa4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa6:	4b55      	ldr	r3, [pc, #340]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002fb2:	4b52      	ldr	r3, [pc, #328]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fba:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fc2:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd8:	4b48      	ldr	r3, [pc, #288]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002fde:	4847      	ldr	r0, [pc, #284]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002fe0:	f000 fb22 	bl	8003628 <HAL_DMA_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_Base_MspInit+0x3ea>
      Error_Handler();
 8002fea:	f7ff fa95 	bl	8002518 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff4:	4a41      	ldr	r2, [pc, #260]	; (80030fc <HAL_TIM_Base_MspInit+0x4f8>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_TIM_Base_MspInit+0x504>)
 8002ffe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003002:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003006:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003008:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 800301e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003022:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003024:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 800302e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003032:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003036:	2200      	movs	r2, #0
 8003038:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 800303c:	2200      	movs	r2, #0
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003040:	4830      	ldr	r0, [pc, #192]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003042:	f000 faf1 	bl	8003628 <HAL_DMA_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_TIM_Base_MspInit+0x44c>
      Error_Handler();
 800304c:	f7ff fa64 	bl	8002518 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
 8003056:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_TIM_Base_MspInit+0x500>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 800305e:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <HAL_TIM_Base_MspInit+0x50c>)
 8003060:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003064:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003068:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800307c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800307e:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003084:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800308c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003094:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80030a2:	481a      	ldr	r0, [pc, #104]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 80030a4:	f000 fac0 	bl	8003628 <HAL_DMA_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_Base_MspInit+0x4ae>
      Error_Handler();
 80030ae:	f7ff fa33 	bl	8002518 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 80030c2:	621a      	str	r2, [r3, #32]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_TIM_Base_MspInit+0x508>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	201d      	movs	r0, #29
 80030d0:	f000 fa73 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030d4:	201d      	movs	r0, #29
 80030d6:	f000 fa8c 	bl	80035f2 <HAL_NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3738      	adds	r7, #56	; 0x38
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020400 	.word	0x40020400
 80030f4:	20000484 	.word	0x20000484
 80030f8:	40026070 	.word	0x40026070
 80030fc:	200004e4 	.word	0x200004e4
 8003100:	40026088 	.word	0x40026088
 8003104:	20000544 	.word	0x20000544
 8003108:	400260b8 	.word	0x400260b8
 800310c:	200005a4 	.word	0x200005a4
 8003110:	40026040 	.word	0x40026040

08003114 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d13c      	bne.n	80031b0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_TIM_MspPostInit+0xa4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FL_SPEED_Pin|FR_SPEED_Pin;
 800316e:	2303      	movs	r3, #3
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800317e:	2301      	movs	r3, #1
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	480c      	ldr	r0, [pc, #48]	; (80031bc <HAL_TIM_MspPostInit+0xa8>)
 800318a:	f000 fdbd 	bl	8003d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_SPEED_Pin|RL_SPEED_Pin;
 800318e:	f240 4304 	movw	r3, #1028	; 0x404
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4805      	ldr	r0, [pc, #20]	; (80031c0 <HAL_TIM_MspPostInit+0xac>)
 80031ac:	f000 fdac 	bl	8003d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40020400 	.word	0x40020400

080031c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_USART2_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_USART2_UART_Init+0x4c>)
 80031fc:	f003 f9a2 	bl	8006544 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f7ff f987 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000604 	.word	0x20000604
 8003214:	40004400 	.word	0x40004400

08003218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_UART_MspInit+0x84>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d12b      	bne.n	8003292 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_UART_MspInit+0x88>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <HAL_UART_MspInit+0x88>)
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_UART_MspInit+0x88>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_UART_MspInit+0x88>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_UART_MspInit+0x88>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_UART_MspInit+0x88>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003272:	230c      	movs	r3, #12
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003282:	2307      	movs	r3, #7
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	4805      	ldr	r0, [pc, #20]	; (80032a4 <HAL_UART_MspInit+0x8c>)
 800328e:	f000 fd3b 	bl	8003d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40004400 	.word	0x40004400
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020000 	.word	0x40020000

080032a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80032b0:	1d39      	adds	r1, r7, #4
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b6:	2201      	movs	r2, #1
 80032b8:	4803      	ldr	r0, [pc, #12]	; (80032c8 <__io_putchar+0x20>)
 80032ba:	f003 f990 	bl	80065de <HAL_UART_Transmit>
  return ch;
 80032be:	687b      	ldr	r3, [r7, #4]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000604 	.word	0x20000604

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032f6:	f7ff fa91 	bl	800281c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fa:	f003 fceb 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7ff f86f 	bl	80023e0 <main>
  bx  lr    
 8003302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003310:	08009bec 	.word	0x08009bec
  ldr r2, =_sbss
 8003314:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003318:	2000065c 	.word	0x2000065c

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 f92b 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	2000      	movs	r0, #0
 8003350:	f000 f808 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff f8e6 	bl	8002524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x54>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x58>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f943 	bl	800360e <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033a0:	f000 f90b 	bl	80035ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_InitTick+0x5c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000008 	.word	0x20000008
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000008 	.word	0x20000008
 80033e8:	20000648 	.word	0x20000648

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000648 	.word	0x20000648

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800342c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <__NVIC_EnableIRQ+0x38>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff29 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035cc:	f7ff ff3e 	bl	800344c <__NVIC_GetPriorityGrouping>
 80035d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff8e 	bl	80034f8 <NVIC_EncodePriority>
 80035dc:	4602      	mov	r2, r0
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <__NVIC_SetPriority>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff31 	bl	8003468 <__NVIC_EnableIRQ>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ffa2 	bl	8003560 <SysTick_Config>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff feda 	bl	80033ec <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e099      	b.n	8003778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003664:	e00f      	b.n	8003686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003666:	f7ff fec1 	bl	80033ec <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b05      	cmp	r3, #5
 8003672:	d908      	bls.n	8003686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e078      	b.n	8003778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e8      	bne.n	8003666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_DMA_Init+0x158>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d107      	bne.n	80036f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4313      	orrs	r3, r2
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b04      	cmp	r3, #4
 8003718:	d117      	bne.n	800374a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa6f 	bl	8003c10 <DMA_CheckFifoParam>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003746:	2301      	movs	r3, #1
 8003748:	e016      	b.n	8003778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa26 	bl	8003ba4 <DMA_CalcBaseAndBitshift>
 8003758:	4603      	mov	r3, r0
 800375a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	f010803f 	.word	0xf010803f

08003784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Start_IT+0x26>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e040      	b.n	800382c <HAL_DMA_Start_IT+0xa8>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d12f      	bne.n	800381e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f9b8 	bl	8003b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	223f      	movs	r2, #63	; 0x3f
 80037de:	409a      	lsls	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0216 	orr.w	r2, r2, #22
 80037f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003840:	4b8e      	ldr	r3, [pc, #568]	; (8003a7c <HAL_DMA_IRQHandler+0x248>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a8e      	ldr	r2, [pc, #568]	; (8003a80 <HAL_DMA_IRQHandler+0x24c>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0a9b      	lsrs	r3, r3, #10
 800384c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	2208      	movs	r2, #8
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	2208      	movs	r2, #8
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2201      	movs	r2, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	2204      	movs	r2, #4
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	2204      	movs	r2, #4
 80038fa:	409a      	lsls	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	2210      	movs	r2, #16
 8003912:	409a      	lsls	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d043      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03c      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	2210      	movs	r2, #16
 8003930:	409a      	lsls	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d018      	beq.n	8003976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d024      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
 8003962:	e01f      	b.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01b      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
 8003974:	e016      	b.n	80039a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0208 	bic.w	r2, r2, #8
 8003992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	2220      	movs	r2, #32
 80039aa:	409a      	lsls	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 808f 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8087 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2220      	movs	r2, #32
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d136      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0216 	bic.w	r2, r2, #22
 80039ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x1da>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	223f      	movs	r2, #63	; 0x3f
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d07e      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
        }
        return;
 8003a4a:	e079      	b.n	8003b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01d      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d031      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e02c      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e01e      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0210 	bic.w	r2, r2, #16
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d032      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2205      	movs	r2, #5
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d307      	bcc.n	8003b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f2      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x2cc>
 8003b1a:	e000      	b.n	8003b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e000      	b.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b40:	bf00      	nop
    }
  }
}
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d108      	bne.n	8003b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b86:	e007      	b.n	8003b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	3b10      	subs	r3, #16
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <DMA_CalcBaseAndBitshift+0x64>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bbe:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <DMA_CalcBaseAndBitshift+0x68>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d909      	bls.n	8003be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	659a      	str	r2, [r3, #88]	; 0x58
 8003be4:	e007      	b.n	8003bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	aaaaaaab 	.word	0xaaaaaaab
 8003c0c:	080097f8 	.word	0x080097f8

08003c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11f      	bne.n	8003c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d856      	bhi.n	8003cde <DMA_CheckFifoParam+0xce>
 8003c30:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <DMA_CheckFifoParam+0x28>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c5b 	.word	0x08003c5b
 8003c40:	08003c49 	.word	0x08003c49
 8003c44:	08003cdf 	.word	0x08003cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d046      	beq.n	8003ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e043      	b.n	8003ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c62:	d140      	bne.n	8003ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c68:	e03d      	b.n	8003ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c72:	d121      	bne.n	8003cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d837      	bhi.n	8003cea <DMA_CheckFifoParam+0xda>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <DMA_CheckFifoParam+0x70>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003c97 	.word	0x08003c97
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003ca9 	.word	0x08003ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      break;
 8003c94:	e030      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d025      	beq.n	8003cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca6:	e022      	b.n	8003cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cb0:	d11f      	bne.n	8003cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cb6:	e01c      	b.n	8003cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d903      	bls.n	8003cc6 <DMA_CheckFifoParam+0xb6>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d003      	beq.n	8003ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cc4:	e018      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cca:	e015      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e00b      	b.n	8003cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e00a      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e008      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e006      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e004      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e165      	b.n	8003ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	f040 8154 	bne.w	8003fea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d005      	beq.n	8003d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d130      	bne.n	8003dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d90:	2201      	movs	r2, #1
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0201 	and.w	r2, r3, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d017      	beq.n	8003df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d123      	bne.n	8003e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80ae 	beq.w	8003fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b5d      	ldr	r3, [pc, #372]	; (8004008 <HAL_GPIO_Init+0x300>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_GPIO_Init+0x300>)
 8003e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9e:	4b5a      	ldr	r3, [pc, #360]	; (8004008 <HAL_GPIO_Init+0x300>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eaa:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_GPIO_Init+0x304>)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a4f      	ldr	r2, [pc, #316]	; (8004010 <HAL_GPIO_Init+0x308>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d025      	beq.n	8003f22 <HAL_GPIO_Init+0x21a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <HAL_GPIO_Init+0x30c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <HAL_GPIO_Init+0x216>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4d      	ldr	r2, [pc, #308]	; (8004018 <HAL_GPIO_Init+0x310>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d019      	beq.n	8003f1a <HAL_GPIO_Init+0x212>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4c      	ldr	r2, [pc, #304]	; (800401c <HAL_GPIO_Init+0x314>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_GPIO_Init+0x20e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <HAL_GPIO_Init+0x318>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00d      	beq.n	8003f12 <HAL_GPIO_Init+0x20a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <HAL_GPIO_Init+0x31c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x206>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a49      	ldr	r2, [pc, #292]	; (8004028 <HAL_GPIO_Init+0x320>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_GPIO_Init+0x202>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00c      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_Init+0x21c>
 8003f22:	2300      	movs	r3, #0
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	f002 0203 	and.w	r2, r2, #3
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <HAL_GPIO_Init+0x304>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_GPIO_Init+0x324>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f66:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_GPIO_Init+0x324>)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_GPIO_Init+0x324>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_GPIO_Init+0x324>)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f96:	4b25      	ldr	r3, [pc, #148]	; (800402c <HAL_GPIO_Init+0x324>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_GPIO_Init+0x324>)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_GPIO_Init+0x324>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe4:	4a11      	ldr	r2, [pc, #68]	; (800402c <HAL_GPIO_Init+0x324>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3301      	adds	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	f67f ae96 	bls.w	8003d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40013800 	.word	0x40013800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40021400 	.word	0x40021400
 8004028:	40021800 	.word	0x40021800
 800402c:	40013c00 	.word	0x40013c00

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7ff f94a 	bl	80033ec <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7ff f946 	bl	80033ec <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f855 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f8aa 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	080097e0 	.word	0x080097e0
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a9b      	lsrs	r3, r3, #10
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	080097f0 	.word	0x080097f0

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004274:	f7ff ffdc 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0b5b      	lsrs	r3, r3, #13
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	080097f0 	.word	0x080097f0

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b0ae      	sub	sp, #184	; 0xb8
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042be:	4bcb      	ldr	r3, [pc, #812]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	f200 8206 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x440>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	08004309 	.word	0x08004309
 80042d8:	080046d9 	.word	0x080046d9
 80042dc:	080046d9 	.word	0x080046d9
 80042e0:	080046d9 	.word	0x080046d9
 80042e4:	08004311 	.word	0x08004311
 80042e8:	080046d9 	.word	0x080046d9
 80042ec:	080046d9 	.word	0x080046d9
 80042f0:	080046d9 	.word	0x080046d9
 80042f4:	08004319 	.word	0x08004319
 80042f8:	080046d9 	.word	0x080046d9
 80042fc:	080046d9 	.word	0x080046d9
 8004300:	080046d9 	.word	0x080046d9
 8004304:	08004509 	.word	0x08004509
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4bb9      	ldr	r3, [pc, #740]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800430a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800430e:	e1e7      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004310:	4bb8      	ldr	r3, [pc, #736]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004316:	e1e3      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4bb4      	ldr	r3, [pc, #720]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004324:	4bb1      	ldr	r3, [pc, #708]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d071      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004330:	4bae      	ldr	r3, [pc, #696]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800433c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4621      	mov	r1, r4
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	6439      	str	r1, [r7, #64]	; 0x40
 8004374:	4629      	mov	r1, r5
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004388:	4649      	mov	r1, r9
 800438a:	018b      	lsls	r3, r1, #6
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004392:	4641      	mov	r1, r8
 8004394:	018a      	lsls	r2, r1, #6
 8004396:	4641      	mov	r1, r8
 8004398:	1a51      	subs	r1, r2, r1
 800439a:	63b9      	str	r1, [r7, #56]	; 0x38
 800439c:	4649      	mov	r1, r9
 800439e:	eb63 0301 	sbc.w	r3, r3, r1
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80043b0:	4649      	mov	r1, r9
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4641      	mov	r1, r8
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4641      	mov	r1, r8
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4622      	mov	r2, r4
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ca:	462b      	mov	r3, r5
 80043cc:	460a      	mov	r2, r1
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043e0:	4629      	mov	r1, r5
 80043e2:	024b      	lsls	r3, r1, #9
 80043e4:	4621      	mov	r1, r4
 80043e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ea:	4621      	mov	r1, r4
 80043ec:	024a      	lsls	r2, r1, #9
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004400:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004404:	f7fc fc40 	bl	8000c88 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004412:	e067      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004414:	4b75      	ldr	r3, [pc, #468]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004420:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	67bb      	str	r3, [r7, #120]	; 0x78
 800442e:	2300      	movs	r3, #0
 8004430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004432:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	62b9      	str	r1, [r7, #40]	; 0x28
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004468:	4649      	mov	r1, r9
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4641      	mov	r1, r8
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4641      	mov	r1, r8
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4641      	mov	r1, r8
 8004478:	ebb2 0a01 	subs.w	sl, r2, r1
 800447c:	4649      	mov	r1, r9
 800447e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004496:	4692      	mov	sl, r2
 8004498:	469b      	mov	fp, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb1a 0303 	adds.w	r3, sl, r3
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb4b 0303 	adc.w	r3, fp, r3
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044b6:	4629      	mov	r1, r5
 80044b8:	028b      	lsls	r3, r1, #10
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c0:	4621      	mov	r1, r4
 80044c2:	028a      	lsls	r2, r1, #10
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044cc:	2200      	movs	r2, #0
 80044ce:	673b      	str	r3, [r7, #112]	; 0x70
 80044d0:	677a      	str	r2, [r7, #116]	; 0x74
 80044d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80044d6:	f7fc fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4613      	mov	r3, r2
 80044e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80044f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004506:	e0eb      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4b38      	ldr	r3, [pc, #224]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d06b      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	2200      	movs	r2, #0
 8004528:	66bb      	str	r3, [r7, #104]	; 0x68
 800452a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800452c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	663b      	str	r3, [r7, #96]	; 0x60
 8004534:	2300      	movs	r3, #0
 8004536:	667b      	str	r3, [r7, #100]	; 0x64
 8004538:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800453c:	4622      	mov	r2, r4
 800453e:	462b      	mov	r3, r5
 8004540:	f04f 0000 	mov.w	r0, #0
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	0159      	lsls	r1, r3, #5
 800454a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454e:	0150      	lsls	r0, r2, #5
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4621      	mov	r1, r4
 8004556:	1a51      	subs	r1, r2, r1
 8004558:	61b9      	str	r1, [r7, #24]
 800455a:	4629      	mov	r1, r5
 800455c:	eb63 0301 	sbc.w	r3, r3, r1
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800456e:	4659      	mov	r1, fp
 8004570:	018b      	lsls	r3, r1, #6
 8004572:	4651      	mov	r1, sl
 8004574:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004578:	4651      	mov	r1, sl
 800457a:	018a      	lsls	r2, r1, #6
 800457c:	4651      	mov	r1, sl
 800457e:	ebb2 0801 	subs.w	r8, r2, r1
 8004582:	4659      	mov	r1, fp
 8004584:	eb63 0901 	sbc.w	r9, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004598:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459c:	4690      	mov	r8, r2
 800459e:	4699      	mov	r9, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	eb18 0303 	adds.w	r3, r8, r3
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	462b      	mov	r3, r5
 80045aa:	eb49 0303 	adc.w	r3, r9, r3
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045bc:	4629      	mov	r1, r5
 80045be:	024b      	lsls	r3, r1, #9
 80045c0:	4621      	mov	r1, r4
 80045c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c6:	4621      	mov	r1, r4
 80045c8:	024a      	lsls	r2, r1, #9
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d2:	2200      	movs	r2, #0
 80045d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80045d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045dc:	f7fc fb54 	bl	8000c88 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4613      	mov	r3, r2
 80045e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ea:	e065      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x420>
 80045ec:	40023800 	.word	0x40023800
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f8:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	2200      	movs	r2, #0
 8004600:	4618      	mov	r0, r3
 8004602:	4611      	mov	r1, r2
 8004604:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004608:	653b      	str	r3, [r7, #80]	; 0x50
 800460a:	2300      	movs	r3, #0
 800460c:	657b      	str	r3, [r7, #84]	; 0x54
 800460e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004612:	4642      	mov	r2, r8
 8004614:	464b      	mov	r3, r9
 8004616:	f04f 0000 	mov.w	r0, #0
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	0159      	lsls	r1, r3, #5
 8004620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004624:	0150      	lsls	r0, r2, #5
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4641      	mov	r1, r8
 800462c:	1a51      	subs	r1, r2, r1
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	4649      	mov	r1, r9
 8004632:	eb63 0301 	sbc.w	r3, r3, r1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004644:	4659      	mov	r1, fp
 8004646:	018b      	lsls	r3, r1, #6
 8004648:	4651      	mov	r1, sl
 800464a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464e:	4651      	mov	r1, sl
 8004650:	018a      	lsls	r2, r1, #6
 8004652:	4651      	mov	r1, sl
 8004654:	1a54      	subs	r4, r2, r1
 8004656:	4659      	mov	r1, fp
 8004658:	eb63 0501 	sbc.w	r5, r3, r1
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	00eb      	lsls	r3, r5, #3
 8004666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	4643      	mov	r3, r8
 8004672:	18e3      	adds	r3, r4, r3
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	464b      	mov	r3, r9
 8004678:	eb45 0303 	adc.w	r3, r5, r3
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468a:	4629      	mov	r1, r5
 800468c:	028b      	lsls	r3, r1, #10
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004694:	4621      	mov	r1, r4
 8004696:	028a      	lsls	r2, r1, #10
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046a0:	2200      	movs	r2, #0
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046aa:	f7fc faed 	bl	8000c88 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4613      	mov	r3, r2
 80046b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0f1b      	lsrs	r3, r3, #28
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80046c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046d6:	e003      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80046da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	37b8      	adds	r7, #184	; 0xb8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e28d      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8083 	beq.w	800481e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004718:	4b94      	ldr	r3, [pc, #592]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b04      	cmp	r3, #4
 8004722:	d019      	beq.n	8004758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004724:	4b91      	ldr	r3, [pc, #580]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800472c:	2b08      	cmp	r3, #8
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004730:	4b8e      	ldr	r3, [pc, #568]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800473c:	d00c      	beq.n	8004758 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b8b      	ldr	r3, [pc, #556]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d112      	bne.n	8004770 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474a:	4b88      	ldr	r3, [pc, #544]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004756:	d10b      	bne.n	8004770 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	4b84      	ldr	r3, [pc, #528]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05b      	beq.n	800481c <HAL_RCC_OscConfig+0x124>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d157      	bne.n	800481c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e25a      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x90>
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7b      	ldr	r2, [pc, #492]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xcc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0xb4>
 8004792:	4b76      	ldr	r3, [pc, #472]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a75      	ldr	r2, [pc, #468]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b73      	ldr	r3, [pc, #460]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a72      	ldr	r2, [pc, #456]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xcc>
 80047ac:	4b6f      	ldr	r3, [pc, #444]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6e      	ldr	r2, [pc, #440]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b6c      	ldr	r3, [pc, #432]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6b      	ldr	r2, [pc, #428]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe fe0e 	bl	80033ec <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe fe0a 	bl	80033ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e21f      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xdc>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fe fdfa 	bl	80033ec <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe fdf6 	bl	80033ec <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e20b      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	4b57      	ldr	r3, [pc, #348]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x104>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06f      	beq.n	800490a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800482a:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004836:	4b4d      	ldr	r3, [pc, #308]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d105      	bne.n	800484e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004842:	4b4a      	ldr	r3, [pc, #296]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d11c      	bne.n	8004894 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b44      	ldr	r3, [pc, #272]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	4b41      	ldr	r3, [pc, #260]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x186>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1d3      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4937      	ldr	r1, [pc, #220]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	e03a      	b.n	800490a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800489c:	4b34      	ldr	r3, [pc, #208]	; (8004970 <HAL_RCC_OscConfig+0x278>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fe fda3 	bl	80033ec <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fe fd9f 	bl	80033ec <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1b4      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4925      	ldr	r1, [pc, #148]	; (800496c <HAL_RCC_OscConfig+0x274>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <HAL_RCC_OscConfig+0x278>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fe fd82 	bl	80033ec <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fe fd7e 	bl	80033ec <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e193      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d036      	beq.n	8004984 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_RCC_OscConfig+0x27c>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fe fd62 	bl	80033ec <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492c:	f7fe fd5e 	bl	80033ec <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e173      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_OscConfig+0x274>)
 8004940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x234>
 800494a:	e01b      	b.n	8004984 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_OscConfig+0x27c>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004952:	f7fe fd4b 	bl	80033ec <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	e00e      	b.n	8004978 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800495a:	f7fe fd47 	bl	80033ec <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d907      	bls.n	8004978 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e15c      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
 800496c:	40023800 	.word	0x40023800
 8004970:	42470000 	.word	0x42470000
 8004974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b8a      	ldr	r3, [pc, #552]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8097 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b83      	ldr	r3, [pc, #524]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b7f      	ldr	r3, [pc, #508]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4a7e      	ldr	r2, [pc, #504]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	; 0x40
 80049b2:	4b7c      	ldr	r3, [pc, #496]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <HAL_RCC_OscConfig+0x4b0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x4b0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a75      	ldr	r2, [pc, #468]	; (8004ba8 <HAL_RCC_OscConfig+0x4b0>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fe fd07 	bl	80033ec <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fe fd03 	bl	80033ec <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e118      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCC_OscConfig+0x4b0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x31e>
 8004a08:	4b66      	ldr	r3, [pc, #408]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a65      	ldr	r2, [pc, #404]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	e01c      	b.n	8004a50 <HAL_RCC_OscConfig+0x358>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x340>
 8004a1e:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4a60      	ldr	r2, [pc, #384]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6713      	str	r3, [r2, #112]	; 0x70
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x358>
 8004a38:	4b5a      	ldr	r3, [pc, #360]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	4a59      	ldr	r2, [pc, #356]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	; 0x70
 8004a44:	4b57      	ldr	r3, [pc, #348]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4a56      	ldr	r2, [pc, #344]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fe fcc8 	bl	80033ec <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fe fcc4 	bl	80033ec <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0d7      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCC_OscConfig+0x368>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fe fcb2 	bl	80033ec <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fe fcae 	bl	80033ec <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0c1      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa2:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ee      	bne.n	8004a8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4a3a      	ldr	r2, [pc, #232]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80ad 	beq.w	8004c24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d060      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d145      	bne.n	8004b6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x4b4>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fc82 	bl	80033ec <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fe fc7e 	bl	80033ec <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e093      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x4b4>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fe fc53 	bl	80033ec <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fe fc4f 	bl	80033ec <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e064      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x452>
 8004b68:	e05c      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCC_OscConfig+0x4b4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fe fc3c 	bl	80033ec <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fe fc38 	bl	80033ec <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e04d      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCC_OscConfig+0x4ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x480>
 8004b96:	e045      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e040      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCC_OscConfig+0x538>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d030      	beq.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d129      	bne.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d122      	bne.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d119      	bne.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d10f      	bne.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800

08004c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd ffd2 	bl	8002c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 ff9c 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e041      	b.n	8004d68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f839 	bl	8004d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 ff4d 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start+0x24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e022      	b.n	8004dee <HAL_TIM_PWM_Start+0x6a>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x3e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e015      	b.n	8004dee <HAL_TIM_PWM_Start+0x6a>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e008      	b.n	8004dee <HAL_TIM_PWM_Start+0x6a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e07c      	b.n	8004ef0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x82>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e04:	e013      	b.n	8004e2e <HAL_TIM_PWM_Start+0xaa>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0x92>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	e00b      	b.n	8004e2e <HAL_TIM_PWM_Start+0xaa>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0xa2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e24:	e003      	b.n	8004e2e <HAL_TIM_PWM_Start+0xaa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 face 	bl	80063d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <HAL_TIM_PWM_Start+0x174>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_PWM_Start+0xcc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <HAL_TIM_PWM_Start+0x178>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_PWM_Start+0xd0>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_PWM_Start+0xd2>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a22      	ldr	r2, [pc, #136]	; (8004ef8 <HAL_TIM_PWM_Start+0x174>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d01d      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <HAL_TIM_PWM_Start+0x17c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <HAL_TIM_PWM_Start+0x180>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <HAL_TIM_PWM_Start+0x184>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <HAL_TIM_PWM_Start+0x178>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIM_PWM_Start+0x188>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_TIM_PWM_Start+0x136>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_TIM_PWM_Start+0x18c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d111      	bne.n	8004ede <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d010      	beq.n	8004eee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004edc:	e007      	b.n	8004eee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40001800 	.word	0x40001800

08004f14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e041      	b.n	8004faa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f839 	bl	8004fb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fe2c 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_IC_Start_DMA+0x22>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e013      	b.n	8005012 <HAL_TIM_IC_Start_DMA+0x4a>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_IC_Start_DMA+0x32>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e00b      	b.n	8005012 <HAL_TIM_IC_Start_DMA+0x4a>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_IC_Start_DMA+0x42>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e003      	b.n	8005012 <HAL_TIM_IC_Start_DMA+0x4a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <HAL_TIM_IC_Start_DMA+0x5c>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e013      	b.n	800504c <HAL_TIM_IC_Start_DMA+0x84>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d104      	bne.n	8005034 <HAL_TIM_IC_Start_DMA+0x6c>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e00b      	b.n	800504c <HAL_TIM_IC_Start_DMA+0x84>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d104      	bne.n	8005044 <HAL_TIM_IC_Start_DMA+0x7c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e003      	b.n	800504c <HAL_TIM_IC_Start_DMA+0x84>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800504a:	b2db      	uxtb	r3, r3
 800504c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800504e:	7dbb      	ldrb	r3, [r7, #22]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d002      	beq.n	800505a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005054:	7d7b      	ldrb	r3, [r7, #21]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d101      	bne.n	800505e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	e146      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800505e:	7dbb      	ldrb	r3, [r7, #22]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d143      	bne.n	80050ec <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005064:	7d7b      	ldrb	r3, [r7, #21]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d140      	bne.n	80050ec <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_DMA+0xb2>
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e138      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_DMA+0xc2>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005088:	e013      	b.n	80050b2 <HAL_TIM_IC_Start_DMA+0xea>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_DMA+0xd2>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_IC_Start_DMA+0xea>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d104      	bne.n	80050aa <HAL_TIM_IC_Start_DMA+0xe2>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_IC_Start_DMA+0xea>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_DMA+0xfa>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80050c0:	e016      	b.n	80050f0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_DMA+0x10a>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80050d0:	e00e      	b.n	80050f0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start_DMA+0x11a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80050e0:	e006      	b.n	80050f0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80050ea:	e001      	b.n	80050f0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0fd      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f96d 	bl	80063d8 <TIM_CCxChannelCmd>

  switch (Channel)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	f200 80ad 	bhi.w	8005260 <HAL_TIM_IC_Start_DMA+0x298>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <HAL_TIM_IC_Start_DMA+0x144>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005141 	.word	0x08005141
 8005110:	08005261 	.word	0x08005261
 8005114:	08005261 	.word	0x08005261
 8005118:	08005261 	.word	0x08005261
 800511c:	08005189 	.word	0x08005189
 8005120:	08005261 	.word	0x08005261
 8005124:	08005261 	.word	0x08005261
 8005128:	08005261 	.word	0x08005261
 800512c:	080051d1 	.word	0x080051d1
 8005130:	08005261 	.word	0x08005261
 8005134:	08005261 	.word	0x08005261
 8005138:	08005261 	.word	0x08005261
 800513c:	08005219 	.word	0x08005219
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	4a6b      	ldr	r2, [pc, #428]	; (80052f4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <HAL_TIM_IC_Start_DMA+0x330>)
 800514e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	4a69      	ldr	r2, [pc, #420]	; (80052fc <HAL_TIM_IC_Start_DMA+0x334>)
 8005156:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3334      	adds	r3, #52	; 0x34
 8005162:	4619      	mov	r1, r3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	f7fe fb0c 	bl	8003784 <HAL_DMA_Start_IT>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0ba      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005184:	60da      	str	r2, [r3, #12]
      break;
 8005186:	e06e      	b.n	8005266 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	4a59      	ldr	r2, [pc, #356]	; (80052f4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <HAL_TIM_IC_Start_DMA+0x330>)
 8005196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_TIM_IC_Start_DMA+0x334>)
 800519e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3338      	adds	r3, #56	; 0x38
 80051aa:	4619      	mov	r1, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	887b      	ldrh	r3, [r7, #2]
 80051b0:	f7fe fae8 	bl	8003784 <HAL_DMA_Start_IT>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e096      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051cc:	60da      	str	r2, [r3, #12]
      break;
 80051ce:	e04a      	b.n	8005266 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4a47      	ldr	r2, [pc, #284]	; (80052f4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80051d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a46      	ldr	r2, [pc, #280]	; (80052f8 <HAL_TIM_IC_Start_DMA+0x330>)
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a45      	ldr	r2, [pc, #276]	; (80052fc <HAL_TIM_IC_Start_DMA+0x334>)
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	333c      	adds	r3, #60	; 0x3c
 80051f2:	4619      	mov	r1, r3
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	f7fe fac4 	bl	8003784 <HAL_DMA_Start_IT>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e072      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005214:	60da      	str	r2, [r3, #12]
      break;
 8005216:	e026      	b.n	8005266 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	4a35      	ldr	r2, [pc, #212]	; (80052f4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800521e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <HAL_TIM_IC_Start_DMA+0x330>)
 8005226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_TIM_IC_Start_DMA+0x334>)
 800522e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3340      	adds	r3, #64	; 0x40
 800523a:	4619      	mov	r1, r3
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	f7fe faa0 	bl	8003784 <HAL_DMA_Start_IT>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04e      	b.n	80052ec <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800525c:	60da      	str	r2, [r3, #12]
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
      break;
 8005264:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a25      	ldr	r2, [pc, #148]	; (8005300 <HAL_TIM_IC_Start_DMA+0x338>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d01d      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_TIM_IC_Start_DMA+0x33c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1f      	ldr	r2, [pc, #124]	; (8005308 <HAL_TIM_IC_Start_DMA+0x340>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1e      	ldr	r2, [pc, #120]	; (800530c <HAL_TIM_IC_Start_DMA+0x344>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_TIM_IC_Start_DMA+0x348>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_TIM_IC_Start_DMA+0x34c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_IC_Start_DMA+0x2ee>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_TIM_IC_Start_DMA+0x350>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d010      	beq.n	80052ea <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	e007      	b.n	80052ea <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08005a81 	.word	0x08005a81
 80052f8:	08005b49 	.word	0x08005b49
 80052fc:	080059ef 	.word	0x080059ef
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40001800 	.word	0x40001800

0800531c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b02      	cmp	r3, #2
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0202 	mvn.w	r2, #2
 8005348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fe38 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb0f 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb20 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d122      	bne.n	80053cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0204 	mvn.w	r2, #4
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb fe0e 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fae5 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 faf6 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0208 	mvn.w	r2, #8
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2204      	movs	r2, #4
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb fde4 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fabb 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 facc 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b10      	cmp	r3, #16
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b10      	cmp	r3, #16
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0210 	mvn.w	r2, #16
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2208      	movs	r2, #8
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fb fdba 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa91 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 faa2 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0201 	mvn.w	r2, #1
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa6b 	bl	8005976 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b80      	cmp	r3, #128	; 0x80
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b8:	2b80      	cmp	r3, #128	; 0x80
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 f832 	bl	8006530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa67 	bl	80059c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b20      	cmp	r3, #32
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0220 	mvn.w	r2, #32
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fffc 	bl	800651c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e088      	b.n	800565c <HAL_TIM_IC_ConfigChannel+0x130>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f000 fd72 	bl	8006050 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 020c 	bic.w	r2, r2, #12
 800557a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6999      	ldr	r1, [r3, #24]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	619a      	str	r2, [r3, #24]
 800558e:	e060      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d11c      	bne.n	80055d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f000 fdf6 	bl	8006196 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6999      	ldr	r1, [r3, #24]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	619a      	str	r2, [r3, #24]
 80055ce:	e040      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6819      	ldr	r1, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f000 fe43 	bl	8006270 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 020c 	bic.w	r2, r2, #12
 80055f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
 800560c:	e021      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d11c      	bne.n	800564e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f000 fe60 	bl	80062e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005636:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69d9      	ldr	r1, [r3, #28]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
 800564c:	e001      	b.n	8005652 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e0ae      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b0c      	cmp	r3, #12
 800568e:	f200 809f 	bhi.w	80057d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080057d1 	.word	0x080057d1
 80056a0:	080057d1 	.word	0x080057d1
 80056a4:	080057d1 	.word	0x080057d1
 80056a8:	0800570d 	.word	0x0800570d
 80056ac:	080057d1 	.word	0x080057d1
 80056b0:	080057d1 	.word	0x080057d1
 80056b4:	080057d1 	.word	0x080057d1
 80056b8:	0800574f 	.word	0x0800574f
 80056bc:	080057d1 	.word	0x080057d1
 80056c0:	080057d1 	.word	0x080057d1
 80056c4:	080057d1 	.word	0x080057d1
 80056c8:	0800578f 	.word	0x0800578f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb0c 	bl	8005cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0208 	orr.w	r2, r2, #8
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0204 	bic.w	r2, r2, #4
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	619a      	str	r2, [r3, #24]
      break;
 800570a:	e064      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fb5c 	bl	8005dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	021a      	lsls	r2, r3, #8
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	619a      	str	r2, [r3, #24]
      break;
 800574c:	e043      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fbb1 	bl	8005ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0208 	orr.w	r2, r2, #8
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0204 	bic.w	r2, r2, #4
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
      break;
 800578c:	e023      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fc05 	bl	8005fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	61da      	str	r2, [r3, #28]
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_ConfigClockSource+0x1c>
 8005800:	2302      	movs	r3, #2
 8005802:	e0b4      	b.n	800596e <HAL_TIM_ConfigClockSource+0x186>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	d03e      	beq.n	80058bc <HAL_TIM_ConfigClockSource+0xd4>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	f200 8087 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584a:	f000 8086 	beq.w	800595a <HAL_TIM_ConfigClockSource+0x172>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d87f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d01a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0xa6>
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d87b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d050      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x11a>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d877      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d03c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005868:	2b50      	cmp	r3, #80	; 0x50
 800586a:	d873      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d058      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x13a>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d86f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d064      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15a>
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d86b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d060      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15a>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d867      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05c      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	2b10      	cmp	r3, #16
 800588a:	d05a      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x15a>
 800588c:	e062      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6899      	ldr	r1, [r3, #8]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f000 fd7b 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
      break;
 80058ba:	e04f      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f000 fd64 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058de:	609a      	str	r2, [r3, #8]
      break;
 80058e0:	e03c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fc22 	bl	8006138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2150      	movs	r1, #80	; 0x50
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd31 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005900:	e02c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fc7e 	bl	8006210 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2160      	movs	r1, #96	; 0x60
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fd21 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005920:	e01c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fc02 	bl	8006138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fd11 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005940:	e00c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f000 fd08 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005952:	e003      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      break;
 8005958:	e000      	b.n	800595c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800595a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d107      	bne.n	8005a16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a14:	e02a      	b.n	8005a6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d107      	bne.n	8005a30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2202      	movs	r2, #2
 8005a24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a2e:	e01d      	b.n	8005a6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d107      	bne.n	8005a4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a48:	e010      	b.n	8005a6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d107      	bne.n	8005a64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2208      	movs	r2, #8
 8005a58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a62:	e003      	b.n	8005a6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ffb4 	bl	80059da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d10f      	bne.n	8005ab8 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d146      	bne.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab6:	e03d      	b.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10f      	bne.n	8005ae2 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d131      	bne.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae0:	e028      	b.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d10f      	bne.n	8005b0c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2204      	movs	r2, #4
 8005af0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d11c      	bne.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0a:	e013      	b.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d10e      	bne.n	8005b34 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7fb fa4d 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d103      	bne.n	8005b68 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	771a      	strb	r2, [r3, #28]
 8005b66:	e019      	b.n	8005b9c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d103      	bne.n	8005b7a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2202      	movs	r2, #2
 8005b76:	771a      	strb	r2, [r3, #28]
 8005b78:	e010      	b.n	8005b9c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d103      	bne.n	8005b8c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2204      	movs	r2, #4
 8005b88:	771a      	strb	r2, [r3, #28]
 8005b8a:	e007      	b.n	8005b9c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d102      	bne.n	8005b9c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fefe 	bl	800599e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d00f      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3c      	ldr	r2, [pc, #240]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d02b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d027      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d023      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d017      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <TIM_Base_SetConfig+0x134>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <TIM_Base_SetConfig+0x138>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	; (8005cec <TIM_Base_SetConfig+0x13c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40010400 	.word	0x40010400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800
 8005ce4:	40001800 	.word	0x40001800
 8005ce8:	40001c00 	.word	0x40001c00
 8005cec:	40002000 	.word	0x40002000

08005cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f023 0201 	bic.w	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 0302 	bic.w	r3, r3, #2
 8005d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <TIM_OC1_SetConfig+0xd8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC1_SetConfig+0x64>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <TIM_OC1_SetConfig+0xdc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10c      	bne.n	8005d6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f023 0308 	bic.w	r3, r3, #8
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_OC1_SetConfig+0xd8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC1_SetConfig+0x8e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <TIM_OC1_SetConfig+0xdc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d111      	bne.n	8005da2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0210 	bic.w	r2, r3, #16
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a22      	ldr	r2, [pc, #136]	; (8005eb4 <TIM_OC2_SetConfig+0xe4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC2_SetConfig+0x68>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a21      	ldr	r2, [pc, #132]	; (8005eb8 <TIM_OC2_SetConfig+0xe8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10d      	bne.n	8005e54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a17      	ldr	r2, [pc, #92]	; (8005eb4 <TIM_OC2_SetConfig+0xe4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC2_SetConfig+0x94>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <TIM_OC2_SetConfig+0xe8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d113      	bne.n	8005e8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	40010400 	.word	0x40010400

08005ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <TIM_OC3_SetConfig+0xe0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC3_SetConfig+0x66>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a20      	ldr	r2, [pc, #128]	; (8005fa0 <TIM_OC3_SetConfig+0xe4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10d      	bne.n	8005f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC3_SetConfig+0xe0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_OC3_SetConfig+0x92>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC3_SetConfig+0xe4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d113      	bne.n	8005f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40010400 	.word	0x40010400

08005fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	031b      	lsls	r3, r3, #12
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a12      	ldr	r2, [pc, #72]	; (8006048 <TIM_OC4_SetConfig+0xa4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC4_SetConfig+0x68>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <TIM_OC4_SetConfig+0xa8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400

08006050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_TI1_SetConfig+0xcc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01b      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d017      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_TI1_SetConfig+0xd0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <TIM_TI1_SetConfig+0xd4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <TIM_TI1_SetConfig+0xd8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a22      	ldr	r2, [pc, #136]	; (800612c <TIM_TI1_SetConfig+0xdc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a21      	ldr	r2, [pc, #132]	; (8006130 <TIM_TI1_SetConfig+0xe0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a20      	ldr	r2, [pc, #128]	; (8006134 <TIM_TI1_SetConfig+0xe4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <TIM_TI1_SetConfig+0x6a>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <TIM_TI1_SetConfig+0x6c>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e003      	b.n	80060da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f003 030a 	and.w	r3, r3, #10
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40001800 	.word	0x40001800

08006138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0201 	bic.w	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 030a 	bic.w	r3, r3, #10
 8006174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f023 0210 	bic.w	r2, r3, #16
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	b29b      	uxth	r3, r3
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f023 0210 	bic.w	r2, r3, #16
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	031b      	lsls	r3, r3, #12
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006326:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	031b      	lsls	r3, r3, #12
 800632c:	b29b      	uxth	r3, r3
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	031b      	lsls	r3, r3, #12
 8006340:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2201      	movs	r2, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006438:	2302      	movs	r3, #2
 800643a:	e05a      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a21      	ldr	r2, [pc, #132]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006488:	d01d      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1a      	ldr	r2, [pc, #104]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40010400 	.word	0x40010400
 8006514:	40014000 	.word	0x40014000
 8006518:	40001800 	.word	0x40001800

0800651c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e03f      	b.n	80065d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fc fe54 	bl	8003218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f929 	bl	80067e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800659c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08a      	sub	sp, #40	; 0x28
 80065e2:	af02      	add	r7, sp, #8
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d17c      	bne.n	80066f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_UART_Transmit+0x2c>
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e075      	b.n	80066fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_UART_Transmit+0x3e>
 8006618:	2302      	movs	r3, #2
 800661a:	e06e      	b.n	80066fa <HAL_UART_Transmit+0x11c>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2221      	movs	r2, #33	; 0x21
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006632:	f7fc fedb 	bl	80033ec <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664c:	d108      	bne.n	8006660 <HAL_UART_Transmit+0x82>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e003      	b.n	8006668 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006670:	e02a      	b.n	80066c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f840 	bl	8006702 <UART_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e036      	b.n	80066fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3302      	adds	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	e007      	b.n	80066ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1cf      	bne.n	8006672 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2200      	movs	r2, #0
 80066da:	2140      	movs	r1, #64	; 0x40
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f810 	bl	8006702 <UART_WaitOnFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e006      	b.n	80066fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b090      	sub	sp, #64	; 0x40
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006712:	e050      	b.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671a:	d04c      	beq.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800671c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0x30>
 8006722:	f7fc fe63 	bl	80033ec <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672e:	429a      	cmp	r2, r3
 8006730:	d241      	bcs.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006752:	637a      	str	r2, [r7, #52]	; 0x34
 8006754:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	613b      	str	r3, [r7, #16]
   return(result);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006786:	623a      	str	r2, [r7, #32]
 8006788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	69f9      	ldr	r1, [r7, #28]
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	61bb      	str	r3, [r7, #24]
   return(result);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e00f      	b.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d09f      	beq.n	8006714 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3740      	adds	r7, #64	; 0x40
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067e4:	b0c0      	sub	sp, #256	; 0x100
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	68d9      	ldr	r1, [r3, #12]
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	ea40 0301 	orr.w	r3, r0, r1
 8006808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	431a      	orrs	r2, r3
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006838:	f021 010c 	bic.w	r1, r1, #12
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006846:	430b      	orrs	r3, r1
 8006848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	6999      	ldr	r1, [r3, #24]
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	ea40 0301 	orr.w	r3, r0, r1
 8006866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b8f      	ldr	r3, [pc, #572]	; (8006aac <UART_SetConfig+0x2cc>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d005      	beq.n	8006880 <UART_SetConfig+0xa0>
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <UART_SetConfig+0x2d0>)
 800687c:	429a      	cmp	r2, r3
 800687e:	d104      	bne.n	800688a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fd fcf6 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8006884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006888:	e003      	b.n	8006892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800688a:	f7fd fcdd 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800688e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689c:	f040 810c 	bne.w	8006ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80068ba:	415b      	adcs	r3, r3
 80068bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068c2:	4621      	mov	r1, r4
 80068c4:	eb12 0801 	adds.w	r8, r2, r1
 80068c8:	4629      	mov	r1, r5
 80068ca:	eb43 0901 	adc.w	r9, r3, r1
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068e2:	4690      	mov	r8, r2
 80068e4:	4699      	mov	r9, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	eb18 0303 	adds.w	r3, r8, r3
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f0:	462b      	mov	r3, r5
 80068f2:	eb49 0303 	adc.w	r3, r9, r3
 80068f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006906:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800690a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800690e:	460b      	mov	r3, r1
 8006910:	18db      	adds	r3, r3, r3
 8006912:	653b      	str	r3, [r7, #80]	; 0x50
 8006914:	4613      	mov	r3, r2
 8006916:	eb42 0303 	adc.w	r3, r2, r3
 800691a:	657b      	str	r3, [r7, #84]	; 0x54
 800691c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006924:	f7fa f9b0 	bl	8000c88 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4b61      	ldr	r3, [pc, #388]	; (8006ab4 <UART_SetConfig+0x2d4>)
 800692e:	fba3 2302 	umull	r2, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	011c      	lsls	r4, r3, #4
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006940:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	1891      	adds	r1, r2, r2
 800694e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006950:	415b      	adcs	r3, r3
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006958:	4641      	mov	r1, r8
 800695a:	eb12 0a01 	adds.w	sl, r2, r1
 800695e:	4649      	mov	r1, r9
 8006960:	eb43 0b01 	adc.w	fp, r3, r1
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006978:	4692      	mov	sl, r2
 800697a:	469b      	mov	fp, r3
 800697c:	4643      	mov	r3, r8
 800697e:	eb1a 0303 	adds.w	r3, sl, r3
 8006982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006986:	464b      	mov	r3, r9
 8006988:	eb4b 0303 	adc.w	r3, fp, r3
 800698c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800699c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069a4:	460b      	mov	r3, r1
 80069a6:	18db      	adds	r3, r3, r3
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
 80069aa:	4613      	mov	r3, r2
 80069ac:	eb42 0303 	adc.w	r3, r2, r3
 80069b0:	647b      	str	r3, [r7, #68]	; 0x44
 80069b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069ba:	f7fa f965 	bl	8000c88 <__aeabi_uldivmod>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	4b3b      	ldr	r3, [pc, #236]	; (8006ab4 <UART_SetConfig+0x2d4>)
 80069c6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2264      	movs	r2, #100	; 0x64
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069da:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <UART_SetConfig+0x2d4>)
 80069dc:	fba3 2302 	umull	r2, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e8:	441c      	add	r4, r3
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	1891      	adds	r1, r2, r2
 8006a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a04:	415b      	adcs	r3, r3
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	1851      	adds	r1, r2, r1
 8006a10:	6339      	str	r1, [r7, #48]	; 0x30
 8006a12:	4649      	mov	r1, r9
 8006a14:	414b      	adcs	r3, r1
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a24:	4659      	mov	r1, fp
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4651      	mov	r1, sl
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4642      	mov	r2, r8
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a40:	464b      	mov	r3, r9
 8006a42:	460a      	mov	r2, r1
 8006a44:	eb42 0303 	adc.w	r3, r2, r3
 8006a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a60:	460b      	mov	r3, r1
 8006a62:	18db      	adds	r3, r3, r3
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a66:	4613      	mov	r3, r2
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a76:	f7fa f907 	bl	8000c88 <__aeabi_uldivmod>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006a80:	fba3 1302 	umull	r1, r3, r3, r2
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	2164      	movs	r1, #100	; 0x64
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	3332      	adds	r3, #50	; 0x32
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	f003 0207 	and.w	r2, r3, #7
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4422      	add	r2, r4
 8006aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aa8:	e105      	b.n	8006cb6 <UART_SetConfig+0x4d6>
 8006aaa:	bf00      	nop
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40011400 	.word	0x40011400
 8006ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aca:	4642      	mov	r2, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	1891      	adds	r1, r2, r2
 8006ad0:	6239      	str	r1, [r7, #32]
 8006ad2:	415b      	adcs	r3, r3
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ada:	4641      	mov	r1, r8
 8006adc:	1854      	adds	r4, r2, r1
 8006ade:	4649      	mov	r1, r9
 8006ae0:	eb43 0501 	adc.w	r5, r3, r1
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	00eb      	lsls	r3, r5, #3
 8006aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af2:	00e2      	lsls	r2, r4, #3
 8006af4:	4614      	mov	r4, r2
 8006af6:	461d      	mov	r5, r3
 8006af8:	4643      	mov	r3, r8
 8006afa:	18e3      	adds	r3, r4, r3
 8006afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b00:	464b      	mov	r3, r9
 8006b02:	eb45 0303 	adc.w	r3, r5, r3
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b26:	4629      	mov	r1, r5
 8006b28:	008b      	lsls	r3, r1, #2
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b30:	4621      	mov	r1, r4
 8006b32:	008a      	lsls	r2, r1, #2
 8006b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b38:	f7fa f8a6 	bl	8000c88 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4b60      	ldr	r3, [pc, #384]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006b42:	fba3 2302 	umull	r2, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	011c      	lsls	r4, r3, #4
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	1891      	adds	r1, r2, r2
 8006b62:	61b9      	str	r1, [r7, #24]
 8006b64:	415b      	adcs	r3, r3
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	1851      	adds	r1, r2, r1
 8006b70:	6139      	str	r1, [r7, #16]
 8006b72:	4649      	mov	r1, r9
 8006b74:	414b      	adcs	r3, r1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b84:	4659      	mov	r1, fp
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4651      	mov	r1, sl
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4651      	mov	r1, sl
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	4641      	mov	r1, r8
 8006bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bce:	4641      	mov	r1, r8
 8006bd0:	008a      	lsls	r2, r1, #2
 8006bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bd6:	f7fa f857 	bl	8000c88 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	; 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	3332      	adds	r3, #50	; 0x32
 8006bf2:	4a34      	ldr	r2, [pc, #208]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bfe:	441c      	add	r4, r3
 8006c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c04:	2200      	movs	r2, #0
 8006c06:	673b      	str	r3, [r7, #112]	; 0x70
 8006c08:	677a      	str	r2, [r7, #116]	; 0x74
 8006c0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	415b      	adcs	r3, r3
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c1e:	4641      	mov	r1, r8
 8006c20:	1851      	adds	r1, r2, r1
 8006c22:	6039      	str	r1, [r7, #0]
 8006c24:	4649      	mov	r1, r9
 8006c26:	414b      	adcs	r3, r1
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c36:	4659      	mov	r1, fp
 8006c38:	00cb      	lsls	r3, r1, #3
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c40:	4651      	mov	r1, sl
 8006c42:	00ca      	lsls	r2, r1, #3
 8006c44:	4610      	mov	r0, r2
 8006c46:	4619      	mov	r1, r3
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	189b      	adds	r3, r3, r2
 8006c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c50:	464b      	mov	r3, r9
 8006c52:	460a      	mov	r2, r1
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	663b      	str	r3, [r7, #96]	; 0x60
 8006c64:	667a      	str	r2, [r7, #100]	; 0x64
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c72:	4649      	mov	r1, r9
 8006c74:	008b      	lsls	r3, r1, #2
 8006c76:	4641      	mov	r1, r8
 8006c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	008a      	lsls	r2, r1, #2
 8006c80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c84:	f7fa f800 	bl	8000c88 <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2164      	movs	r1, #100	; 0x64
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	3332      	adds	r3, #50	; 0x32
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4422      	add	r2, r4
 8006cb4:	609a      	str	r2, [r3, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc2:	bf00      	nop
 8006cc4:	51eb851f 	.word	0x51eb851f

08006cc8 <__errno>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	; (8006cd0 <__errno+0x8>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	2000000c 	.word	0x2000000c

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	; (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	; (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	; (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	; (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f002 fd4e 	bl	8009788 <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08009be4 	.word	0x08009be4
 8006d10:	08009be4 	.word	0x08009be4
 8006d14:	08009be4 	.word	0x08009be4
 8006d18:	08009be8 	.word	0x08009be8

08006d1c <memset>:
 8006d1c:	4402      	add	r2, r0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d100      	bne.n	8006d26 <memset+0xa>
 8006d24:	4770      	bx	lr
 8006d26:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2a:	e7f9      	b.n	8006d20 <memset+0x4>

08006d2c <__cvt>:
 8006d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	ec55 4b10 	vmov	r4, r5, d0
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	460e      	mov	r6, r1
 8006d38:	4619      	mov	r1, r3
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	bfbb      	ittet	lt
 8006d3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d42:	461d      	movlt	r5, r3
 8006d44:	2300      	movge	r3, #0
 8006d46:	232d      	movlt	r3, #45	; 0x2d
 8006d48:	700b      	strb	r3, [r1, #0]
 8006d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d50:	4691      	mov	r9, r2
 8006d52:	f023 0820 	bic.w	r8, r3, #32
 8006d56:	bfbc      	itt	lt
 8006d58:	4622      	movlt	r2, r4
 8006d5a:	4614      	movlt	r4, r2
 8006d5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d60:	d005      	beq.n	8006d6e <__cvt+0x42>
 8006d62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d66:	d100      	bne.n	8006d6a <__cvt+0x3e>
 8006d68:	3601      	adds	r6, #1
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	e000      	b.n	8006d70 <__cvt+0x44>
 8006d6e:	2103      	movs	r1, #3
 8006d70:	ab03      	add	r3, sp, #12
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	ab02      	add	r3, sp, #8
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	ec45 4b10 	vmov	d0, r4, r5
 8006d7c:	4653      	mov	r3, sl
 8006d7e:	4632      	mov	r2, r6
 8006d80:	f000 fce2 	bl	8007748 <_dtoa_r>
 8006d84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d88:	4607      	mov	r7, r0
 8006d8a:	d102      	bne.n	8006d92 <__cvt+0x66>
 8006d8c:	f019 0f01 	tst.w	r9, #1
 8006d90:	d022      	beq.n	8006dd8 <__cvt+0xac>
 8006d92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d96:	eb07 0906 	add.w	r9, r7, r6
 8006d9a:	d110      	bne.n	8006dbe <__cvt+0x92>
 8006d9c:	783b      	ldrb	r3, [r7, #0]
 8006d9e:	2b30      	cmp	r3, #48	; 0x30
 8006da0:	d10a      	bne.n	8006db8 <__cvt+0x8c>
 8006da2:	2200      	movs	r2, #0
 8006da4:	2300      	movs	r3, #0
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 fead 	bl	8000b08 <__aeabi_dcmpeq>
 8006dae:	b918      	cbnz	r0, 8006db8 <__cvt+0x8c>
 8006db0:	f1c6 0601 	rsb	r6, r6, #1
 8006db4:	f8ca 6000 	str.w	r6, [sl]
 8006db8:	f8da 3000 	ldr.w	r3, [sl]
 8006dbc:	4499      	add	r9, r3
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fe9f 	bl	8000b08 <__aeabi_dcmpeq>
 8006dca:	b108      	cbz	r0, 8006dd0 <__cvt+0xa4>
 8006dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dd0:	2230      	movs	r2, #48	; 0x30
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	454b      	cmp	r3, r9
 8006dd6:	d307      	bcc.n	8006de8 <__cvt+0xbc>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ddc:	1bdb      	subs	r3, r3, r7
 8006dde:	4638      	mov	r0, r7
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	b004      	add	sp, #16
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	1c59      	adds	r1, r3, #1
 8006dea:	9103      	str	r1, [sp, #12]
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e7f0      	b.n	8006dd2 <__cvt+0xa6>

08006df0 <__exponent>:
 8006df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df2:	4603      	mov	r3, r0
 8006df4:	2900      	cmp	r1, #0
 8006df6:	bfb8      	it	lt
 8006df8:	4249      	neglt	r1, r1
 8006dfa:	f803 2b02 	strb.w	r2, [r3], #2
 8006dfe:	bfb4      	ite	lt
 8006e00:	222d      	movlt	r2, #45	; 0x2d
 8006e02:	222b      	movge	r2, #43	; 0x2b
 8006e04:	2909      	cmp	r1, #9
 8006e06:	7042      	strb	r2, [r0, #1]
 8006e08:	dd2a      	ble.n	8006e60 <__exponent+0x70>
 8006e0a:	f10d 0407 	add.w	r4, sp, #7
 8006e0e:	46a4      	mov	ip, r4
 8006e10:	270a      	movs	r7, #10
 8006e12:	46a6      	mov	lr, r4
 8006e14:	460a      	mov	r2, r1
 8006e16:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e1a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e1e:	3530      	adds	r5, #48	; 0x30
 8006e20:	2a63      	cmp	r2, #99	; 0x63
 8006e22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006e26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	dcf1      	bgt.n	8006e12 <__exponent+0x22>
 8006e2e:	3130      	adds	r1, #48	; 0x30
 8006e30:	f1ae 0502 	sub.w	r5, lr, #2
 8006e34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e38:	1c44      	adds	r4, r0, #1
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4561      	cmp	r1, ip
 8006e3e:	d30a      	bcc.n	8006e56 <__exponent+0x66>
 8006e40:	f10d 0209 	add.w	r2, sp, #9
 8006e44:	eba2 020e 	sub.w	r2, r2, lr
 8006e48:	4565      	cmp	r5, ip
 8006e4a:	bf88      	it	hi
 8006e4c:	2200      	movhi	r2, #0
 8006e4e:	4413      	add	r3, r2
 8006e50:	1a18      	subs	r0, r3, r0
 8006e52:	b003      	add	sp, #12
 8006e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e5e:	e7ed      	b.n	8006e3c <__exponent+0x4c>
 8006e60:	2330      	movs	r3, #48	; 0x30
 8006e62:	3130      	adds	r1, #48	; 0x30
 8006e64:	7083      	strb	r3, [r0, #2]
 8006e66:	70c1      	strb	r1, [r0, #3]
 8006e68:	1d03      	adds	r3, r0, #4
 8006e6a:	e7f1      	b.n	8006e50 <__exponent+0x60>

08006e6c <_printf_float>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	ed2d 8b02 	vpush	{d8}
 8006e74:	b08d      	sub	sp, #52	; 0x34
 8006e76:	460c      	mov	r4, r1
 8006e78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	461f      	mov	r7, r3
 8006e80:	4605      	mov	r5, r0
 8006e82:	f001 fb45 	bl	8008510 <_localeconv_r>
 8006e86:	f8d0 a000 	ldr.w	sl, [r0]
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	f7f9 f9c0 	bl	8000210 <strlen>
 8006e90:	2300      	movs	r3, #0
 8006e92:	930a      	str	r3, [sp, #40]	; 0x28
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	9305      	str	r3, [sp, #20]
 8006e98:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	f103 0208 	add.w	r2, r3, #8
 8006eaa:	f8c8 2000 	str.w	r2, [r8]
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006eb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ebe:	9307      	str	r3, [sp, #28]
 8006ec0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ec4:	ee08 0a10 	vmov	s16, r0
 8006ec8:	4b9f      	ldr	r3, [pc, #636]	; (8007148 <_printf_float+0x2dc>)
 8006eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed2:	f7f9 fe4b 	bl	8000b6c <__aeabi_dcmpun>
 8006ed6:	bb88      	cbnz	r0, 8006f3c <_printf_float+0xd0>
 8006ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006edc:	4b9a      	ldr	r3, [pc, #616]	; (8007148 <_printf_float+0x2dc>)
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee2:	f7f9 fe25 	bl	8000b30 <__aeabi_dcmple>
 8006ee6:	bb48      	cbnz	r0, 8006f3c <_printf_float+0xd0>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4640      	mov	r0, r8
 8006eee:	4649      	mov	r1, r9
 8006ef0:	f7f9 fe14 	bl	8000b1c <__aeabi_dcmplt>
 8006ef4:	b110      	cbz	r0, 8006efc <_printf_float+0x90>
 8006ef6:	232d      	movs	r3, #45	; 0x2d
 8006ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006efc:	4b93      	ldr	r3, [pc, #588]	; (800714c <_printf_float+0x2e0>)
 8006efe:	4894      	ldr	r0, [pc, #592]	; (8007150 <_printf_float+0x2e4>)
 8006f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f04:	bf94      	ite	ls
 8006f06:	4698      	movls	r8, r3
 8006f08:	4680      	movhi	r8, r0
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	f023 0204 	bic.w	r2, r3, #4
 8006f14:	6022      	str	r2, [r4, #0]
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	9700      	str	r7, [sp, #0]
 8006f1c:	4633      	mov	r3, r6
 8006f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f20:	4621      	mov	r1, r4
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f9d8 	bl	80072d8 <_printf_common>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f040 8090 	bne.w	800704e <_printf_float+0x1e2>
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f32:	b00d      	add	sp, #52	; 0x34
 8006f34:	ecbd 8b02 	vpop	{d8}
 8006f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 fe12 	bl	8000b6c <__aeabi_dcmpun>
 8006f48:	b140      	cbz	r0, 8006f5c <_printf_float+0xf0>
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfbc      	itt	lt
 8006f50:	232d      	movlt	r3, #45	; 0x2d
 8006f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f56:	487f      	ldr	r0, [pc, #508]	; (8007154 <_printf_float+0x2e8>)
 8006f58:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <_printf_float+0x2ec>)
 8006f5a:	e7d1      	b.n	8006f00 <_printf_float+0x94>
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f62:	9206      	str	r2, [sp, #24]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	d13f      	bne.n	8006fe8 <_printf_float+0x17c>
 8006f68:	2306      	movs	r3, #6
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	6861      	ldr	r1, [r4, #4]
 8006f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f74:	2300      	movs	r3, #0
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	ab0a      	add	r3, sp, #40	; 0x28
 8006f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f7e:	ab09      	add	r3, sp, #36	; 0x24
 8006f80:	ec49 8b10 	vmov	d0, r8, r9
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff fecd 	bl	8006d2c <__cvt>
 8006f92:	9b06      	ldr	r3, [sp, #24]
 8006f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f96:	2b47      	cmp	r3, #71	; 0x47
 8006f98:	4680      	mov	r8, r0
 8006f9a:	d108      	bne.n	8006fae <_printf_float+0x142>
 8006f9c:	1cc8      	adds	r0, r1, #3
 8006f9e:	db02      	blt.n	8006fa6 <_printf_float+0x13a>
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	dd41      	ble.n	800702a <_printf_float+0x1be>
 8006fa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006faa:	fa5f fb8b 	uxtb.w	fp, fp
 8006fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fb2:	d820      	bhi.n	8006ff6 <_printf_float+0x18a>
 8006fb4:	3901      	subs	r1, #1
 8006fb6:	465a      	mov	r2, fp
 8006fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8006fbe:	f7ff ff17 	bl	8006df0 <__exponent>
 8006fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc4:	1813      	adds	r3, r2, r0
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	4681      	mov	r9, r0
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	dc02      	bgt.n	8006fd4 <_printf_float+0x168>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_float+0x16c>
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d09c      	beq.n	8006f1a <_printf_float+0xae>
 8006fe0:	232d      	movs	r3, #45	; 0x2d
 8006fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe6:	e798      	b.n	8006f1a <_printf_float+0xae>
 8006fe8:	9a06      	ldr	r2, [sp, #24]
 8006fea:	2a47      	cmp	r2, #71	; 0x47
 8006fec:	d1be      	bne.n	8006f6c <_printf_float+0x100>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1bc      	bne.n	8006f6c <_printf_float+0x100>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7b9      	b.n	8006f6a <_printf_float+0xfe>
 8006ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ffa:	d118      	bne.n	800702e <_printf_float+0x1c2>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	dd0b      	ble.n	800701a <_printf_float+0x1ae>
 8007002:	6121      	str	r1, [r4, #16]
 8007004:	b913      	cbnz	r3, 800700c <_printf_float+0x1a0>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d502      	bpl.n	8007012 <_printf_float+0x1a6>
 800700c:	3301      	adds	r3, #1
 800700e:	440b      	add	r3, r1
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	65a1      	str	r1, [r4, #88]	; 0x58
 8007014:	f04f 0900 	mov.w	r9, #0
 8007018:	e7de      	b.n	8006fd8 <_printf_float+0x16c>
 800701a:	b913      	cbnz	r3, 8007022 <_printf_float+0x1b6>
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	07d2      	lsls	r2, r2, #31
 8007020:	d501      	bpl.n	8007026 <_printf_float+0x1ba>
 8007022:	3302      	adds	r3, #2
 8007024:	e7f4      	b.n	8007010 <_printf_float+0x1a4>
 8007026:	2301      	movs	r3, #1
 8007028:	e7f2      	b.n	8007010 <_printf_float+0x1a4>
 800702a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800702e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007030:	4299      	cmp	r1, r3
 8007032:	db05      	blt.n	8007040 <_printf_float+0x1d4>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	6121      	str	r1, [r4, #16]
 8007038:	07d8      	lsls	r0, r3, #31
 800703a:	d5ea      	bpl.n	8007012 <_printf_float+0x1a6>
 800703c:	1c4b      	adds	r3, r1, #1
 800703e:	e7e7      	b.n	8007010 <_printf_float+0x1a4>
 8007040:	2900      	cmp	r1, #0
 8007042:	bfd4      	ite	le
 8007044:	f1c1 0202 	rsble	r2, r1, #2
 8007048:	2201      	movgt	r2, #1
 800704a:	4413      	add	r3, r2
 800704c:	e7e0      	b.n	8007010 <_printf_float+0x1a4>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	055a      	lsls	r2, r3, #21
 8007052:	d407      	bmi.n	8007064 <_printf_float+0x1f8>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	4642      	mov	r2, r8
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	d12c      	bne.n	80070bc <_printf_float+0x250>
 8007062:	e764      	b.n	8006f2e <_printf_float+0xc2>
 8007064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007068:	f240 80e0 	bls.w	800722c <_printf_float+0x3c0>
 800706c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	f7f9 fd48 	bl	8000b08 <__aeabi_dcmpeq>
 8007078:	2800      	cmp	r0, #0
 800707a:	d034      	beq.n	80070e6 <_printf_float+0x27a>
 800707c:	4a37      	ldr	r2, [pc, #220]	; (800715c <_printf_float+0x2f0>)
 800707e:	2301      	movs	r3, #1
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f af51 	beq.w	8006f2e <_printf_float+0xc2>
 800708c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007090:	429a      	cmp	r2, r3
 8007092:	db02      	blt.n	800709a <_printf_float+0x22e>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07d8      	lsls	r0, r3, #31
 8007098:	d510      	bpl.n	80070bc <_printf_float+0x250>
 800709a:	ee18 3a10 	vmov	r3, s16
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f af41 	beq.w	8006f2e <_printf_float+0xc2>
 80070ac:	f04f 0800 	mov.w	r8, #0
 80070b0:	f104 091a 	add.w	r9, r4, #26
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4543      	cmp	r3, r8
 80070ba:	dc09      	bgt.n	80070d0 <_printf_float+0x264>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	079b      	lsls	r3, r3, #30
 80070c0:	f100 8105 	bmi.w	80072ce <_printf_float+0x462>
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c8:	4298      	cmp	r0, r3
 80070ca:	bfb8      	it	lt
 80070cc:	4618      	movlt	r0, r3
 80070ce:	e730      	b.n	8006f32 <_printf_float+0xc6>
 80070d0:	2301      	movs	r3, #1
 80070d2:	464a      	mov	r2, r9
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af27 	beq.w	8006f2e <_printf_float+0xc2>
 80070e0:	f108 0801 	add.w	r8, r8, #1
 80070e4:	e7e6      	b.n	80070b4 <_printf_float+0x248>
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc39      	bgt.n	8007160 <_printf_float+0x2f4>
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <_printf_float+0x2f0>)
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f af19 	beq.w	8006f2e <_printf_float+0xc2>
 80070fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007100:	4313      	orrs	r3, r2
 8007102:	d102      	bne.n	800710a <_printf_float+0x29e>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	07d9      	lsls	r1, r3, #31
 8007108:	d5d8      	bpl.n	80070bc <_printf_float+0x250>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af09 	beq.w	8006f2e <_printf_float+0xc2>
 800711c:	f04f 0900 	mov.w	r9, #0
 8007120:	f104 0a1a 	add.w	sl, r4, #26
 8007124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007126:	425b      	negs	r3, r3
 8007128:	454b      	cmp	r3, r9
 800712a:	dc01      	bgt.n	8007130 <_printf_float+0x2c4>
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	e792      	b.n	8007056 <_printf_float+0x1ea>
 8007130:	2301      	movs	r3, #1
 8007132:	4652      	mov	r2, sl
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f aef7 	beq.w	8006f2e <_printf_float+0xc2>
 8007140:	f109 0901 	add.w	r9, r9, #1
 8007144:	e7ee      	b.n	8007124 <_printf_float+0x2b8>
 8007146:	bf00      	nop
 8007148:	7fefffff 	.word	0x7fefffff
 800714c:	08009804 	.word	0x08009804
 8007150:	08009808 	.word	0x08009808
 8007154:	08009810 	.word	0x08009810
 8007158:	0800980c 	.word	0x0800980c
 800715c:	08009814 	.word	0x08009814
 8007160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007164:	429a      	cmp	r2, r3
 8007166:	bfa8      	it	ge
 8007168:	461a      	movge	r2, r3
 800716a:	2a00      	cmp	r2, #0
 800716c:	4691      	mov	r9, r2
 800716e:	dc37      	bgt.n	80071e0 <_printf_float+0x374>
 8007170:	f04f 0b00 	mov.w	fp, #0
 8007174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007178:	f104 021a 	add.w	r2, r4, #26
 800717c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	eba3 0309 	sub.w	r3, r3, r9
 8007184:	455b      	cmp	r3, fp
 8007186:	dc33      	bgt.n	80071f0 <_printf_float+0x384>
 8007188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800718c:	429a      	cmp	r2, r3
 800718e:	db3b      	blt.n	8007208 <_printf_float+0x39c>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07da      	lsls	r2, r3, #31
 8007194:	d438      	bmi.n	8007208 <_printf_float+0x39c>
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	9a05      	ldr	r2, [sp, #20]
 800719a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800719c:	1a9a      	subs	r2, r3, r2
 800719e:	eba3 0901 	sub.w	r9, r3, r1
 80071a2:	4591      	cmp	r9, r2
 80071a4:	bfa8      	it	ge
 80071a6:	4691      	movge	r9, r2
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	dc35      	bgt.n	800721a <_printf_float+0x3ae>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b6:	f104 0a1a 	add.w	sl, r4, #26
 80071ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	eba3 0309 	sub.w	r3, r3, r9
 80071c4:	4543      	cmp	r3, r8
 80071c6:	f77f af79 	ble.w	80070bc <_printf_float+0x250>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f aeaa 	beq.w	8006f2e <_printf_float+0xc2>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	e7ec      	b.n	80071ba <_printf_float+0x34e>
 80071e0:	4613      	mov	r3, r2
 80071e2:	4631      	mov	r1, r6
 80071e4:	4642      	mov	r2, r8
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d1c0      	bne.n	8007170 <_printf_float+0x304>
 80071ee:	e69e      	b.n	8006f2e <_printf_float+0xc2>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	9205      	str	r2, [sp, #20]
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	f43f ae97 	beq.w	8006f2e <_printf_float+0xc2>
 8007200:	9a05      	ldr	r2, [sp, #20]
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e7b9      	b.n	800717c <_printf_float+0x310>
 8007208:	ee18 3a10 	vmov	r3, s16
 800720c:	4652      	mov	r2, sl
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	d1be      	bne.n	8007196 <_printf_float+0x32a>
 8007218:	e689      	b.n	8006f2e <_printf_float+0xc2>
 800721a:	9a05      	ldr	r2, [sp, #20]
 800721c:	464b      	mov	r3, r9
 800721e:	4442      	add	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d1c1      	bne.n	80071ae <_printf_float+0x342>
 800722a:	e680      	b.n	8006f2e <_printf_float+0xc2>
 800722c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800722e:	2a01      	cmp	r2, #1
 8007230:	dc01      	bgt.n	8007236 <_printf_float+0x3ca>
 8007232:	07db      	lsls	r3, r3, #31
 8007234:	d538      	bpl.n	80072a8 <_printf_float+0x43c>
 8007236:	2301      	movs	r3, #1
 8007238:	4642      	mov	r2, r8
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae74 	beq.w	8006f2e <_printf_float+0xc2>
 8007246:	ee18 3a10 	vmov	r3, s16
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f ae6b 	beq.w	8006f2e <_printf_float+0xc2>
 8007258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	f7f9 fc52 	bl	8000b08 <__aeabi_dcmpeq>
 8007264:	b9d8      	cbnz	r0, 800729e <_printf_float+0x432>
 8007266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007268:	f108 0201 	add.w	r2, r8, #1
 800726c:	3b01      	subs	r3, #1
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d10e      	bne.n	8007296 <_printf_float+0x42a>
 8007278:	e659      	b.n	8006f2e <_printf_float+0xc2>
 800727a:	2301      	movs	r3, #1
 800727c:	4652      	mov	r2, sl
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f ae52 	beq.w	8006f2e <_printf_float+0xc2>
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007290:	3b01      	subs	r3, #1
 8007292:	4543      	cmp	r3, r8
 8007294:	dcf1      	bgt.n	800727a <_printf_float+0x40e>
 8007296:	464b      	mov	r3, r9
 8007298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800729c:	e6dc      	b.n	8007058 <_printf_float+0x1ec>
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	f104 0a1a 	add.w	sl, r4, #26
 80072a6:	e7f2      	b.n	800728e <_printf_float+0x422>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4642      	mov	r2, r8
 80072ac:	e7df      	b.n	800726e <_printf_float+0x402>
 80072ae:	2301      	movs	r3, #1
 80072b0:	464a      	mov	r2, r9
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae38 	beq.w	8006f2e <_printf_float+0xc2>
 80072be:	f108 0801 	add.w	r8, r8, #1
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	4543      	cmp	r3, r8
 80072ca:	dcf0      	bgt.n	80072ae <_printf_float+0x442>
 80072cc:	e6fa      	b.n	80070c4 <_printf_float+0x258>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0919 	add.w	r9, r4, #25
 80072d6:	e7f4      	b.n	80072c2 <_printf_float+0x456>

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f4:	4607      	mov	r7, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc26      	bgt.n	800736e <_printf_common+0x96>
 8007320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007324:	1e13      	subs	r3, r2, #0
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42b      	bmi.n	8007388 <_printf_common+0xb0>
 8007330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d01e      	beq.n	800737c <_printf_common+0xa4>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	68e5      	ldr	r5, [r4, #12]
 8007342:	6832      	ldr	r2, [r6, #0]
 8007344:	f003 0306 	and.w	r3, r3, #6
 8007348:	2b04      	cmp	r3, #4
 800734a:	bf08      	it	eq
 800734c:	1aad      	subeq	r5, r5, r2
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	2600      	movs	r6, #0
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xc8>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xa8>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4649      	mov	r1, r9
 8007374:	4638      	mov	r0, r7
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xac>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c6      	b.n	8007316 <_printf_common+0x3e>
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	2030      	movs	r0, #48	; 0x30
 800738e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007392:	4422      	add	r2, r4
 8007394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739c:	3302      	adds	r3, #2
 800739e:	e7c7      	b.n	8007330 <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x8e>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073bc:	2f78      	cmp	r7, #120	; 0x78
 80073be:	4691      	mov	r9, r2
 80073c0:	4680      	mov	r8, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	469a      	mov	sl, r3
 80073c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	; 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d8 	beq.w	8007586 <_printf_i+0x1d2>
 80073d6:	2f58      	cmp	r7, #88	; 0x58
 80073d8:	f000 80a3 	beq.w	8007522 <_printf_i+0x16e>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	; (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	0800756d 	.word	0x0800756d
 8007424:	08007491 	.word	0x08007491
 8007428:	0800754f 	.word	0x0800754f
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	0800758f 	.word	0x0800758f
 8007438:	080073dd 	.word	0x080073dd
 800743c:	08007491 	.word	0x08007491
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007557 	.word	0x08007557
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e0a3      	b.n	80075a8 <_printf_i+0x1f4>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	0606      	lsls	r6, r0, #24
 8007466:	f101 0304 	add.w	r3, r1, #4
 800746a:	d50a      	bpl.n	8007482 <_printf_i+0xce>
 800746c:	680e      	ldr	r6, [r1, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	2e00      	cmp	r6, #0
 8007472:	da03      	bge.n	800747c <_printf_i+0xc8>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	4276      	negs	r6, r6
 8007478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747c:	485e      	ldr	r0, [pc, #376]	; (80075f8 <_printf_i+0x244>)
 800747e:	230a      	movs	r3, #10
 8007480:	e019      	b.n	80074b6 <_printf_i+0x102>
 8007482:	680e      	ldr	r6, [r1, #0]
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800748a:	bf18      	it	ne
 800748c:	b236      	sxthne	r6, r6
 800748e:	e7ef      	b.n	8007470 <_printf_i+0xbc>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6029      	str	r1, [r5, #0]
 8007498:	0601      	lsls	r1, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xec>
 800749c:	681e      	ldr	r6, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0xf2>
 80074a0:	0646      	lsls	r6, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xe8>
 80074a4:	881e      	ldrh	r6, [r3, #0]
 80074a6:	4854      	ldr	r0, [pc, #336]	; (80075f8 <_printf_i+0x244>)
 80074a8:	2f6f      	cmp	r7, #111	; 0x6f
 80074aa:	bf0c      	ite	eq
 80074ac:	2308      	moveq	r3, #8
 80074ae:	230a      	movne	r3, #10
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b6:	6865      	ldr	r5, [r4, #4]
 80074b8:	60a5      	str	r5, [r4, #8]
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bfa2      	ittt	ge
 80074be:	6821      	ldrge	r1, [r4, #0]
 80074c0:	f021 0104 	bicge.w	r1, r1, #4
 80074c4:	6021      	strge	r1, [r4, #0]
 80074c6:	b90e      	cbnz	r6, 80074cc <_printf_i+0x118>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d04d      	beq.n	8007568 <_printf_i+0x1b4>
 80074cc:	4615      	mov	r5, r2
 80074ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d2:	fb03 6711 	mls	r7, r3, r1, r6
 80074d6:	5dc7      	ldrb	r7, [r0, r7]
 80074d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074dc:	4637      	mov	r7, r6
 80074de:	42bb      	cmp	r3, r7
 80074e0:	460e      	mov	r6, r1
 80074e2:	d9f4      	bls.n	80074ce <_printf_i+0x11a>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <_printf_i+0x14c>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07de      	lsls	r6, r3, #31
 80074ec:	d508      	bpl.n	8007500 <_printf_i+0x14c>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	bfde      	ittt	le
 80074f6:	2330      	movle	r3, #48	; 0x30
 80074f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	464b      	mov	r3, r9
 800750a:	aa03      	add	r2, sp, #12
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fee2 	bl	80072d8 <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	d14c      	bne.n	80075b2 <_printf_i+0x1fe>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	4835      	ldr	r0, [pc, #212]	; (80075f8 <_printf_i+0x244>)
 8007524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007528:	6829      	ldr	r1, [r5, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007530:	6029      	str	r1, [r5, #0]
 8007532:	061d      	lsls	r5, r3, #24
 8007534:	d514      	bpl.n	8007560 <_printf_i+0x1ac>
 8007536:	07df      	lsls	r7, r3, #31
 8007538:	bf44      	itt	mi
 800753a:	f043 0320 	orrmi.w	r3, r3, #32
 800753e:	6023      	strmi	r3, [r4, #0]
 8007540:	b91e      	cbnz	r6, 800754a <_printf_i+0x196>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	f023 0320 	bic.w	r3, r3, #32
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	2310      	movs	r3, #16
 800754c:	e7b0      	b.n	80074b0 <_printf_i+0xfc>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	f043 0320 	orr.w	r3, r3, #32
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	2378      	movs	r3, #120	; 0x78
 8007558:	4828      	ldr	r0, [pc, #160]	; (80075fc <_printf_i+0x248>)
 800755a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800755e:	e7e3      	b.n	8007528 <_printf_i+0x174>
 8007560:	0659      	lsls	r1, r3, #25
 8007562:	bf48      	it	mi
 8007564:	b2b6      	uxthmi	r6, r6
 8007566:	e7e6      	b.n	8007536 <_printf_i+0x182>
 8007568:	4615      	mov	r5, r2
 800756a:	e7bb      	b.n	80074e4 <_printf_i+0x130>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	6826      	ldr	r6, [r4, #0]
 8007570:	6961      	ldr	r1, [r4, #20]
 8007572:	1d18      	adds	r0, r3, #4
 8007574:	6028      	str	r0, [r5, #0]
 8007576:	0635      	lsls	r5, r6, #24
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	d501      	bpl.n	8007580 <_printf_i+0x1cc>
 800757c:	6019      	str	r1, [r3, #0]
 800757e:	e002      	b.n	8007586 <_printf_i+0x1d2>
 8007580:	0670      	lsls	r0, r6, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0x1c8>
 8007584:	8019      	strh	r1, [r3, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	4615      	mov	r5, r2
 800758c:	e7ba      	b.n	8007504 <_printf_i+0x150>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	602a      	str	r2, [r5, #0]
 8007594:	681d      	ldr	r5, [r3, #0]
 8007596:	6862      	ldr	r2, [r4, #4]
 8007598:	2100      	movs	r1, #0
 800759a:	4628      	mov	r0, r5
 800759c:	f7f8 fe40 	bl	8000220 <memchr>
 80075a0:	b108      	cbz	r0, 80075a6 <_printf_i+0x1f2>
 80075a2:	1b40      	subs	r0, r0, r5
 80075a4:	6060      	str	r0, [r4, #4]
 80075a6:	6863      	ldr	r3, [r4, #4]
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	2300      	movs	r3, #0
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b0:	e7a8      	b.n	8007504 <_printf_i+0x150>
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4649      	mov	r1, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	47d0      	blx	sl
 80075bc:	3001      	adds	r0, #1
 80075be:	d0ab      	beq.n	8007518 <_printf_i+0x164>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	079b      	lsls	r3, r3, #30
 80075c4:	d413      	bmi.n	80075ee <_printf_i+0x23a>
 80075c6:	68e0      	ldr	r0, [r4, #12]
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	4298      	cmp	r0, r3
 80075cc:	bfb8      	it	lt
 80075ce:	4618      	movlt	r0, r3
 80075d0:	e7a4      	b.n	800751c <_printf_i+0x168>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4632      	mov	r2, r6
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	47d0      	blx	sl
 80075dc:	3001      	adds	r0, #1
 80075de:	d09b      	beq.n	8007518 <_printf_i+0x164>
 80075e0:	3501      	adds	r5, #1
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	9903      	ldr	r1, [sp, #12]
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	dcf2      	bgt.n	80075d2 <_printf_i+0x21e>
 80075ec:	e7eb      	b.n	80075c6 <_printf_i+0x212>
 80075ee:	2500      	movs	r5, #0
 80075f0:	f104 0619 	add.w	r6, r4, #25
 80075f4:	e7f5      	b.n	80075e2 <_printf_i+0x22e>
 80075f6:	bf00      	nop
 80075f8:	08009816 	.word	0x08009816
 80075fc:	08009827 	.word	0x08009827

08007600 <iprintf>:
 8007600:	b40f      	push	{r0, r1, r2, r3}
 8007602:	4b0a      	ldr	r3, [pc, #40]	; (800762c <iprintf+0x2c>)
 8007604:	b513      	push	{r0, r1, r4, lr}
 8007606:	681c      	ldr	r4, [r3, #0]
 8007608:	b124      	cbz	r4, 8007614 <iprintf+0x14>
 800760a:	69a3      	ldr	r3, [r4, #24]
 800760c:	b913      	cbnz	r3, 8007614 <iprintf+0x14>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fee0 	bl	80083d4 <__sinit>
 8007614:	ab05      	add	r3, sp, #20
 8007616:	9a04      	ldr	r2, [sp, #16]
 8007618:	68a1      	ldr	r1, [r4, #8]
 800761a:	9301      	str	r3, [sp, #4]
 800761c:	4620      	mov	r0, r4
 800761e:	f001 fc39 	bl	8008e94 <_vfiprintf_r>
 8007622:	b002      	add	sp, #8
 8007624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
 800762c:	2000000c 	.word	0x2000000c

08007630 <quorem>:
 8007630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	6903      	ldr	r3, [r0, #16]
 8007636:	690c      	ldr	r4, [r1, #16]
 8007638:	42a3      	cmp	r3, r4
 800763a:	4607      	mov	r7, r0
 800763c:	f2c0 8081 	blt.w	8007742 <quorem+0x112>
 8007640:	3c01      	subs	r4, #1
 8007642:	f101 0814 	add.w	r8, r1, #20
 8007646:	f100 0514 	add.w	r5, r0, #20
 800764a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007658:	3301      	adds	r3, #1
 800765a:	429a      	cmp	r2, r3
 800765c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007660:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007664:	fbb2 f6f3 	udiv	r6, r2, r3
 8007668:	d331      	bcc.n	80076ce <quorem+0x9e>
 800766a:	f04f 0e00 	mov.w	lr, #0
 800766e:	4640      	mov	r0, r8
 8007670:	46ac      	mov	ip, r5
 8007672:	46f2      	mov	sl, lr
 8007674:	f850 2b04 	ldr.w	r2, [r0], #4
 8007678:	b293      	uxth	r3, r2
 800767a:	fb06 e303 	mla	r3, r6, r3, lr
 800767e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007682:	b29b      	uxth	r3, r3
 8007684:	ebaa 0303 	sub.w	r3, sl, r3
 8007688:	f8dc a000 	ldr.w	sl, [ip]
 800768c:	0c12      	lsrs	r2, r2, #16
 800768e:	fa13 f38a 	uxtah	r3, r3, sl
 8007692:	fb06 e202 	mla	r2, r6, r2, lr
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9b00      	ldr	r3, [sp, #0]
 800769a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800769e:	b292      	uxth	r2, r2
 80076a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076ac:	4581      	cmp	r9, r0
 80076ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b2:	f84c 3b04 	str.w	r3, [ip], #4
 80076b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ba:	d2db      	bcs.n	8007674 <quorem+0x44>
 80076bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80076c0:	b92b      	cbnz	r3, 80076ce <quorem+0x9e>
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	429d      	cmp	r5, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	d32e      	bcc.n	800772a <quorem+0xfa>
 80076cc:	613c      	str	r4, [r7, #16]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f001 f9be 	bl	8008a50 <__mcmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	db24      	blt.n	8007722 <quorem+0xf2>
 80076d8:	3601      	adds	r6, #1
 80076da:	4628      	mov	r0, r5
 80076dc:	f04f 0c00 	mov.w	ip, #0
 80076e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e4:	f8d0 e000 	ldr.w	lr, [r0]
 80076e8:	b293      	uxth	r3, r2
 80076ea:	ebac 0303 	sub.w	r3, ip, r3
 80076ee:	0c12      	lsrs	r2, r2, #16
 80076f0:	fa13 f38e 	uxtah	r3, r3, lr
 80076f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007702:	45c1      	cmp	r9, r8
 8007704:	f840 3b04 	str.w	r3, [r0], #4
 8007708:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800770c:	d2e8      	bcs.n	80076e0 <quorem+0xb0>
 800770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007716:	b922      	cbnz	r2, 8007722 <quorem+0xf2>
 8007718:	3b04      	subs	r3, #4
 800771a:	429d      	cmp	r5, r3
 800771c:	461a      	mov	r2, r3
 800771e:	d30a      	bcc.n	8007736 <quorem+0x106>
 8007720:	613c      	str	r4, [r7, #16]
 8007722:	4630      	mov	r0, r6
 8007724:	b003      	add	sp, #12
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	3b04      	subs	r3, #4
 800772e:	2a00      	cmp	r2, #0
 8007730:	d1cc      	bne.n	80076cc <quorem+0x9c>
 8007732:	3c01      	subs	r4, #1
 8007734:	e7c7      	b.n	80076c6 <quorem+0x96>
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	3b04      	subs	r3, #4
 800773a:	2a00      	cmp	r2, #0
 800773c:	d1f0      	bne.n	8007720 <quorem+0xf0>
 800773e:	3c01      	subs	r4, #1
 8007740:	e7eb      	b.n	800771a <quorem+0xea>
 8007742:	2000      	movs	r0, #0
 8007744:	e7ee      	b.n	8007724 <quorem+0xf4>
	...

08007748 <_dtoa_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	ed2d 8b04 	vpush	{d8-d9}
 8007750:	ec57 6b10 	vmov	r6, r7, d0
 8007754:	b093      	sub	sp, #76	; 0x4c
 8007756:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007758:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800775c:	9106      	str	r1, [sp, #24]
 800775e:	ee10 aa10 	vmov	sl, s0
 8007762:	4604      	mov	r4, r0
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	930c      	str	r3, [sp, #48]	; 0x30
 8007768:	46bb      	mov	fp, r7
 800776a:	b975      	cbnz	r5, 800778a <_dtoa_r+0x42>
 800776c:	2010      	movs	r0, #16
 800776e:	f000 fed7 	bl	8008520 <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	6260      	str	r0, [r4, #36]	; 0x24
 8007776:	b920      	cbnz	r0, 8007782 <_dtoa_r+0x3a>
 8007778:	4ba7      	ldr	r3, [pc, #668]	; (8007a18 <_dtoa_r+0x2d0>)
 800777a:	21ea      	movs	r1, #234	; 0xea
 800777c:	48a7      	ldr	r0, [pc, #668]	; (8007a1c <_dtoa_r+0x2d4>)
 800777e:	f001 fddf 	bl	8009340 <__assert_func>
 8007782:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007786:	6005      	str	r5, [r0, #0]
 8007788:	60c5      	str	r5, [r0, #12]
 800778a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	b151      	cbz	r1, 80077a6 <_dtoa_r+0x5e>
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	604a      	str	r2, [r1, #4]
 8007794:	2301      	movs	r3, #1
 8007796:	4093      	lsls	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
 800779a:	4620      	mov	r0, r4
 800779c:	f000 ff16 	bl	80085cc <_Bfree>
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	1e3b      	subs	r3, r7, #0
 80077a8:	bfaa      	itet	ge
 80077aa:	2300      	movge	r3, #0
 80077ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077b0:	f8c8 3000 	strge.w	r3, [r8]
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <_dtoa_r+0x2d8>)
 80077b6:	bfbc      	itt	lt
 80077b8:	2201      	movlt	r2, #1
 80077ba:	f8c8 2000 	strlt.w	r2, [r8]
 80077be:	ea33 030b 	bics.w	r3, r3, fp
 80077c2:	d11b      	bne.n	80077fc <_dtoa_r+0xb4>
 80077c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d0:	4333      	orrs	r3, r6
 80077d2:	f000 8592 	beq.w	80082fa <_dtoa_r+0xbb2>
 80077d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d8:	b963      	cbnz	r3, 80077f4 <_dtoa_r+0xac>
 80077da:	4b92      	ldr	r3, [pc, #584]	; (8007a24 <_dtoa_r+0x2dc>)
 80077dc:	e022      	b.n	8007824 <_dtoa_r+0xdc>
 80077de:	4b92      	ldr	r3, [pc, #584]	; (8007a28 <_dtoa_r+0x2e0>)
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	3308      	adds	r3, #8
 80077e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	9801      	ldr	r0, [sp, #4]
 80077ea:	b013      	add	sp, #76	; 0x4c
 80077ec:	ecbd 8b04 	vpop	{d8-d9}
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	4b8b      	ldr	r3, [pc, #556]	; (8007a24 <_dtoa_r+0x2dc>)
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	3303      	adds	r3, #3
 80077fa:	e7f3      	b.n	80077e4 <_dtoa_r+0x9c>
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	f7f9 f980 	bl	8000b08 <__aeabi_dcmpeq>
 8007808:	ec4b ab19 	vmov	d9, sl, fp
 800780c:	4680      	mov	r8, r0
 800780e:	b158      	cbz	r0, 8007828 <_dtoa_r+0xe0>
 8007810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007812:	2301      	movs	r3, #1
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 856b 	beq.w	80082f4 <_dtoa_r+0xbac>
 800781e:	4883      	ldr	r0, [pc, #524]	; (8007a2c <_dtoa_r+0x2e4>)
 8007820:	6018      	str	r0, [r3, #0]
 8007822:	1e43      	subs	r3, r0, #1
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	e7df      	b.n	80077e8 <_dtoa_r+0xa0>
 8007828:	ec4b ab10 	vmov	d0, sl, fp
 800782c:	aa10      	add	r2, sp, #64	; 0x40
 800782e:	a911      	add	r1, sp, #68	; 0x44
 8007830:	4620      	mov	r0, r4
 8007832:	f001 f9b3 	bl	8008b9c <__d2b>
 8007836:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800783a:	ee08 0a10 	vmov	s16, r0
 800783e:	2d00      	cmp	r5, #0
 8007840:	f000 8084 	beq.w	800794c <_dtoa_r+0x204>
 8007844:	ee19 3a90 	vmov	r3, s19
 8007848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800784c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007850:	4656      	mov	r6, sl
 8007852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800785a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800785e:	4b74      	ldr	r3, [pc, #464]	; (8007a30 <_dtoa_r+0x2e8>)
 8007860:	2200      	movs	r2, #0
 8007862:	4630      	mov	r0, r6
 8007864:	4639      	mov	r1, r7
 8007866:	f7f8 fd2f 	bl	80002c8 <__aeabi_dsub>
 800786a:	a365      	add	r3, pc, #404	; (adr r3, 8007a00 <_dtoa_r+0x2b8>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fee2 	bl	8000638 <__aeabi_dmul>
 8007874:	a364      	add	r3, pc, #400	; (adr r3, 8007a08 <_dtoa_r+0x2c0>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 fd27 	bl	80002cc <__adddf3>
 800787e:	4606      	mov	r6, r0
 8007880:	4628      	mov	r0, r5
 8007882:	460f      	mov	r7, r1
 8007884:	f7f8 fe6e 	bl	8000564 <__aeabi_i2d>
 8007888:	a361      	add	r3, pc, #388	; (adr r3, 8007a10 <_dtoa_r+0x2c8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fed3 	bl	8000638 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fd17 	bl	80002cc <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	f7f9 f979 	bl	8000b98 <__aeabi_d2iz>
 80078a6:	2200      	movs	r2, #0
 80078a8:	9000      	str	r0, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f934 	bl	8000b1c <__aeabi_dcmplt>
 80078b4:	b150      	cbz	r0, 80078cc <_dtoa_r+0x184>
 80078b6:	9800      	ldr	r0, [sp, #0]
 80078b8:	f7f8 fe54 	bl	8000564 <__aeabi_i2d>
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	f7f9 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80078c4:	b910      	cbnz	r0, 80078cc <_dtoa_r+0x184>
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	9b00      	ldr	r3, [sp, #0]
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d85a      	bhi.n	8007988 <_dtoa_r+0x240>
 80078d2:	9a00      	ldr	r2, [sp, #0]
 80078d4:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <_dtoa_r+0x2ec>)
 80078d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	ec51 0b19 	vmov	r0, r1, d9
 80078e2:	f7f9 f91b 	bl	8000b1c <__aeabi_dcmplt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d050      	beq.n	800798c <_dtoa_r+0x244>
 80078ea:	9b00      	ldr	r3, [sp, #0]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f6:	1b5d      	subs	r5, r3, r5
 80078f8:	1e6b      	subs	r3, r5, #1
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	bf45      	ittet	mi
 80078fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007902:	9304      	strmi	r3, [sp, #16]
 8007904:	2300      	movpl	r3, #0
 8007906:	2300      	movmi	r3, #0
 8007908:	bf4c      	ite	mi
 800790a:	9305      	strmi	r3, [sp, #20]
 800790c:	9304      	strpl	r3, [sp, #16]
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db3d      	blt.n	8007990 <_dtoa_r+0x248>
 8007914:	9b05      	ldr	r3, [sp, #20]
 8007916:	9a00      	ldr	r2, [sp, #0]
 8007918:	920a      	str	r2, [sp, #40]	; 0x28
 800791a:	4413      	add	r3, r2
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	2300      	movs	r3, #0
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	2b09      	cmp	r3, #9
 8007926:	f200 8089 	bhi.w	8007a3c <_dtoa_r+0x2f4>
 800792a:	2b05      	cmp	r3, #5
 800792c:	bfc4      	itt	gt
 800792e:	3b04      	subgt	r3, #4
 8007930:	9306      	strgt	r3, [sp, #24]
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	f1a3 0302 	sub.w	r3, r3, #2
 8007938:	bfcc      	ite	gt
 800793a:	2500      	movgt	r5, #0
 800793c:	2501      	movle	r5, #1
 800793e:	2b03      	cmp	r3, #3
 8007940:	f200 8087 	bhi.w	8007a52 <_dtoa_r+0x30a>
 8007944:	e8df f003 	tbb	[pc, r3]
 8007948:	59383a2d 	.word	0x59383a2d
 800794c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007950:	441d      	add	r5, r3
 8007952:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007956:	2b20      	cmp	r3, #32
 8007958:	bfc1      	itttt	gt
 800795a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800795e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007962:	fa0b f303 	lslgt.w	r3, fp, r3
 8007966:	fa26 f000 	lsrgt.w	r0, r6, r0
 800796a:	bfda      	itte	le
 800796c:	f1c3 0320 	rsble	r3, r3, #32
 8007970:	fa06 f003 	lslle.w	r0, r6, r3
 8007974:	4318      	orrgt	r0, r3
 8007976:	f7f8 fde5 	bl	8000544 <__aeabi_ui2d>
 800797a:	2301      	movs	r3, #1
 800797c:	4606      	mov	r6, r0
 800797e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007982:	3d01      	subs	r5, #1
 8007984:	930e      	str	r3, [sp, #56]	; 0x38
 8007986:	e76a      	b.n	800785e <_dtoa_r+0x116>
 8007988:	2301      	movs	r3, #1
 800798a:	e7b2      	b.n	80078f2 <_dtoa_r+0x1aa>
 800798c:	900b      	str	r0, [sp, #44]	; 0x2c
 800798e:	e7b1      	b.n	80078f4 <_dtoa_r+0x1ac>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	9a00      	ldr	r2, [sp, #0]
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	4253      	negs	r3, r2
 800799a:	9307      	str	r3, [sp, #28]
 800799c:	2300      	movs	r3, #0
 800799e:	930a      	str	r3, [sp, #40]	; 0x28
 80079a0:	e7bf      	b.n	8007922 <_dtoa_r+0x1da>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc55      	bgt.n	8007a58 <_dtoa_r+0x310>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079b2:	461a      	mov	r2, r3
 80079b4:	9209      	str	r2, [sp, #36]	; 0x24
 80079b6:	e00c      	b.n	80079d2 <_dtoa_r+0x28a>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7f3      	b.n	80079a4 <_dtoa_r+0x25c>
 80079bc:	2300      	movs	r3, #0
 80079be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	9302      	str	r3, [sp, #8]
 80079c8:	3301      	adds	r3, #1
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	bfb8      	it	lt
 80079d0:	2301      	movlt	r3, #1
 80079d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079d4:	2200      	movs	r2, #0
 80079d6:	6042      	str	r2, [r0, #4]
 80079d8:	2204      	movs	r2, #4
 80079da:	f102 0614 	add.w	r6, r2, #20
 80079de:	429e      	cmp	r6, r3
 80079e0:	6841      	ldr	r1, [r0, #4]
 80079e2:	d93d      	bls.n	8007a60 <_dtoa_r+0x318>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fdb1 	bl	800854c <_Balloc>
 80079ea:	9001      	str	r0, [sp, #4]
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d13b      	bne.n	8007a68 <_dtoa_r+0x320>
 80079f0:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <_dtoa_r+0x2f0>)
 80079f2:	4602      	mov	r2, r0
 80079f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079f8:	e6c0      	b.n	800777c <_dtoa_r+0x34>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7df      	b.n	80079be <_dtoa_r+0x276>
 80079fe:	bf00      	nop
 8007a00:	636f4361 	.word	0x636f4361
 8007a04:	3fd287a7 	.word	0x3fd287a7
 8007a08:	8b60c8b3 	.word	0x8b60c8b3
 8007a0c:	3fc68a28 	.word	0x3fc68a28
 8007a10:	509f79fb 	.word	0x509f79fb
 8007a14:	3fd34413 	.word	0x3fd34413
 8007a18:	08009845 	.word	0x08009845
 8007a1c:	0800985c 	.word	0x0800985c
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	08009841 	.word	0x08009841
 8007a28:	08009838 	.word	0x08009838
 8007a2c:	08009815 	.word	0x08009815
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	080099b0 	.word	0x080099b0
 8007a38:	080098b7 	.word	0x080098b7
 8007a3c:	2501      	movs	r5, #1
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9306      	str	r3, [sp, #24]
 8007a42:	9508      	str	r5, [sp, #32]
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2312      	movs	r3, #18
 8007a50:	e7b0      	b.n	80079b4 <_dtoa_r+0x26c>
 8007a52:	2301      	movs	r3, #1
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	e7f5      	b.n	8007a44 <_dtoa_r+0x2fc>
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a5e:	e7b8      	b.n	80079d2 <_dtoa_r+0x28a>
 8007a60:	3101      	adds	r1, #1
 8007a62:	6041      	str	r1, [r0, #4]
 8007a64:	0052      	lsls	r2, r2, #1
 8007a66:	e7b8      	b.n	80079da <_dtoa_r+0x292>
 8007a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2b0e      	cmp	r3, #14
 8007a72:	f200 809d 	bhi.w	8007bb0 <_dtoa_r+0x468>
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	f000 809a 	beq.w	8007bb0 <_dtoa_r+0x468>
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd32      	ble.n	8007ae8 <_dtoa_r+0x3a0>
 8007a82:	4ab7      	ldr	r2, [pc, #732]	; (8007d60 <_dtoa_r+0x618>)
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	05d8      	lsls	r0, r3, #23
 8007a94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a98:	d516      	bpl.n	8007ac8 <_dtoa_r+0x380>
 8007a9a:	4bb2      	ldr	r3, [pc, #712]	; (8007d64 <_dtoa_r+0x61c>)
 8007a9c:	ec51 0b19 	vmov	r0, r1, d9
 8007aa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aa4:	f7f8 fef2 	bl	800088c <__aeabi_ddiv>
 8007aa8:	f007 070f 	and.w	r7, r7, #15
 8007aac:	4682      	mov	sl, r0
 8007aae:	468b      	mov	fp, r1
 8007ab0:	2503      	movs	r5, #3
 8007ab2:	4eac      	ldr	r6, [pc, #688]	; (8007d64 <_dtoa_r+0x61c>)
 8007ab4:	b957      	cbnz	r7, 8007acc <_dtoa_r+0x384>
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	464b      	mov	r3, r9
 8007aba:	4650      	mov	r0, sl
 8007abc:	4659      	mov	r1, fp
 8007abe:	f7f8 fee5 	bl	800088c <__aeabi_ddiv>
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	e028      	b.n	8007b1a <_dtoa_r+0x3d2>
 8007ac8:	2502      	movs	r5, #2
 8007aca:	e7f2      	b.n	8007ab2 <_dtoa_r+0x36a>
 8007acc:	07f9      	lsls	r1, r7, #31
 8007ace:	d508      	bpl.n	8007ae2 <_dtoa_r+0x39a>
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ad8:	f7f8 fdae 	bl	8000638 <__aeabi_dmul>
 8007adc:	3501      	adds	r5, #1
 8007ade:	4680      	mov	r8, r0
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	107f      	asrs	r7, r7, #1
 8007ae4:	3608      	adds	r6, #8
 8007ae6:	e7e5      	b.n	8007ab4 <_dtoa_r+0x36c>
 8007ae8:	f000 809b 	beq.w	8007c22 <_dtoa_r+0x4da>
 8007aec:	9b00      	ldr	r3, [sp, #0]
 8007aee:	4f9d      	ldr	r7, [pc, #628]	; (8007d64 <_dtoa_r+0x61c>)
 8007af0:	425e      	negs	r6, r3
 8007af2:	4b9b      	ldr	r3, [pc, #620]	; (8007d60 <_dtoa_r+0x618>)
 8007af4:	f006 020f 	and.w	r2, r6, #15
 8007af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	ec51 0b19 	vmov	r0, r1, d9
 8007b04:	f7f8 fd98 	bl	8000638 <__aeabi_dmul>
 8007b08:	1136      	asrs	r6, r6, #4
 8007b0a:	4682      	mov	sl, r0
 8007b0c:	468b      	mov	fp, r1
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2502      	movs	r5, #2
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	d17a      	bne.n	8007c0c <_dtoa_r+0x4c4>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1d3      	bne.n	8007ac2 <_dtoa_r+0x37a>
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8082 	beq.w	8007c26 <_dtoa_r+0x4de>
 8007b22:	4b91      	ldr	r3, [pc, #580]	; (8007d68 <_dtoa_r+0x620>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	4650      	mov	r0, sl
 8007b28:	4659      	mov	r1, fp
 8007b2a:	f7f8 fff7 	bl	8000b1c <__aeabi_dcmplt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d079      	beq.n	8007c26 <_dtoa_r+0x4de>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d076      	beq.n	8007c26 <_dtoa_r+0x4de>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dd36      	ble.n	8007bac <_dtoa_r+0x464>
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	1e5f      	subs	r7, r3, #1
 8007b46:	2200      	movs	r2, #0
 8007b48:	4b88      	ldr	r3, [pc, #544]	; (8007d6c <_dtoa_r+0x624>)
 8007b4a:	f7f8 fd75 	bl	8000638 <__aeabi_dmul>
 8007b4e:	9e02      	ldr	r6, [sp, #8]
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	3501      	adds	r5, #1
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7f8 fd04 	bl	8000564 <__aeabi_i2d>
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	465b      	mov	r3, fp
 8007b60:	f7f8 fd6a 	bl	8000638 <__aeabi_dmul>
 8007b64:	4b82      	ldr	r3, [pc, #520]	; (8007d70 <_dtoa_r+0x628>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7f8 fbb0 	bl	80002cc <__adddf3>
 8007b6c:	46d0      	mov	r8, sl
 8007b6e:	46d9      	mov	r9, fp
 8007b70:	4682      	mov	sl, r0
 8007b72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	d158      	bne.n	8007c2c <_dtoa_r+0x4e4>
 8007b7a:	4b7e      	ldr	r3, [pc, #504]	; (8007d74 <_dtoa_r+0x62c>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4640      	mov	r0, r8
 8007b80:	4649      	mov	r1, r9
 8007b82:	f7f8 fba1 	bl	80002c8 <__aeabi_dsub>
 8007b86:	4652      	mov	r2, sl
 8007b88:	465b      	mov	r3, fp
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4689      	mov	r9, r1
 8007b8e:	f7f8 ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	f040 8295 	bne.w	80080c2 <_dtoa_r+0x97a>
 8007b98:	4652      	mov	r2, sl
 8007b9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	f7f8 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f040 8289 	bne.w	80080be <_dtoa_r+0x976>
 8007bac:	ec5b ab19 	vmov	sl, fp, d9
 8007bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f2c0 8148 	blt.w	8007e48 <_dtoa_r+0x700>
 8007bb8:	9a00      	ldr	r2, [sp, #0]
 8007bba:	2a0e      	cmp	r2, #14
 8007bbc:	f300 8144 	bgt.w	8007e48 <_dtoa_r+0x700>
 8007bc0:	4b67      	ldr	r3, [pc, #412]	; (8007d60 <_dtoa_r+0x618>)
 8007bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f280 80d5 	bge.w	8007d7c <_dtoa_r+0x634>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f300 80d1 	bgt.w	8007d7c <_dtoa_r+0x634>
 8007bda:	f040 826f 	bne.w	80080bc <_dtoa_r+0x974>
 8007bde:	4b65      	ldr	r3, [pc, #404]	; (8007d74 <_dtoa_r+0x62c>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fd27 	bl	8000638 <__aeabi_dmul>
 8007bea:	4652      	mov	r2, sl
 8007bec:	465b      	mov	r3, fp
 8007bee:	f7f8 ffa9 	bl	8000b44 <__aeabi_dcmpge>
 8007bf2:	9e03      	ldr	r6, [sp, #12]
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f040 8245 	bne.w	8008086 <_dtoa_r+0x93e>
 8007bfc:	9d01      	ldr	r5, [sp, #4]
 8007bfe:	2331      	movs	r3, #49	; 0x31
 8007c00:	f805 3b01 	strb.w	r3, [r5], #1
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	e240      	b.n	800808e <_dtoa_r+0x946>
 8007c0c:	07f2      	lsls	r2, r6, #31
 8007c0e:	d505      	bpl.n	8007c1c <_dtoa_r+0x4d4>
 8007c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c14:	f7f8 fd10 	bl	8000638 <__aeabi_dmul>
 8007c18:	3501      	adds	r5, #1
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	1076      	asrs	r6, r6, #1
 8007c1e:	3708      	adds	r7, #8
 8007c20:	e777      	b.n	8007b12 <_dtoa_r+0x3ca>
 8007c22:	2502      	movs	r5, #2
 8007c24:	e779      	b.n	8007b1a <_dtoa_r+0x3d2>
 8007c26:	9f00      	ldr	r7, [sp, #0]
 8007c28:	9e03      	ldr	r6, [sp, #12]
 8007c2a:	e794      	b.n	8007b56 <_dtoa_r+0x40e>
 8007c2c:	9901      	ldr	r1, [sp, #4]
 8007c2e:	4b4c      	ldr	r3, [pc, #304]	; (8007d60 <_dtoa_r+0x618>)
 8007c30:	4431      	add	r1, r6
 8007c32:	910d      	str	r1, [sp, #52]	; 0x34
 8007c34:	9908      	ldr	r1, [sp, #32]
 8007c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d043      	beq.n	8007cca <_dtoa_r+0x582>
 8007c42:	494d      	ldr	r1, [pc, #308]	; (8007d78 <_dtoa_r+0x630>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fe21 	bl	800088c <__aeabi_ddiv>
 8007c4a:	4652      	mov	r2, sl
 8007c4c:	465b      	mov	r3, fp
 8007c4e:	f7f8 fb3b 	bl	80002c8 <__aeabi_dsub>
 8007c52:	9d01      	ldr	r5, [sp, #4]
 8007c54:	4682      	mov	sl, r0
 8007c56:	468b      	mov	fp, r1
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7f8 ff9c 	bl	8000b98 <__aeabi_d2iz>
 8007c60:	4606      	mov	r6, r0
 8007c62:	f7f8 fc7f 	bl	8000564 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f7f8 fb2b 	bl	80002c8 <__aeabi_dsub>
 8007c72:	3630      	adds	r6, #48	; 0x30
 8007c74:	f805 6b01 	strb.w	r6, [r5], #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	f7f8 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d163      	bne.n	8007d50 <_dtoa_r+0x608>
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	4936      	ldr	r1, [pc, #216]	; (8007d68 <_dtoa_r+0x620>)
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f7f8 fb1a 	bl	80002c8 <__aeabi_dsub>
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	f7f8 ff40 	bl	8000b1c <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f040 80b5 	bne.w	8007e0c <_dtoa_r+0x6c4>
 8007ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ca4:	429d      	cmp	r5, r3
 8007ca6:	d081      	beq.n	8007bac <_dtoa_r+0x464>
 8007ca8:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <_dtoa_r+0x624>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 fcc2 	bl	8000638 <__aeabi_dmul>
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <_dtoa_r+0x624>)
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	468b      	mov	fp, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	4689      	mov	r9, r1
 8007cc8:	e7c6      	b.n	8007c58 <_dtoa_r+0x510>
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fcb3 	bl	8000638 <__aeabi_dmul>
 8007cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd4:	9d01      	ldr	r5, [sp, #4]
 8007cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd8:	4682      	mov	sl, r0
 8007cda:	468b      	mov	fp, r1
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f7f8 ff5a 	bl	8000b98 <__aeabi_d2iz>
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	f7f8 fc3d 	bl	8000564 <__aeabi_i2d>
 8007cea:	3630      	adds	r6, #48	; 0x30
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	f7f8 fae8 	bl	80002c8 <__aeabi_dsub>
 8007cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8007cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	4680      	mov	r8, r0
 8007d02:	4689      	mov	r9, r1
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	d124      	bne.n	8007d54 <_dtoa_r+0x60c>
 8007d0a:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <_dtoa_r+0x630>)
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	4659      	mov	r1, fp
 8007d10:	f7f8 fadc 	bl	80002cc <__adddf3>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 ff1c 	bl	8000b58 <__aeabi_dcmpgt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d173      	bne.n	8007e0c <_dtoa_r+0x6c4>
 8007d24:	4652      	mov	r2, sl
 8007d26:	465b      	mov	r3, fp
 8007d28:	4913      	ldr	r1, [pc, #76]	; (8007d78 <_dtoa_r+0x630>)
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7f8 facc 	bl	80002c8 <__aeabi_dsub>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4640      	mov	r0, r8
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7f8 fef0 	bl	8000b1c <__aeabi_dcmplt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f43f af35 	beq.w	8007bac <_dtoa_r+0x464>
 8007d42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d44:	1e6b      	subs	r3, r5, #1
 8007d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d0f8      	beq.n	8007d42 <_dtoa_r+0x5fa>
 8007d50:	9700      	str	r7, [sp, #0]
 8007d52:	e049      	b.n	8007de8 <_dtoa_r+0x6a0>
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <_dtoa_r+0x624>)
 8007d56:	f7f8 fc6f 	bl	8000638 <__aeabi_dmul>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	e7bd      	b.n	8007cdc <_dtoa_r+0x594>
 8007d60:	080099b0 	.word	0x080099b0
 8007d64:	08009988 	.word	0x08009988
 8007d68:	3ff00000 	.word	0x3ff00000
 8007d6c:	40240000 	.word	0x40240000
 8007d70:	401c0000 	.word	0x401c0000
 8007d74:	40140000 	.word	0x40140000
 8007d78:	3fe00000 	.word	0x3fe00000
 8007d7c:	9d01      	ldr	r5, [sp, #4]
 8007d7e:	4656      	mov	r6, sl
 8007d80:	465f      	mov	r7, fp
 8007d82:	4642      	mov	r2, r8
 8007d84:	464b      	mov	r3, r9
 8007d86:	4630      	mov	r0, r6
 8007d88:	4639      	mov	r1, r7
 8007d8a:	f7f8 fd7f 	bl	800088c <__aeabi_ddiv>
 8007d8e:	f7f8 ff03 	bl	8000b98 <__aeabi_d2iz>
 8007d92:	4682      	mov	sl, r0
 8007d94:	f7f8 fbe6 	bl	8000564 <__aeabi_i2d>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	f7f8 fc4c 	bl	8000638 <__aeabi_dmul>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dac:	f7f8 fa8c 	bl	80002c8 <__aeabi_dsub>
 8007db0:	f805 6b01 	strb.w	r6, [r5], #1
 8007db4:	9e01      	ldr	r6, [sp, #4]
 8007db6:	9f03      	ldr	r7, [sp, #12]
 8007db8:	1bae      	subs	r6, r5, r6
 8007dba:	42b7      	cmp	r7, r6
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	d135      	bne.n	8007e2e <_dtoa_r+0x6e6>
 8007dc2:	f7f8 fa83 	bl	80002cc <__adddf3>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	f7f8 fec3 	bl	8000b58 <__aeabi_dcmpgt>
 8007dd2:	b9d0      	cbnz	r0, 8007e0a <_dtoa_r+0x6c2>
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8007de0:	b110      	cbz	r0, 8007de8 <_dtoa_r+0x6a0>
 8007de2:	f01a 0f01 	tst.w	sl, #1
 8007de6:	d110      	bne.n	8007e0a <_dtoa_r+0x6c2>
 8007de8:	4620      	mov	r0, r4
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	f000 fbed 	bl	80085cc <_Bfree>
 8007df2:	2300      	movs	r3, #0
 8007df4:	9800      	ldr	r0, [sp, #0]
 8007df6:	702b      	strb	r3, [r5, #0]
 8007df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	6018      	str	r0, [r3, #0]
 8007dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f43f acf1 	beq.w	80077e8 <_dtoa_r+0xa0>
 8007e06:	601d      	str	r5, [r3, #0]
 8007e08:	e4ee      	b.n	80077e8 <_dtoa_r+0xa0>
 8007e0a:	9f00      	ldr	r7, [sp, #0]
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	461d      	mov	r5, r3
 8007e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e14:	2a39      	cmp	r2, #57	; 0x39
 8007e16:	d106      	bne.n	8007e26 <_dtoa_r+0x6de>
 8007e18:	9a01      	ldr	r2, [sp, #4]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d1f7      	bne.n	8007e0e <_dtoa_r+0x6c6>
 8007e1e:	9901      	ldr	r1, [sp, #4]
 8007e20:	2230      	movs	r2, #48	; 0x30
 8007e22:	3701      	adds	r7, #1
 8007e24:	700a      	strb	r2, [r1, #0]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	3201      	adds	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e790      	b.n	8007d50 <_dtoa_r+0x608>
 8007e2e:	4ba6      	ldr	r3, [pc, #664]	; (80080c8 <_dtoa_r+0x980>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 fc01 	bl	8000638 <__aeabi_dmul>
 8007e36:	2200      	movs	r2, #0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460f      	mov	r7, r1
 8007e3e:	f7f8 fe63 	bl	8000b08 <__aeabi_dcmpeq>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d09d      	beq.n	8007d82 <_dtoa_r+0x63a>
 8007e46:	e7cf      	b.n	8007de8 <_dtoa_r+0x6a0>
 8007e48:	9a08      	ldr	r2, [sp, #32]
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	f000 80d7 	beq.w	8007ffe <_dtoa_r+0x8b6>
 8007e50:	9a06      	ldr	r2, [sp, #24]
 8007e52:	2a01      	cmp	r2, #1
 8007e54:	f300 80ba 	bgt.w	8007fcc <_dtoa_r+0x884>
 8007e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	f000 80b2 	beq.w	8007fc4 <_dtoa_r+0x87c>
 8007e60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e64:	9e07      	ldr	r6, [sp, #28]
 8007e66:	9d04      	ldr	r5, [sp, #16]
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	441a      	add	r2, r3
 8007e6c:	9204      	str	r2, [sp, #16]
 8007e6e:	9a05      	ldr	r2, [sp, #20]
 8007e70:	2101      	movs	r1, #1
 8007e72:	441a      	add	r2, r3
 8007e74:	4620      	mov	r0, r4
 8007e76:	9205      	str	r2, [sp, #20]
 8007e78:	f000 fc60 	bl	800873c <__i2b>
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	dd0c      	ble.n	8007e9c <_dtoa_r+0x754>
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd09      	ble.n	8007e9c <_dtoa_r+0x754>
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	9a04      	ldr	r2, [sp, #16]
 8007e8c:	bfa8      	it	ge
 8007e8e:	462b      	movge	r3, r5
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	9204      	str	r2, [sp, #16]
 8007e94:	9a05      	ldr	r2, [sp, #20]
 8007e96:	1aed      	subs	r5, r5, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	b31b      	cbz	r3, 8007ee8 <_dtoa_r+0x7a0>
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80af 	beq.w	8008006 <_dtoa_r+0x8be>
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	dd13      	ble.n	8007ed4 <_dtoa_r+0x78c>
 8007eac:	4639      	mov	r1, r7
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 fd03 	bl	80088bc <__pow5mult>
 8007eb6:	ee18 2a10 	vmov	r2, s16
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fc52 	bl	8008768 <__multiply>
 8007ec4:	ee18 1a10 	vmov	r1, s16
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 fb7e 	bl	80085cc <_Bfree>
 8007ed0:	ee08 8a10 	vmov	s16, r8
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	1b9a      	subs	r2, r3, r6
 8007ed8:	d006      	beq.n	8007ee8 <_dtoa_r+0x7a0>
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fcec 	bl	80088bc <__pow5mult>
 8007ee4:	ee08 0a10 	vmov	s16, r0
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fc26 	bl	800873c <__i2b>
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	f340 8088 	ble.w	800800a <_dtoa_r+0x8c2>
 8007efa:	461a      	mov	r2, r3
 8007efc:	4601      	mov	r1, r0
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fcdc 	bl	80088bc <__pow5mult>
 8007f04:	9b06      	ldr	r3, [sp, #24]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	4606      	mov	r6, r0
 8007f0a:	f340 8081 	ble.w	8008010 <_dtoa_r+0x8c8>
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	6933      	ldr	r3, [r6, #16]
 8007f14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f18:	6918      	ldr	r0, [r3, #16]
 8007f1a:	f000 fbbf 	bl	800869c <__hi0bits>
 8007f1e:	f1c0 0020 	rsb	r0, r0, #32
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	4418      	add	r0, r3
 8007f26:	f010 001f 	ands.w	r0, r0, #31
 8007f2a:	f000 8092 	beq.w	8008052 <_dtoa_r+0x90a>
 8007f2e:	f1c0 0320 	rsb	r3, r0, #32
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	f340 808a 	ble.w	800804c <_dtoa_r+0x904>
 8007f38:	f1c0 001c 	rsb	r0, r0, #28
 8007f3c:	9b04      	ldr	r3, [sp, #16]
 8007f3e:	4403      	add	r3, r0
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	4403      	add	r3, r0
 8007f46:	4405      	add	r5, r0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd07      	ble.n	8007f60 <_dtoa_r+0x818>
 8007f50:	ee18 1a10 	vmov	r1, s16
 8007f54:	461a      	mov	r2, r3
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fd0a 	bl	8008970 <__lshift>
 8007f5c:	ee08 0a10 	vmov	s16, r0
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x82a>
 8007f66:	4631      	mov	r1, r6
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fd00 	bl	8008970 <__lshift>
 8007f70:	4606      	mov	r6, r0
 8007f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d06e      	beq.n	8008056 <_dtoa_r+0x90e>
 8007f78:	ee18 0a10 	vmov	r0, s16
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	f000 fd67 	bl	8008a50 <__mcmp>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	da67      	bge.n	8008056 <_dtoa_r+0x90e>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	ee18 1a10 	vmov	r1, s16
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	220a      	movs	r2, #10
 8007f92:	2300      	movs	r3, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fb3b 	bl	8008610 <__multadd>
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	ee08 0a10 	vmov	s16, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 81b1 	beq.w	8008308 <_dtoa_r+0xbc0>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4639      	mov	r1, r7
 8007faa:	220a      	movs	r2, #10
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fb2f 	bl	8008610 <__multadd>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	f300 808e 	bgt.w	80080d8 <_dtoa_r+0x990>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dc51      	bgt.n	8008066 <_dtoa_r+0x91e>
 8007fc2:	e089      	b.n	80080d8 <_dtoa_r+0x990>
 8007fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fca:	e74b      	b.n	8007e64 <_dtoa_r+0x71c>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	1e5e      	subs	r6, r3, #1
 8007fd0:	9b07      	ldr	r3, [sp, #28]
 8007fd2:	42b3      	cmp	r3, r6
 8007fd4:	bfbf      	itttt	lt
 8007fd6:	9b07      	ldrlt	r3, [sp, #28]
 8007fd8:	9607      	strlt	r6, [sp, #28]
 8007fda:	1af2      	sublt	r2, r6, r3
 8007fdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fde:	bfb6      	itet	lt
 8007fe0:	189b      	addlt	r3, r3, r2
 8007fe2:	1b9e      	subge	r6, r3, r6
 8007fe4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	bfb8      	it	lt
 8007fea:	2600      	movlt	r6, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb7      	itett	lt
 8007ff0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ff4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ff8:	1a9d      	sublt	r5, r3, r2
 8007ffa:	2300      	movlt	r3, #0
 8007ffc:	e734      	b.n	8007e68 <_dtoa_r+0x720>
 8007ffe:	9e07      	ldr	r6, [sp, #28]
 8008000:	9d04      	ldr	r5, [sp, #16]
 8008002:	9f08      	ldr	r7, [sp, #32]
 8008004:	e73b      	b.n	8007e7e <_dtoa_r+0x736>
 8008006:	9a07      	ldr	r2, [sp, #28]
 8008008:	e767      	b.n	8007eda <_dtoa_r+0x792>
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b01      	cmp	r3, #1
 800800e:	dc18      	bgt.n	8008042 <_dtoa_r+0x8fa>
 8008010:	f1ba 0f00 	cmp.w	sl, #0
 8008014:	d115      	bne.n	8008042 <_dtoa_r+0x8fa>
 8008016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800801a:	b993      	cbnz	r3, 8008042 <_dtoa_r+0x8fa>
 800801c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008020:	0d1b      	lsrs	r3, r3, #20
 8008022:	051b      	lsls	r3, r3, #20
 8008024:	b183      	cbz	r3, 8008048 <_dtoa_r+0x900>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	9b05      	ldr	r3, [sp, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	f04f 0801 	mov.w	r8, #1
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f af6a 	bne.w	8007f12 <_dtoa_r+0x7ca>
 800803e:	2001      	movs	r0, #1
 8008040:	e76f      	b.n	8007f22 <_dtoa_r+0x7da>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	e7f6      	b.n	8008036 <_dtoa_r+0x8ee>
 8008048:	4698      	mov	r8, r3
 800804a:	e7f4      	b.n	8008036 <_dtoa_r+0x8ee>
 800804c:	f43f af7d 	beq.w	8007f4a <_dtoa_r+0x802>
 8008050:	4618      	mov	r0, r3
 8008052:	301c      	adds	r0, #28
 8008054:	e772      	b.n	8007f3c <_dtoa_r+0x7f4>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	dc37      	bgt.n	80080cc <_dtoa_r+0x984>
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	2b02      	cmp	r3, #2
 8008060:	dd34      	ble.n	80080cc <_dtoa_r+0x984>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	9b02      	ldr	r3, [sp, #8]
 8008068:	b96b      	cbnz	r3, 8008086 <_dtoa_r+0x93e>
 800806a:	4631      	mov	r1, r6
 800806c:	2205      	movs	r2, #5
 800806e:	4620      	mov	r0, r4
 8008070:	f000 face 	bl	8008610 <__multadd>
 8008074:	4601      	mov	r1, r0
 8008076:	4606      	mov	r6, r0
 8008078:	ee18 0a10 	vmov	r0, s16
 800807c:	f000 fce8 	bl	8008a50 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	f73f adbb 	bgt.w	8007bfc <_dtoa_r+0x4b4>
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	9d01      	ldr	r5, [sp, #4]
 800808a:	43db      	mvns	r3, r3
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	4631      	mov	r1, r6
 8008094:	4620      	mov	r0, r4
 8008096:	f000 fa99 	bl	80085cc <_Bfree>
 800809a:	2f00      	cmp	r7, #0
 800809c:	f43f aea4 	beq.w	8007de8 <_dtoa_r+0x6a0>
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	d005      	beq.n	80080b2 <_dtoa_r+0x96a>
 80080a6:	45b8      	cmp	r8, r7
 80080a8:	d003      	beq.n	80080b2 <_dtoa_r+0x96a>
 80080aa:	4641      	mov	r1, r8
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fa8d 	bl	80085cc <_Bfree>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fa89 	bl	80085cc <_Bfree>
 80080ba:	e695      	b.n	8007de8 <_dtoa_r+0x6a0>
 80080bc:	2600      	movs	r6, #0
 80080be:	4637      	mov	r7, r6
 80080c0:	e7e1      	b.n	8008086 <_dtoa_r+0x93e>
 80080c2:	9700      	str	r7, [sp, #0]
 80080c4:	4637      	mov	r7, r6
 80080c6:	e599      	b.n	8007bfc <_dtoa_r+0x4b4>
 80080c8:	40240000 	.word	0x40240000
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80ca 	beq.w	8008268 <_dtoa_r+0xb20>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	2d00      	cmp	r5, #0
 80080da:	dd05      	ble.n	80080e8 <_dtoa_r+0x9a0>
 80080dc:	4639      	mov	r1, r7
 80080de:	462a      	mov	r2, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 fc45 	bl	8008970 <__lshift>
 80080e6:	4607      	mov	r7, r0
 80080e8:	f1b8 0f00 	cmp.w	r8, #0
 80080ec:	d05b      	beq.n	80081a6 <_dtoa_r+0xa5e>
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fa2b 	bl	800854c <_Balloc>
 80080f6:	4605      	mov	r5, r0
 80080f8:	b928      	cbnz	r0, 8008106 <_dtoa_r+0x9be>
 80080fa:	4b87      	ldr	r3, [pc, #540]	; (8008318 <_dtoa_r+0xbd0>)
 80080fc:	4602      	mov	r2, r0
 80080fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008102:	f7ff bb3b 	b.w	800777c <_dtoa_r+0x34>
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	3202      	adds	r2, #2
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	f107 010c 	add.w	r1, r7, #12
 8008110:	300c      	adds	r0, #12
 8008112:	f000 fa0d 	bl	8008530 <memcpy>
 8008116:	2201      	movs	r2, #1
 8008118:	4629      	mov	r1, r5
 800811a:	4620      	mov	r0, r4
 800811c:	f000 fc28 	bl	8008970 <__lshift>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	f103 0901 	add.w	r9, r3, #1
 8008126:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800812a:	4413      	add	r3, r2
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	f00a 0301 	and.w	r3, sl, #1
 8008132:	46b8      	mov	r8, r7
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	4607      	mov	r7, r0
 8008138:	4631      	mov	r1, r6
 800813a:	ee18 0a10 	vmov	r0, s16
 800813e:	f7ff fa77 	bl	8007630 <quorem>
 8008142:	4641      	mov	r1, r8
 8008144:	9002      	str	r0, [sp, #8]
 8008146:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800814a:	ee18 0a10 	vmov	r0, s16
 800814e:	f000 fc7f 	bl	8008a50 <__mcmp>
 8008152:	463a      	mov	r2, r7
 8008154:	9003      	str	r0, [sp, #12]
 8008156:	4631      	mov	r1, r6
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fc95 	bl	8008a88 <__mdiff>
 800815e:	68c2      	ldr	r2, [r0, #12]
 8008160:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008164:	4605      	mov	r5, r0
 8008166:	bb02      	cbnz	r2, 80081aa <_dtoa_r+0xa62>
 8008168:	4601      	mov	r1, r0
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f000 fc6f 	bl	8008a50 <__mcmp>
 8008172:	4602      	mov	r2, r0
 8008174:	4629      	mov	r1, r5
 8008176:	4620      	mov	r0, r4
 8008178:	9207      	str	r2, [sp, #28]
 800817a:	f000 fa27 	bl	80085cc <_Bfree>
 800817e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008182:	ea43 0102 	orr.w	r1, r3, r2
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	430b      	orrs	r3, r1
 800818a:	464d      	mov	r5, r9
 800818c:	d10f      	bne.n	80081ae <_dtoa_r+0xa66>
 800818e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008192:	d02a      	beq.n	80081ea <_dtoa_r+0xaa2>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd02      	ble.n	80081a0 <_dtoa_r+0xa58>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081a0:	f88b a000 	strb.w	sl, [fp]
 80081a4:	e775      	b.n	8008092 <_dtoa_r+0x94a>
 80081a6:	4638      	mov	r0, r7
 80081a8:	e7ba      	b.n	8008120 <_dtoa_r+0x9d8>
 80081aa:	2201      	movs	r2, #1
 80081ac:	e7e2      	b.n	8008174 <_dtoa_r+0xa2c>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db04      	blt.n	80081be <_dtoa_r+0xa76>
 80081b4:	9906      	ldr	r1, [sp, #24]
 80081b6:	430b      	orrs	r3, r1
 80081b8:	9904      	ldr	r1, [sp, #16]
 80081ba:	430b      	orrs	r3, r1
 80081bc:	d122      	bne.n	8008204 <_dtoa_r+0xabc>
 80081be:	2a00      	cmp	r2, #0
 80081c0:	ddee      	ble.n	80081a0 <_dtoa_r+0xa58>
 80081c2:	ee18 1a10 	vmov	r1, s16
 80081c6:	2201      	movs	r2, #1
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 fbd1 	bl	8008970 <__lshift>
 80081ce:	4631      	mov	r1, r6
 80081d0:	ee08 0a10 	vmov	s16, r0
 80081d4:	f000 fc3c 	bl	8008a50 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dc03      	bgt.n	80081e4 <_dtoa_r+0xa9c>
 80081dc:	d1e0      	bne.n	80081a0 <_dtoa_r+0xa58>
 80081de:	f01a 0f01 	tst.w	sl, #1
 80081e2:	d0dd      	beq.n	80081a0 <_dtoa_r+0xa58>
 80081e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081e8:	d1d7      	bne.n	800819a <_dtoa_r+0xa52>
 80081ea:	2339      	movs	r3, #57	; 0x39
 80081ec:	f88b 3000 	strb.w	r3, [fp]
 80081f0:	462b      	mov	r3, r5
 80081f2:	461d      	mov	r5, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081fa:	2a39      	cmp	r2, #57	; 0x39
 80081fc:	d071      	beq.n	80082e2 <_dtoa_r+0xb9a>
 80081fe:	3201      	adds	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e746      	b.n	8008092 <_dtoa_r+0x94a>
 8008204:	2a00      	cmp	r2, #0
 8008206:	dd07      	ble.n	8008218 <_dtoa_r+0xad0>
 8008208:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800820c:	d0ed      	beq.n	80081ea <_dtoa_r+0xaa2>
 800820e:	f10a 0301 	add.w	r3, sl, #1
 8008212:	f88b 3000 	strb.w	r3, [fp]
 8008216:	e73c      	b.n	8008092 <_dtoa_r+0x94a>
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800821e:	4599      	cmp	r9, r3
 8008220:	d047      	beq.n	80082b2 <_dtoa_r+0xb6a>
 8008222:	ee18 1a10 	vmov	r1, s16
 8008226:	2300      	movs	r3, #0
 8008228:	220a      	movs	r2, #10
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f9f0 	bl	8008610 <__multadd>
 8008230:	45b8      	cmp	r8, r7
 8008232:	ee08 0a10 	vmov	s16, r0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	f04f 020a 	mov.w	r2, #10
 800823e:	4641      	mov	r1, r8
 8008240:	4620      	mov	r0, r4
 8008242:	d106      	bne.n	8008252 <_dtoa_r+0xb0a>
 8008244:	f000 f9e4 	bl	8008610 <__multadd>
 8008248:	4680      	mov	r8, r0
 800824a:	4607      	mov	r7, r0
 800824c:	f109 0901 	add.w	r9, r9, #1
 8008250:	e772      	b.n	8008138 <_dtoa_r+0x9f0>
 8008252:	f000 f9dd 	bl	8008610 <__multadd>
 8008256:	4639      	mov	r1, r7
 8008258:	4680      	mov	r8, r0
 800825a:	2300      	movs	r3, #0
 800825c:	220a      	movs	r2, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f9d6 	bl	8008610 <__multadd>
 8008264:	4607      	mov	r7, r0
 8008266:	e7f1      	b.n	800824c <_dtoa_r+0xb04>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	9d01      	ldr	r5, [sp, #4]
 800826e:	ee18 0a10 	vmov	r0, s16
 8008272:	4631      	mov	r1, r6
 8008274:	f7ff f9dc 	bl	8007630 <quorem>
 8008278:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	f805 ab01 	strb.w	sl, [r5], #1
 8008282:	1aea      	subs	r2, r5, r3
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	4293      	cmp	r3, r2
 8008288:	dd09      	ble.n	800829e <_dtoa_r+0xb56>
 800828a:	ee18 1a10 	vmov	r1, s16
 800828e:	2300      	movs	r3, #0
 8008290:	220a      	movs	r2, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f9bc 	bl	8008610 <__multadd>
 8008298:	ee08 0a10 	vmov	s16, r0
 800829c:	e7e7      	b.n	800826e <_dtoa_r+0xb26>
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfc8      	it	gt
 80082a4:	461d      	movgt	r5, r3
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	bfd8      	it	le
 80082aa:	2501      	movle	r5, #1
 80082ac:	441d      	add	r5, r3
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	ee18 1a10 	vmov	r1, s16
 80082b6:	2201      	movs	r2, #1
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fb59 	bl	8008970 <__lshift>
 80082be:	4631      	mov	r1, r6
 80082c0:	ee08 0a10 	vmov	s16, r0
 80082c4:	f000 fbc4 	bl	8008a50 <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dc91      	bgt.n	80081f0 <_dtoa_r+0xaa8>
 80082cc:	d102      	bne.n	80082d4 <_dtoa_r+0xb8c>
 80082ce:	f01a 0f01 	tst.w	sl, #1
 80082d2:	d18d      	bne.n	80081f0 <_dtoa_r+0xaa8>
 80082d4:	462b      	mov	r3, r5
 80082d6:	461d      	mov	r5, r3
 80082d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082dc:	2a30      	cmp	r2, #48	; 0x30
 80082de:	d0fa      	beq.n	80082d6 <_dtoa_r+0xb8e>
 80082e0:	e6d7      	b.n	8008092 <_dtoa_r+0x94a>
 80082e2:	9a01      	ldr	r2, [sp, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d184      	bne.n	80081f2 <_dtoa_r+0xaaa>
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	2331      	movs	r3, #49	; 0x31
 80082f0:	7013      	strb	r3, [r2, #0]
 80082f2:	e6ce      	b.n	8008092 <_dtoa_r+0x94a>
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <_dtoa_r+0xbd4>)
 80082f6:	f7ff ba95 	b.w	8007824 <_dtoa_r+0xdc>
 80082fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aa6e 	bne.w	80077de <_dtoa_r+0x96>
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <_dtoa_r+0xbd8>)
 8008304:	f7ff ba8e 	b.w	8007824 <_dtoa_r+0xdc>
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dcae      	bgt.n	800826c <_dtoa_r+0xb24>
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	2b02      	cmp	r3, #2
 8008312:	f73f aea8 	bgt.w	8008066 <_dtoa_r+0x91e>
 8008316:	e7a9      	b.n	800826c <_dtoa_r+0xb24>
 8008318:	080098b7 	.word	0x080098b7
 800831c:	08009814 	.word	0x08009814
 8008320:	08009838 	.word	0x08009838

08008324 <std>:
 8008324:	2300      	movs	r3, #0
 8008326:	b510      	push	{r4, lr}
 8008328:	4604      	mov	r4, r0
 800832a:	e9c0 3300 	strd	r3, r3, [r0]
 800832e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008332:	6083      	str	r3, [r0, #8]
 8008334:	8181      	strh	r1, [r0, #12]
 8008336:	6643      	str	r3, [r0, #100]	; 0x64
 8008338:	81c2      	strh	r2, [r0, #14]
 800833a:	6183      	str	r3, [r0, #24]
 800833c:	4619      	mov	r1, r3
 800833e:	2208      	movs	r2, #8
 8008340:	305c      	adds	r0, #92	; 0x5c
 8008342:	f7fe fceb 	bl	8006d1c <memset>
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <std+0x38>)
 8008348:	6263      	str	r3, [r4, #36]	; 0x24
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <std+0x3c>)
 800834c:	62a3      	str	r3, [r4, #40]	; 0x28
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <std+0x40>)
 8008350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <std+0x44>)
 8008354:	6224      	str	r4, [r4, #32]
 8008356:	6323      	str	r3, [r4, #48]	; 0x30
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08009115 	.word	0x08009115
 8008360:	08009137 	.word	0x08009137
 8008364:	0800916f 	.word	0x0800916f
 8008368:	08009193 	.word	0x08009193

0800836c <_cleanup_r>:
 800836c:	4901      	ldr	r1, [pc, #4]	; (8008374 <_cleanup_r+0x8>)
 800836e:	f000 b8af 	b.w	80084d0 <_fwalk_reent>
 8008372:	bf00      	nop
 8008374:	080094a9 	.word	0x080094a9

08008378 <__sfmoreglue>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	2268      	movs	r2, #104	; 0x68
 800837c:	1e4d      	subs	r5, r1, #1
 800837e:	4355      	muls	r5, r2
 8008380:	460e      	mov	r6, r1
 8008382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008386:	f000 fce7 	bl	8008d58 <_malloc_r>
 800838a:	4604      	mov	r4, r0
 800838c:	b140      	cbz	r0, 80083a0 <__sfmoreglue+0x28>
 800838e:	2100      	movs	r1, #0
 8008390:	e9c0 1600 	strd	r1, r6, [r0]
 8008394:	300c      	adds	r0, #12
 8008396:	60a0      	str	r0, [r4, #8]
 8008398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800839c:	f7fe fcbe 	bl	8006d1c <memset>
 80083a0:	4620      	mov	r0, r4
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <__sfp_lock_acquire>:
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <__sfp_lock_acquire+0x8>)
 80083a6:	f000 b8b8 	b.w	800851a <__retarget_lock_acquire_recursive>
 80083aa:	bf00      	nop
 80083ac:	2000064d 	.word	0x2000064d

080083b0 <__sfp_lock_release>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__sfp_lock_release+0x8>)
 80083b2:	f000 b8b3 	b.w	800851c <__retarget_lock_release_recursive>
 80083b6:	bf00      	nop
 80083b8:	2000064d 	.word	0x2000064d

080083bc <__sinit_lock_acquire>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__sinit_lock_acquire+0x8>)
 80083be:	f000 b8ac 	b.w	800851a <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	2000064e 	.word	0x2000064e

080083c8 <__sinit_lock_release>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__sinit_lock_release+0x8>)
 80083ca:	f000 b8a7 	b.w	800851c <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	2000064e 	.word	0x2000064e

080083d4 <__sinit>:
 80083d4:	b510      	push	{r4, lr}
 80083d6:	4604      	mov	r4, r0
 80083d8:	f7ff fff0 	bl	80083bc <__sinit_lock_acquire>
 80083dc:	69a3      	ldr	r3, [r4, #24]
 80083de:	b11b      	cbz	r3, 80083e8 <__sinit+0x14>
 80083e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e4:	f7ff bff0 	b.w	80083c8 <__sinit_lock_release>
 80083e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083ec:	6523      	str	r3, [r4, #80]	; 0x50
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <__sinit+0x68>)
 80083f0:	4a13      	ldr	r2, [pc, #76]	; (8008440 <__sinit+0x6c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	bf04      	itt	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	61a3      	streq	r3, [r4, #24]
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f820 	bl	8008444 <__sfp>
 8008404:	6060      	str	r0, [r4, #4]
 8008406:	4620      	mov	r0, r4
 8008408:	f000 f81c 	bl	8008444 <__sfp>
 800840c:	60a0      	str	r0, [r4, #8]
 800840e:	4620      	mov	r0, r4
 8008410:	f000 f818 	bl	8008444 <__sfp>
 8008414:	2200      	movs	r2, #0
 8008416:	60e0      	str	r0, [r4, #12]
 8008418:	2104      	movs	r1, #4
 800841a:	6860      	ldr	r0, [r4, #4]
 800841c:	f7ff ff82 	bl	8008324 <std>
 8008420:	68a0      	ldr	r0, [r4, #8]
 8008422:	2201      	movs	r2, #1
 8008424:	2109      	movs	r1, #9
 8008426:	f7ff ff7d 	bl	8008324 <std>
 800842a:	68e0      	ldr	r0, [r4, #12]
 800842c:	2202      	movs	r2, #2
 800842e:	2112      	movs	r1, #18
 8008430:	f7ff ff78 	bl	8008324 <std>
 8008434:	2301      	movs	r3, #1
 8008436:	61a3      	str	r3, [r4, #24]
 8008438:	e7d2      	b.n	80083e0 <__sinit+0xc>
 800843a:	bf00      	nop
 800843c:	08009800 	.word	0x08009800
 8008440:	0800836d 	.word	0x0800836d

08008444 <__sfp>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	4607      	mov	r7, r0
 8008448:	f7ff ffac 	bl	80083a4 <__sfp_lock_acquire>
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <__sfp+0x84>)
 800844e:	681e      	ldr	r6, [r3, #0]
 8008450:	69b3      	ldr	r3, [r6, #24]
 8008452:	b913      	cbnz	r3, 800845a <__sfp+0x16>
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff ffbd 	bl	80083d4 <__sinit>
 800845a:	3648      	adds	r6, #72	; 0x48
 800845c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008460:	3b01      	subs	r3, #1
 8008462:	d503      	bpl.n	800846c <__sfp+0x28>
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	b30b      	cbz	r3, 80084ac <__sfp+0x68>
 8008468:	6836      	ldr	r6, [r6, #0]
 800846a:	e7f7      	b.n	800845c <__sfp+0x18>
 800846c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008470:	b9d5      	cbnz	r5, 80084a8 <__sfp+0x64>
 8008472:	4b16      	ldr	r3, [pc, #88]	; (80084cc <__sfp+0x88>)
 8008474:	60e3      	str	r3, [r4, #12]
 8008476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800847a:	6665      	str	r5, [r4, #100]	; 0x64
 800847c:	f000 f84c 	bl	8008518 <__retarget_lock_init_recursive>
 8008480:	f7ff ff96 	bl	80083b0 <__sfp_lock_release>
 8008484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800848c:	6025      	str	r5, [r4, #0]
 800848e:	61a5      	str	r5, [r4, #24]
 8008490:	2208      	movs	r2, #8
 8008492:	4629      	mov	r1, r5
 8008494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008498:	f7fe fc40 	bl	8006d1c <memset>
 800849c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084a4:	4620      	mov	r0, r4
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a8:	3468      	adds	r4, #104	; 0x68
 80084aa:	e7d9      	b.n	8008460 <__sfp+0x1c>
 80084ac:	2104      	movs	r1, #4
 80084ae:	4638      	mov	r0, r7
 80084b0:	f7ff ff62 	bl	8008378 <__sfmoreglue>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6030      	str	r0, [r6, #0]
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1d5      	bne.n	8008468 <__sfp+0x24>
 80084bc:	f7ff ff78 	bl	80083b0 <__sfp_lock_release>
 80084c0:	230c      	movs	r3, #12
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	e7ee      	b.n	80084a4 <__sfp+0x60>
 80084c6:	bf00      	nop
 80084c8:	08009800 	.word	0x08009800
 80084cc:	ffff0001 	.word	0xffff0001

080084d0 <_fwalk_reent>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4606      	mov	r6, r0
 80084d6:	4688      	mov	r8, r1
 80084d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084dc:	2700      	movs	r7, #0
 80084de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084e2:	f1b9 0901 	subs.w	r9, r9, #1
 80084e6:	d505      	bpl.n	80084f4 <_fwalk_reent+0x24>
 80084e8:	6824      	ldr	r4, [r4, #0]
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	d1f7      	bne.n	80084de <_fwalk_reent+0xe>
 80084ee:	4638      	mov	r0, r7
 80084f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f4:	89ab      	ldrh	r3, [r5, #12]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d907      	bls.n	800850a <_fwalk_reent+0x3a>
 80084fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fe:	3301      	adds	r3, #1
 8008500:	d003      	beq.n	800850a <_fwalk_reent+0x3a>
 8008502:	4629      	mov	r1, r5
 8008504:	4630      	mov	r0, r6
 8008506:	47c0      	blx	r8
 8008508:	4307      	orrs	r7, r0
 800850a:	3568      	adds	r5, #104	; 0x68
 800850c:	e7e9      	b.n	80084e2 <_fwalk_reent+0x12>
	...

08008510 <_localeconv_r>:
 8008510:	4800      	ldr	r0, [pc, #0]	; (8008514 <_localeconv_r+0x4>)
 8008512:	4770      	bx	lr
 8008514:	20000160 	.word	0x20000160

08008518 <__retarget_lock_init_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_acquire_recursive>:
 800851a:	4770      	bx	lr

0800851c <__retarget_lock_release_recursive>:
 800851c:	4770      	bx	lr
	...

08008520 <malloc>:
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <malloc+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f000 bc17 	b.w	8008d58 <_malloc_r>
 800852a:	bf00      	nop
 800852c:	2000000c 	.word	0x2000000c

08008530 <memcpy>:
 8008530:	440a      	add	r2, r1
 8008532:	4291      	cmp	r1, r2
 8008534:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008538:	d100      	bne.n	800853c <memcpy+0xc>
 800853a:	4770      	bx	lr
 800853c:	b510      	push	{r4, lr}
 800853e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008546:	4291      	cmp	r1, r2
 8008548:	d1f9      	bne.n	800853e <memcpy+0xe>
 800854a:	bd10      	pop	{r4, pc}

0800854c <_Balloc>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b976      	cbnz	r6, 8008574 <_Balloc+0x28>
 8008556:	2010      	movs	r0, #16
 8008558:	f7ff ffe2 	bl	8008520 <malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	6260      	str	r0, [r4, #36]	; 0x24
 8008560:	b920      	cbnz	r0, 800856c <_Balloc+0x20>
 8008562:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <_Balloc+0x78>)
 8008564:	4818      	ldr	r0, [pc, #96]	; (80085c8 <_Balloc+0x7c>)
 8008566:	2166      	movs	r1, #102	; 0x66
 8008568:	f000 feea 	bl	8009340 <__assert_func>
 800856c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008570:	6006      	str	r6, [r0, #0]
 8008572:	60c6      	str	r6, [r0, #12]
 8008574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008576:	68f3      	ldr	r3, [r6, #12]
 8008578:	b183      	cbz	r3, 800859c <_Balloc+0x50>
 800857a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008582:	b9b8      	cbnz	r0, 80085b4 <_Balloc+0x68>
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f605 	lsl.w	r6, r1, r5
 800858a:	1d72      	adds	r2, r6, #5
 800858c:	0092      	lsls	r2, r2, #2
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fb60 	bl	8008c54 <_calloc_r>
 8008594:	b160      	cbz	r0, 80085b0 <_Balloc+0x64>
 8008596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800859a:	e00e      	b.n	80085ba <_Balloc+0x6e>
 800859c:	2221      	movs	r2, #33	; 0x21
 800859e:	2104      	movs	r1, #4
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fb57 	bl	8008c54 <_calloc_r>
 80085a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a8:	60f0      	str	r0, [r6, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <_Balloc+0x2e>
 80085b0:	2000      	movs	r0, #0
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ba:	2300      	movs	r3, #0
 80085bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c0:	e7f7      	b.n	80085b2 <_Balloc+0x66>
 80085c2:	bf00      	nop
 80085c4:	08009845 	.word	0x08009845
 80085c8:	08009928 	.word	0x08009928

080085cc <_Bfree>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b976      	cbnz	r6, 80085f4 <_Bfree+0x28>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7ff ffa2 	bl	8008520 <malloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	6268      	str	r0, [r5, #36]	; 0x24
 80085e0:	b920      	cbnz	r0, 80085ec <_Bfree+0x20>
 80085e2:	4b09      	ldr	r3, [pc, #36]	; (8008608 <_Bfree+0x3c>)
 80085e4:	4809      	ldr	r0, [pc, #36]	; (800860c <_Bfree+0x40>)
 80085e6:	218a      	movs	r1, #138	; 0x8a
 80085e8:	f000 feaa 	bl	8009340 <__assert_func>
 80085ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f0:	6006      	str	r6, [r0, #0]
 80085f2:	60c6      	str	r6, [r0, #12]
 80085f4:	b13c      	cbz	r4, 8008606 <_Bfree+0x3a>
 80085f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008600:	6021      	str	r1, [r4, #0]
 8008602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	08009845 	.word	0x08009845
 800860c:	08009928 	.word	0x08009928

08008610 <__multadd>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	690d      	ldr	r5, [r1, #16]
 8008616:	4607      	mov	r7, r0
 8008618:	460c      	mov	r4, r1
 800861a:	461e      	mov	r6, r3
 800861c:	f101 0c14 	add.w	ip, r1, #20
 8008620:	2000      	movs	r0, #0
 8008622:	f8dc 3000 	ldr.w	r3, [ip]
 8008626:	b299      	uxth	r1, r3
 8008628:	fb02 6101 	mla	r1, r2, r1, r6
 800862c:	0c1e      	lsrs	r6, r3, #16
 800862e:	0c0b      	lsrs	r3, r1, #16
 8008630:	fb02 3306 	mla	r3, r2, r6, r3
 8008634:	b289      	uxth	r1, r1
 8008636:	3001      	adds	r0, #1
 8008638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800863c:	4285      	cmp	r5, r0
 800863e:	f84c 1b04 	str.w	r1, [ip], #4
 8008642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008646:	dcec      	bgt.n	8008622 <__multadd+0x12>
 8008648:	b30e      	cbz	r6, 800868e <__multadd+0x7e>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	42ab      	cmp	r3, r5
 800864e:	dc19      	bgt.n	8008684 <__multadd+0x74>
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	4638      	mov	r0, r7
 8008654:	3101      	adds	r1, #1
 8008656:	f7ff ff79 	bl	800854c <_Balloc>
 800865a:	4680      	mov	r8, r0
 800865c:	b928      	cbnz	r0, 800866a <__multadd+0x5a>
 800865e:	4602      	mov	r2, r0
 8008660:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <__multadd+0x84>)
 8008662:	480d      	ldr	r0, [pc, #52]	; (8008698 <__multadd+0x88>)
 8008664:	21b5      	movs	r1, #181	; 0xb5
 8008666:	f000 fe6b 	bl	8009340 <__assert_func>
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	3202      	adds	r2, #2
 800866e:	f104 010c 	add.w	r1, r4, #12
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	300c      	adds	r0, #12
 8008676:	f7ff ff5b 	bl	8008530 <memcpy>
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa5 	bl	80085cc <_Bfree>
 8008682:	4644      	mov	r4, r8
 8008684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008688:	3501      	adds	r5, #1
 800868a:	615e      	str	r6, [r3, #20]
 800868c:	6125      	str	r5, [r4, #16]
 800868e:	4620      	mov	r0, r4
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	080098b7 	.word	0x080098b7
 8008698:	08009928 	.word	0x08009928

0800869c <__hi0bits>:
 800869c:	0c03      	lsrs	r3, r0, #16
 800869e:	041b      	lsls	r3, r3, #16
 80086a0:	b9d3      	cbnz	r3, 80086d8 <__hi0bits+0x3c>
 80086a2:	0400      	lsls	r0, r0, #16
 80086a4:	2310      	movs	r3, #16
 80086a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086aa:	bf04      	itt	eq
 80086ac:	0200      	lsleq	r0, r0, #8
 80086ae:	3308      	addeq	r3, #8
 80086b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086b4:	bf04      	itt	eq
 80086b6:	0100      	lsleq	r0, r0, #4
 80086b8:	3304      	addeq	r3, #4
 80086ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086be:	bf04      	itt	eq
 80086c0:	0080      	lsleq	r0, r0, #2
 80086c2:	3302      	addeq	r3, #2
 80086c4:	2800      	cmp	r0, #0
 80086c6:	db05      	blt.n	80086d4 <__hi0bits+0x38>
 80086c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086cc:	f103 0301 	add.w	r3, r3, #1
 80086d0:	bf08      	it	eq
 80086d2:	2320      	moveq	r3, #32
 80086d4:	4618      	mov	r0, r3
 80086d6:	4770      	bx	lr
 80086d8:	2300      	movs	r3, #0
 80086da:	e7e4      	b.n	80086a6 <__hi0bits+0xa>

080086dc <__lo0bits>:
 80086dc:	6803      	ldr	r3, [r0, #0]
 80086de:	f013 0207 	ands.w	r2, r3, #7
 80086e2:	4601      	mov	r1, r0
 80086e4:	d00b      	beq.n	80086fe <__lo0bits+0x22>
 80086e6:	07da      	lsls	r2, r3, #31
 80086e8:	d423      	bmi.n	8008732 <__lo0bits+0x56>
 80086ea:	0798      	lsls	r0, r3, #30
 80086ec:	bf49      	itett	mi
 80086ee:	085b      	lsrmi	r3, r3, #1
 80086f0:	089b      	lsrpl	r3, r3, #2
 80086f2:	2001      	movmi	r0, #1
 80086f4:	600b      	strmi	r3, [r1, #0]
 80086f6:	bf5c      	itt	pl
 80086f8:	600b      	strpl	r3, [r1, #0]
 80086fa:	2002      	movpl	r0, #2
 80086fc:	4770      	bx	lr
 80086fe:	b298      	uxth	r0, r3
 8008700:	b9a8      	cbnz	r0, 800872e <__lo0bits+0x52>
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	2010      	movs	r0, #16
 8008706:	b2da      	uxtb	r2, r3
 8008708:	b90a      	cbnz	r2, 800870e <__lo0bits+0x32>
 800870a:	3008      	adds	r0, #8
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	071a      	lsls	r2, r3, #28
 8008710:	bf04      	itt	eq
 8008712:	091b      	lsreq	r3, r3, #4
 8008714:	3004      	addeq	r0, #4
 8008716:	079a      	lsls	r2, r3, #30
 8008718:	bf04      	itt	eq
 800871a:	089b      	lsreq	r3, r3, #2
 800871c:	3002      	addeq	r0, #2
 800871e:	07da      	lsls	r2, r3, #31
 8008720:	d403      	bmi.n	800872a <__lo0bits+0x4e>
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	f100 0001 	add.w	r0, r0, #1
 8008728:	d005      	beq.n	8008736 <__lo0bits+0x5a>
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	4770      	bx	lr
 800872e:	4610      	mov	r0, r2
 8008730:	e7e9      	b.n	8008706 <__lo0bits+0x2a>
 8008732:	2000      	movs	r0, #0
 8008734:	4770      	bx	lr
 8008736:	2020      	movs	r0, #32
 8008738:	4770      	bx	lr
	...

0800873c <__i2b>:
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	2101      	movs	r1, #1
 8008742:	f7ff ff03 	bl	800854c <_Balloc>
 8008746:	4602      	mov	r2, r0
 8008748:	b928      	cbnz	r0, 8008756 <__i2b+0x1a>
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <__i2b+0x24>)
 800874c:	4805      	ldr	r0, [pc, #20]	; (8008764 <__i2b+0x28>)
 800874e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008752:	f000 fdf5 	bl	8009340 <__assert_func>
 8008756:	2301      	movs	r3, #1
 8008758:	6144      	str	r4, [r0, #20]
 800875a:	6103      	str	r3, [r0, #16]
 800875c:	bd10      	pop	{r4, pc}
 800875e:	bf00      	nop
 8008760:	080098b7 	.word	0x080098b7
 8008764:	08009928 	.word	0x08009928

08008768 <__multiply>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4691      	mov	r9, r2
 800876e:	690a      	ldr	r2, [r1, #16]
 8008770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	bfb8      	it	lt
 8008778:	460b      	movlt	r3, r1
 800877a:	460c      	mov	r4, r1
 800877c:	bfbc      	itt	lt
 800877e:	464c      	movlt	r4, r9
 8008780:	4699      	movlt	r9, r3
 8008782:	6927      	ldr	r7, [r4, #16]
 8008784:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008788:	68a3      	ldr	r3, [r4, #8]
 800878a:	6861      	ldr	r1, [r4, #4]
 800878c:	eb07 060a 	add.w	r6, r7, sl
 8008790:	42b3      	cmp	r3, r6
 8008792:	b085      	sub	sp, #20
 8008794:	bfb8      	it	lt
 8008796:	3101      	addlt	r1, #1
 8008798:	f7ff fed8 	bl	800854c <_Balloc>
 800879c:	b930      	cbnz	r0, 80087ac <__multiply+0x44>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b44      	ldr	r3, [pc, #272]	; (80088b4 <__multiply+0x14c>)
 80087a2:	4845      	ldr	r0, [pc, #276]	; (80088b8 <__multiply+0x150>)
 80087a4:	f240 115d 	movw	r1, #349	; 0x15d
 80087a8:	f000 fdca 	bl	8009340 <__assert_func>
 80087ac:	f100 0514 	add.w	r5, r0, #20
 80087b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087b4:	462b      	mov	r3, r5
 80087b6:	2200      	movs	r2, #0
 80087b8:	4543      	cmp	r3, r8
 80087ba:	d321      	bcc.n	8008800 <__multiply+0x98>
 80087bc:	f104 0314 	add.w	r3, r4, #20
 80087c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087c4:	f109 0314 	add.w	r3, r9, #20
 80087c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087cc:	9202      	str	r2, [sp, #8]
 80087ce:	1b3a      	subs	r2, r7, r4
 80087d0:	3a15      	subs	r2, #21
 80087d2:	f022 0203 	bic.w	r2, r2, #3
 80087d6:	3204      	adds	r2, #4
 80087d8:	f104 0115 	add.w	r1, r4, #21
 80087dc:	428f      	cmp	r7, r1
 80087de:	bf38      	it	cc
 80087e0:	2204      	movcc	r2, #4
 80087e2:	9201      	str	r2, [sp, #4]
 80087e4:	9a02      	ldr	r2, [sp, #8]
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d80c      	bhi.n	8008806 <__multiply+0x9e>
 80087ec:	2e00      	cmp	r6, #0
 80087ee:	dd03      	ble.n	80087f8 <__multiply+0x90>
 80087f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d05a      	beq.n	80088ae <__multiply+0x146>
 80087f8:	6106      	str	r6, [r0, #16]
 80087fa:	b005      	add	sp, #20
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	f843 2b04 	str.w	r2, [r3], #4
 8008804:	e7d8      	b.n	80087b8 <__multiply+0x50>
 8008806:	f8b3 a000 	ldrh.w	sl, [r3]
 800880a:	f1ba 0f00 	cmp.w	sl, #0
 800880e:	d024      	beq.n	800885a <__multiply+0xf2>
 8008810:	f104 0e14 	add.w	lr, r4, #20
 8008814:	46a9      	mov	r9, r5
 8008816:	f04f 0c00 	mov.w	ip, #0
 800881a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800881e:	f8d9 1000 	ldr.w	r1, [r9]
 8008822:	fa1f fb82 	uxth.w	fp, r2
 8008826:	b289      	uxth	r1, r1
 8008828:	fb0a 110b 	mla	r1, sl, fp, r1
 800882c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008830:	f8d9 2000 	ldr.w	r2, [r9]
 8008834:	4461      	add	r1, ip
 8008836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800883a:	fb0a c20b 	mla	r2, sl, fp, ip
 800883e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008842:	b289      	uxth	r1, r1
 8008844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008848:	4577      	cmp	r7, lr
 800884a:	f849 1b04 	str.w	r1, [r9], #4
 800884e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008852:	d8e2      	bhi.n	800881a <__multiply+0xb2>
 8008854:	9a01      	ldr	r2, [sp, #4]
 8008856:	f845 c002 	str.w	ip, [r5, r2]
 800885a:	9a03      	ldr	r2, [sp, #12]
 800885c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008860:	3304      	adds	r3, #4
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	d020      	beq.n	80088aa <__multiply+0x142>
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	f104 0c14 	add.w	ip, r4, #20
 800886e:	46ae      	mov	lr, r5
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	f8bc b000 	ldrh.w	fp, [ip]
 8008878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800887c:	fb09 220b 	mla	r2, r9, fp, r2
 8008880:	4492      	add	sl, r2
 8008882:	b289      	uxth	r1, r1
 8008884:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008888:	f84e 1b04 	str.w	r1, [lr], #4
 800888c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008890:	f8be 1000 	ldrh.w	r1, [lr]
 8008894:	0c12      	lsrs	r2, r2, #16
 8008896:	fb09 1102 	mla	r1, r9, r2, r1
 800889a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800889e:	4567      	cmp	r7, ip
 80088a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088a4:	d8e6      	bhi.n	8008874 <__multiply+0x10c>
 80088a6:	9a01      	ldr	r2, [sp, #4]
 80088a8:	50a9      	str	r1, [r5, r2]
 80088aa:	3504      	adds	r5, #4
 80088ac:	e79a      	b.n	80087e4 <__multiply+0x7c>
 80088ae:	3e01      	subs	r6, #1
 80088b0:	e79c      	b.n	80087ec <__multiply+0x84>
 80088b2:	bf00      	nop
 80088b4:	080098b7 	.word	0x080098b7
 80088b8:	08009928 	.word	0x08009928

080088bc <__pow5mult>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	4615      	mov	r5, r2
 80088c2:	f012 0203 	ands.w	r2, r2, #3
 80088c6:	4606      	mov	r6, r0
 80088c8:	460f      	mov	r7, r1
 80088ca:	d007      	beq.n	80088dc <__pow5mult+0x20>
 80088cc:	4c25      	ldr	r4, [pc, #148]	; (8008964 <__pow5mult+0xa8>)
 80088ce:	3a01      	subs	r2, #1
 80088d0:	2300      	movs	r3, #0
 80088d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088d6:	f7ff fe9b 	bl	8008610 <__multadd>
 80088da:	4607      	mov	r7, r0
 80088dc:	10ad      	asrs	r5, r5, #2
 80088de:	d03d      	beq.n	800895c <__pow5mult+0xa0>
 80088e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088e2:	b97c      	cbnz	r4, 8008904 <__pow5mult+0x48>
 80088e4:	2010      	movs	r0, #16
 80088e6:	f7ff fe1b 	bl	8008520 <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6270      	str	r0, [r6, #36]	; 0x24
 80088ee:	b928      	cbnz	r0, 80088fc <__pow5mult+0x40>
 80088f0:	4b1d      	ldr	r3, [pc, #116]	; (8008968 <__pow5mult+0xac>)
 80088f2:	481e      	ldr	r0, [pc, #120]	; (800896c <__pow5mult+0xb0>)
 80088f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088f8:	f000 fd22 	bl	8009340 <__assert_func>
 80088fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008900:	6004      	str	r4, [r0, #0]
 8008902:	60c4      	str	r4, [r0, #12]
 8008904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800890c:	b94c      	cbnz	r4, 8008922 <__pow5mult+0x66>
 800890e:	f240 2171 	movw	r1, #625	; 0x271
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff12 	bl	800873c <__i2b>
 8008918:	2300      	movs	r3, #0
 800891a:	f8c8 0008 	str.w	r0, [r8, #8]
 800891e:	4604      	mov	r4, r0
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	07eb      	lsls	r3, r5, #31
 8008928:	d50a      	bpl.n	8008940 <__pow5mult+0x84>
 800892a:	4639      	mov	r1, r7
 800892c:	4622      	mov	r2, r4
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff ff1a 	bl	8008768 <__multiply>
 8008934:	4639      	mov	r1, r7
 8008936:	4680      	mov	r8, r0
 8008938:	4630      	mov	r0, r6
 800893a:	f7ff fe47 	bl	80085cc <_Bfree>
 800893e:	4647      	mov	r7, r8
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	d00b      	beq.n	800895c <__pow5mult+0xa0>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	b938      	cbnz	r0, 8008958 <__pow5mult+0x9c>
 8008948:	4622      	mov	r2, r4
 800894a:	4621      	mov	r1, r4
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff ff0b 	bl	8008768 <__multiply>
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f8c0 9000 	str.w	r9, [r0]
 8008958:	4604      	mov	r4, r0
 800895a:	e7e4      	b.n	8008926 <__pow5mult+0x6a>
 800895c:	4638      	mov	r0, r7
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	bf00      	nop
 8008964:	08009a78 	.word	0x08009a78
 8008968:	08009845 	.word	0x08009845
 800896c:	08009928 	.word	0x08009928

08008970 <__lshift>:
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	6849      	ldr	r1, [r1, #4]
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	4607      	mov	r7, r0
 8008982:	4691      	mov	r9, r2
 8008984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008988:	f108 0601 	add.w	r6, r8, #1
 800898c:	42b3      	cmp	r3, r6
 800898e:	db0b      	blt.n	80089a8 <__lshift+0x38>
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff fddb 	bl	800854c <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b948      	cbnz	r0, 80089ae <__lshift+0x3e>
 800899a:	4602      	mov	r2, r0
 800899c:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <__lshift+0xd8>)
 800899e:	482b      	ldr	r0, [pc, #172]	; (8008a4c <__lshift+0xdc>)
 80089a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089a4:	f000 fccc 	bl	8009340 <__assert_func>
 80089a8:	3101      	adds	r1, #1
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	e7ee      	b.n	800898c <__lshift+0x1c>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f100 0114 	add.w	r1, r0, #20
 80089b4:	f100 0210 	add.w	r2, r0, #16
 80089b8:	4618      	mov	r0, r3
 80089ba:	4553      	cmp	r3, sl
 80089bc:	db37      	blt.n	8008a2e <__lshift+0xbe>
 80089be:	6920      	ldr	r0, [r4, #16]
 80089c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c4:	f104 0314 	add.w	r3, r4, #20
 80089c8:	f019 091f 	ands.w	r9, r9, #31
 80089cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089d4:	d02f      	beq.n	8008a36 <__lshift+0xc6>
 80089d6:	f1c9 0e20 	rsb	lr, r9, #32
 80089da:	468a      	mov	sl, r1
 80089dc:	f04f 0c00 	mov.w	ip, #0
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	fa02 f209 	lsl.w	r2, r2, r9
 80089e6:	ea42 020c 	orr.w	r2, r2, ip
 80089ea:	f84a 2b04 	str.w	r2, [sl], #4
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	4298      	cmp	r0, r3
 80089f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089f8:	d8f2      	bhi.n	80089e0 <__lshift+0x70>
 80089fa:	1b03      	subs	r3, r0, r4
 80089fc:	3b15      	subs	r3, #21
 80089fe:	f023 0303 	bic.w	r3, r3, #3
 8008a02:	3304      	adds	r3, #4
 8008a04:	f104 0215 	add.w	r2, r4, #21
 8008a08:	4290      	cmp	r0, r2
 8008a0a:	bf38      	it	cc
 8008a0c:	2304      	movcc	r3, #4
 8008a0e:	f841 c003 	str.w	ip, [r1, r3]
 8008a12:	f1bc 0f00 	cmp.w	ip, #0
 8008a16:	d001      	beq.n	8008a1c <__lshift+0xac>
 8008a18:	f108 0602 	add.w	r6, r8, #2
 8008a1c:	3e01      	subs	r6, #1
 8008a1e:	4638      	mov	r0, r7
 8008a20:	612e      	str	r6, [r5, #16]
 8008a22:	4621      	mov	r1, r4
 8008a24:	f7ff fdd2 	bl	80085cc <_Bfree>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a32:	3301      	adds	r3, #1
 8008a34:	e7c1      	b.n	80089ba <__lshift+0x4a>
 8008a36:	3904      	subs	r1, #4
 8008a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a40:	4298      	cmp	r0, r3
 8008a42:	d8f9      	bhi.n	8008a38 <__lshift+0xc8>
 8008a44:	e7ea      	b.n	8008a1c <__lshift+0xac>
 8008a46:	bf00      	nop
 8008a48:	080098b7 	.word	0x080098b7
 8008a4c:	08009928 	.word	0x08009928

08008a50 <__mcmp>:
 8008a50:	b530      	push	{r4, r5, lr}
 8008a52:	6902      	ldr	r2, [r0, #16]
 8008a54:	690c      	ldr	r4, [r1, #16]
 8008a56:	1b12      	subs	r2, r2, r4
 8008a58:	d10e      	bne.n	8008a78 <__mcmp+0x28>
 8008a5a:	f100 0314 	add.w	r3, r0, #20
 8008a5e:	3114      	adds	r1, #20
 8008a60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a70:	42a5      	cmp	r5, r4
 8008a72:	d003      	beq.n	8008a7c <__mcmp+0x2c>
 8008a74:	d305      	bcc.n	8008a82 <__mcmp+0x32>
 8008a76:	2201      	movs	r2, #1
 8008a78:	4610      	mov	r0, r2
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	4283      	cmp	r3, r0
 8008a7e:	d3f3      	bcc.n	8008a68 <__mcmp+0x18>
 8008a80:	e7fa      	b.n	8008a78 <__mcmp+0x28>
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a86:	e7f7      	b.n	8008a78 <__mcmp+0x28>

08008a88 <__mdiff>:
 8008a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	4606      	mov	r6, r0
 8008a90:	4611      	mov	r1, r2
 8008a92:	4620      	mov	r0, r4
 8008a94:	4690      	mov	r8, r2
 8008a96:	f7ff ffdb 	bl	8008a50 <__mcmp>
 8008a9a:	1e05      	subs	r5, r0, #0
 8008a9c:	d110      	bne.n	8008ac0 <__mdiff+0x38>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff fd53 	bl	800854c <_Balloc>
 8008aa6:	b930      	cbnz	r0, 8008ab6 <__mdiff+0x2e>
 8008aa8:	4b3a      	ldr	r3, [pc, #232]	; (8008b94 <__mdiff+0x10c>)
 8008aaa:	4602      	mov	r2, r0
 8008aac:	f240 2132 	movw	r1, #562	; 0x232
 8008ab0:	4839      	ldr	r0, [pc, #228]	; (8008b98 <__mdiff+0x110>)
 8008ab2:	f000 fc45 	bl	8009340 <__assert_func>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	bfa4      	itt	ge
 8008ac2:	4643      	movge	r3, r8
 8008ac4:	46a0      	movge	r8, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008acc:	bfa6      	itte	ge
 8008ace:	461c      	movge	r4, r3
 8008ad0:	2500      	movge	r5, #0
 8008ad2:	2501      	movlt	r5, #1
 8008ad4:	f7ff fd3a 	bl	800854c <_Balloc>
 8008ad8:	b920      	cbnz	r0, 8008ae4 <__mdiff+0x5c>
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <__mdiff+0x10c>)
 8008adc:	4602      	mov	r2, r0
 8008ade:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ae2:	e7e5      	b.n	8008ab0 <__mdiff+0x28>
 8008ae4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ae8:	6926      	ldr	r6, [r4, #16]
 8008aea:	60c5      	str	r5, [r0, #12]
 8008aec:	f104 0914 	add.w	r9, r4, #20
 8008af0:	f108 0514 	add.w	r5, r8, #20
 8008af4:	f100 0e14 	add.w	lr, r0, #20
 8008af8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008afc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b00:	f108 0210 	add.w	r2, r8, #16
 8008b04:	46f2      	mov	sl, lr
 8008b06:	2100      	movs	r1, #0
 8008b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b10:	fa1f f883 	uxth.w	r8, r3
 8008b14:	fa11 f18b 	uxtah	r1, r1, fp
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	eba1 0808 	sub.w	r8, r1, r8
 8008b1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b26:	fa1f f888 	uxth.w	r8, r8
 8008b2a:	1419      	asrs	r1, r3, #16
 8008b2c:	454e      	cmp	r6, r9
 8008b2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b32:	f84a 3b04 	str.w	r3, [sl], #4
 8008b36:	d8e7      	bhi.n	8008b08 <__mdiff+0x80>
 8008b38:	1b33      	subs	r3, r6, r4
 8008b3a:	3b15      	subs	r3, #21
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	3304      	adds	r3, #4
 8008b42:	3415      	adds	r4, #21
 8008b44:	42a6      	cmp	r6, r4
 8008b46:	bf38      	it	cc
 8008b48:	2304      	movcc	r3, #4
 8008b4a:	441d      	add	r5, r3
 8008b4c:	4473      	add	r3, lr
 8008b4e:	469e      	mov	lr, r3
 8008b50:	462e      	mov	r6, r5
 8008b52:	4566      	cmp	r6, ip
 8008b54:	d30e      	bcc.n	8008b74 <__mdiff+0xec>
 8008b56:	f10c 0203 	add.w	r2, ip, #3
 8008b5a:	1b52      	subs	r2, r2, r5
 8008b5c:	f022 0203 	bic.w	r2, r2, #3
 8008b60:	3d03      	subs	r5, #3
 8008b62:	45ac      	cmp	ip, r5
 8008b64:	bf38      	it	cc
 8008b66:	2200      	movcc	r2, #0
 8008b68:	441a      	add	r2, r3
 8008b6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b6e:	b17b      	cbz	r3, 8008b90 <__mdiff+0x108>
 8008b70:	6107      	str	r7, [r0, #16]
 8008b72:	e7a3      	b.n	8008abc <__mdiff+0x34>
 8008b74:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b78:	fa11 f288 	uxtah	r2, r1, r8
 8008b7c:	1414      	asrs	r4, r2, #16
 8008b7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b82:	b292      	uxth	r2, r2
 8008b84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b88:	f84e 2b04 	str.w	r2, [lr], #4
 8008b8c:	1421      	asrs	r1, r4, #16
 8008b8e:	e7e0      	b.n	8008b52 <__mdiff+0xca>
 8008b90:	3f01      	subs	r7, #1
 8008b92:	e7ea      	b.n	8008b6a <__mdiff+0xe2>
 8008b94:	080098b7 	.word	0x080098b7
 8008b98:	08009928 	.word	0x08009928

08008b9c <__d2b>:
 8008b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	ec57 6b10 	vmov	r6, r7, d0
 8008ba8:	4690      	mov	r8, r2
 8008baa:	f7ff fccf 	bl	800854c <_Balloc>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b930      	cbnz	r0, 8008bc0 <__d2b+0x24>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <__d2b+0xb0>)
 8008bb6:	4826      	ldr	r0, [pc, #152]	; (8008c50 <__d2b+0xb4>)
 8008bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008bbc:	f000 fbc0 	bl	8009340 <__assert_func>
 8008bc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc8:	bb35      	cbnz	r5, 8008c18 <__d2b+0x7c>
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	d028      	beq.n	8008c22 <__d2b+0x86>
 8008bd0:	4668      	mov	r0, sp
 8008bd2:	9600      	str	r6, [sp, #0]
 8008bd4:	f7ff fd82 	bl	80086dc <__lo0bits>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	b300      	cbz	r0, 8008c1e <__d2b+0x82>
 8008bdc:	9a01      	ldr	r2, [sp, #4]
 8008bde:	f1c0 0320 	rsb	r3, r0, #32
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	430b      	orrs	r3, r1
 8008be8:	40c2      	lsrs	r2, r0
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	61a3      	str	r3, [r4, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf14      	ite	ne
 8008bf6:	2202      	movne	r2, #2
 8008bf8:	2201      	moveq	r2, #1
 8008bfa:	6122      	str	r2, [r4, #16]
 8008bfc:	b1d5      	cbz	r5, 8008c34 <__d2b+0x98>
 8008bfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c02:	4405      	add	r5, r0
 8008c04:	f8c9 5000 	str.w	r5, [r9]
 8008c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c0c:	f8c8 0000 	str.w	r0, [r8]
 8008c10:	4620      	mov	r0, r4
 8008c12:	b003      	add	sp, #12
 8008c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1c:	e7d5      	b.n	8008bca <__d2b+0x2e>
 8008c1e:	6161      	str	r1, [r4, #20]
 8008c20:	e7e5      	b.n	8008bee <__d2b+0x52>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fd5a 	bl	80086dc <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	3020      	adds	r0, #32
 8008c32:	e7e3      	b.n	8008bfc <__d2b+0x60>
 8008c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c3c:	f8c9 0000 	str.w	r0, [r9]
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f7ff fd2b 	bl	800869c <__hi0bits>
 8008c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4a:	e7df      	b.n	8008c0c <__d2b+0x70>
 8008c4c:	080098b7 	.word	0x080098b7
 8008c50:	08009928 	.word	0x08009928

08008c54 <_calloc_r>:
 8008c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c56:	fba1 2402 	umull	r2, r4, r1, r2
 8008c5a:	b94c      	cbnz	r4, 8008c70 <_calloc_r+0x1c>
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	f000 f87a 	bl	8008d58 <_malloc_r>
 8008c64:	9a01      	ldr	r2, [sp, #4]
 8008c66:	4605      	mov	r5, r0
 8008c68:	b930      	cbnz	r0, 8008c78 <_calloc_r+0x24>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bd30      	pop	{r4, r5, pc}
 8008c70:	220c      	movs	r2, #12
 8008c72:	6002      	str	r2, [r0, #0]
 8008c74:	2500      	movs	r5, #0
 8008c76:	e7f8      	b.n	8008c6a <_calloc_r+0x16>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7fe f84f 	bl	8006d1c <memset>
 8008c7e:	e7f4      	b.n	8008c6a <_calloc_r+0x16>

08008c80 <_free_r>:
 8008c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d044      	beq.n	8008d10 <_free_r+0x90>
 8008c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8a:	9001      	str	r0, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c92:	bfb8      	it	lt
 8008c94:	18e4      	addlt	r4, r4, r3
 8008c96:	f000 fcdf 	bl	8009658 <__malloc_lock>
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <_free_r+0x94>)
 8008c9c:	9801      	ldr	r0, [sp, #4]
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	b933      	cbnz	r3, 8008cb0 <_free_r+0x30>
 8008ca2:	6063      	str	r3, [r4, #4]
 8008ca4:	6014      	str	r4, [r2, #0]
 8008ca6:	b003      	add	sp, #12
 8008ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cac:	f000 bcda 	b.w	8009664 <__malloc_unlock>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d908      	bls.n	8008cc6 <_free_r+0x46>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1961      	adds	r1, r4, r5
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf01      	itttt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	1949      	addeq	r1, r1, r5
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	e7ed      	b.n	8008ca2 <_free_r+0x22>
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	b10b      	cbz	r3, 8008cd0 <_free_r+0x50>
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	d9fa      	bls.n	8008cc6 <_free_r+0x46>
 8008cd0:	6811      	ldr	r1, [r2, #0]
 8008cd2:	1855      	adds	r5, r2, r1
 8008cd4:	42a5      	cmp	r5, r4
 8008cd6:	d10b      	bne.n	8008cf0 <_free_r+0x70>
 8008cd8:	6824      	ldr	r4, [r4, #0]
 8008cda:	4421      	add	r1, r4
 8008cdc:	1854      	adds	r4, r2, r1
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	d1e0      	bne.n	8008ca6 <_free_r+0x26>
 8008ce4:	681c      	ldr	r4, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	6053      	str	r3, [r2, #4]
 8008cea:	4421      	add	r1, r4
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	e7da      	b.n	8008ca6 <_free_r+0x26>
 8008cf0:	d902      	bls.n	8008cf8 <_free_r+0x78>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	e7d6      	b.n	8008ca6 <_free_r+0x26>
 8008cf8:	6825      	ldr	r5, [r4, #0]
 8008cfa:	1961      	adds	r1, r4, r5
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	bf04      	itt	eq
 8008d00:	6819      	ldreq	r1, [r3, #0]
 8008d02:	685b      	ldreq	r3, [r3, #4]
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	bf04      	itt	eq
 8008d08:	1949      	addeq	r1, r1, r5
 8008d0a:	6021      	streq	r1, [r4, #0]
 8008d0c:	6054      	str	r4, [r2, #4]
 8008d0e:	e7ca      	b.n	8008ca6 <_free_r+0x26>
 8008d10:	b003      	add	sp, #12
 8008d12:	bd30      	pop	{r4, r5, pc}
 8008d14:	20000650 	.word	0x20000650

08008d18 <sbrk_aligned>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	4e0e      	ldr	r6, [pc, #56]	; (8008d54 <sbrk_aligned+0x3c>)
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	6831      	ldr	r1, [r6, #0]
 8008d20:	4605      	mov	r5, r0
 8008d22:	b911      	cbnz	r1, 8008d2a <sbrk_aligned+0x12>
 8008d24:	f000 f9e6 	bl	80090f4 <_sbrk_r>
 8008d28:	6030      	str	r0, [r6, #0]
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f000 f9e1 	bl	80090f4 <_sbrk_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d00a      	beq.n	8008d4c <sbrk_aligned+0x34>
 8008d36:	1cc4      	adds	r4, r0, #3
 8008d38:	f024 0403 	bic.w	r4, r4, #3
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d007      	beq.n	8008d50 <sbrk_aligned+0x38>
 8008d40:	1a21      	subs	r1, r4, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 f9d6 	bl	80090f4 <_sbrk_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d101      	bne.n	8008d50 <sbrk_aligned+0x38>
 8008d4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008d50:	4620      	mov	r0, r4
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	20000654 	.word	0x20000654

08008d58 <_malloc_r>:
 8008d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	1ccd      	adds	r5, r1, #3
 8008d5e:	f025 0503 	bic.w	r5, r5, #3
 8008d62:	3508      	adds	r5, #8
 8008d64:	2d0c      	cmp	r5, #12
 8008d66:	bf38      	it	cc
 8008d68:	250c      	movcc	r5, #12
 8008d6a:	2d00      	cmp	r5, #0
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	db01      	blt.n	8008d74 <_malloc_r+0x1c>
 8008d70:	42a9      	cmp	r1, r5
 8008d72:	d905      	bls.n	8008d80 <_malloc_r+0x28>
 8008d74:	230c      	movs	r3, #12
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	2600      	movs	r6, #0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d80:	4e2e      	ldr	r6, [pc, #184]	; (8008e3c <_malloc_r+0xe4>)
 8008d82:	f000 fc69 	bl	8009658 <__malloc_lock>
 8008d86:	6833      	ldr	r3, [r6, #0]
 8008d88:	461c      	mov	r4, r3
 8008d8a:	bb34      	cbnz	r4, 8008dda <_malloc_r+0x82>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f7ff ffc2 	bl	8008d18 <sbrk_aligned>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	4604      	mov	r4, r0
 8008d98:	d14d      	bne.n	8008e36 <_malloc_r+0xde>
 8008d9a:	6834      	ldr	r4, [r6, #0]
 8008d9c:	4626      	mov	r6, r4
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d140      	bne.n	8008e24 <_malloc_r+0xcc>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	4631      	mov	r1, r6
 8008da6:	4638      	mov	r0, r7
 8008da8:	eb04 0803 	add.w	r8, r4, r3
 8008dac:	f000 f9a2 	bl	80090f4 <_sbrk_r>
 8008db0:	4580      	cmp	r8, r0
 8008db2:	d13a      	bne.n	8008e2a <_malloc_r+0xd2>
 8008db4:	6821      	ldr	r1, [r4, #0]
 8008db6:	3503      	adds	r5, #3
 8008db8:	1a6d      	subs	r5, r5, r1
 8008dba:	f025 0503 	bic.w	r5, r5, #3
 8008dbe:	3508      	adds	r5, #8
 8008dc0:	2d0c      	cmp	r5, #12
 8008dc2:	bf38      	it	cc
 8008dc4:	250c      	movcc	r5, #12
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7ff ffa5 	bl	8008d18 <sbrk_aligned>
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d02b      	beq.n	8008e2a <_malloc_r+0xd2>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	442b      	add	r3, r5
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	e00e      	b.n	8008df8 <_malloc_r+0xa0>
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	1b52      	subs	r2, r2, r5
 8008dde:	d41e      	bmi.n	8008e1e <_malloc_r+0xc6>
 8008de0:	2a0b      	cmp	r2, #11
 8008de2:	d916      	bls.n	8008e12 <_malloc_r+0xba>
 8008de4:	1961      	adds	r1, r4, r5
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	6025      	str	r5, [r4, #0]
 8008dea:	bf18      	it	ne
 8008dec:	6059      	strne	r1, [r3, #4]
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	bf08      	it	eq
 8008df2:	6031      	streq	r1, [r6, #0]
 8008df4:	5162      	str	r2, [r4, r5]
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f104 060b 	add.w	r6, r4, #11
 8008dfe:	f000 fc31 	bl	8009664 <__malloc_unlock>
 8008e02:	f026 0607 	bic.w	r6, r6, #7
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	1af2      	subs	r2, r6, r3
 8008e0a:	d0b6      	beq.n	8008d7a <_malloc_r+0x22>
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	50a3      	str	r3, [r4, r2]
 8008e10:	e7b3      	b.n	8008d7a <_malloc_r+0x22>
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	bf0c      	ite	eq
 8008e18:	6032      	streq	r2, [r6, #0]
 8008e1a:	605a      	strne	r2, [r3, #4]
 8008e1c:	e7ec      	b.n	8008df8 <_malloc_r+0xa0>
 8008e1e:	4623      	mov	r3, r4
 8008e20:	6864      	ldr	r4, [r4, #4]
 8008e22:	e7b2      	b.n	8008d8a <_malloc_r+0x32>
 8008e24:	4634      	mov	r4, r6
 8008e26:	6876      	ldr	r6, [r6, #4]
 8008e28:	e7b9      	b.n	8008d9e <_malloc_r+0x46>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	603b      	str	r3, [r7, #0]
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f000 fc18 	bl	8009664 <__malloc_unlock>
 8008e34:	e7a1      	b.n	8008d7a <_malloc_r+0x22>
 8008e36:	6025      	str	r5, [r4, #0]
 8008e38:	e7de      	b.n	8008df8 <_malloc_r+0xa0>
 8008e3a:	bf00      	nop
 8008e3c:	20000650 	.word	0x20000650

08008e40 <__sfputc_r>:
 8008e40:	6893      	ldr	r3, [r2, #8]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	b410      	push	{r4}
 8008e48:	6093      	str	r3, [r2, #8]
 8008e4a:	da08      	bge.n	8008e5e <__sfputc_r+0x1e>
 8008e4c:	6994      	ldr	r4, [r2, #24]
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	db01      	blt.n	8008e56 <__sfputc_r+0x16>
 8008e52:	290a      	cmp	r1, #10
 8008e54:	d103      	bne.n	8008e5e <__sfputc_r+0x1e>
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	f000 b99f 	b.w	800919c <__swbuf_r>
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	1c58      	adds	r0, r3, #1
 8008e62:	6010      	str	r0, [r2, #0]
 8008e64:	7019      	strb	r1, [r3, #0]
 8008e66:	4608      	mov	r0, r1
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <__sfputs_r>:
 8008e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	460f      	mov	r7, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	18d5      	adds	r5, r2, r3
 8008e78:	42ac      	cmp	r4, r5
 8008e7a:	d101      	bne.n	8008e80 <__sfputs_r+0x12>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e007      	b.n	8008e90 <__sfputs_r+0x22>
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	463a      	mov	r2, r7
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ffda 	bl	8008e40 <__sfputc_r>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d1f3      	bne.n	8008e78 <__sfputs_r+0xa>
 8008e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e94 <_vfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460d      	mov	r5, r1
 8008e9a:	b09d      	sub	sp, #116	; 0x74
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	b118      	cbz	r0, 8008eac <_vfiprintf_r+0x18>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_vfiprintf_r+0x18>
 8008ea8:	f7ff fa94 	bl	80083d4 <__sinit>
 8008eac:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <_vfiprintf_r+0x240>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	d11b      	bne.n	8008eea <_vfiprintf_r+0x56>
 8008eb2:	6875      	ldr	r5, [r6, #4]
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff fb2a 	bl	800851a <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x3c>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b9eb      	cbnz	r3, 8008f0c <_vfiprintf_r+0x78>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f9c6 	bl	8009264 <__swsetup_r>
 8008ed8:	b1c0      	cbz	r0, 8008f0c <_vfiprintf_r+0x78>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d50e      	bpl.n	8008efe <_vfiprintf_r+0x6a>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	4b7b      	ldr	r3, [pc, #492]	; (80090d8 <_vfiprintf_r+0x244>)
 8008eec:	429d      	cmp	r5, r3
 8008eee:	d101      	bne.n	8008ef4 <_vfiprintf_r+0x60>
 8008ef0:	68b5      	ldr	r5, [r6, #8]
 8008ef2:	e7df      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008ef4:	4b79      	ldr	r3, [pc, #484]	; (80090dc <_vfiprintf_r+0x248>)
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	bf08      	it	eq
 8008efa:	68f5      	ldreq	r5, [r6, #12]
 8008efc:	e7da      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4ed      	bmi.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f7ff fb09 	bl	800851c <__retarget_lock_release_recursive>
 8008f0a:	e7e9      	b.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1a:	2330      	movs	r3, #48	; 0x30
 8008f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090e0 <_vfiprintf_r+0x24c>
 8008f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f24:	f04f 0901 	mov.w	r9, #1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0xa2>
 8008f32:	2a25      	cmp	r2, #37	; 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x96>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xc0>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ff93 	bl	8008e6e <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80aa 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	; 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a2 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f74:	931a      	str	r3, [sp, #104]	; 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4858      	ldr	r0, [pc, #352]	; (80090e0 <_vfiprintf_r+0x24c>)
 8008f80:	f7f7 f94e 	bl	8000220 <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x12c>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	; 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x13c>
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f04f 0c0a 	mov.w	ip, #10
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94e      	bls.n	8009058 <_vfiprintf_r+0x1c4>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x156>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x156>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	46a2      	mov	sl, r4
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xe2>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	; 0x2e
 8008fee:	d10c      	bne.n	800900a <_vfiprintf_r+0x176>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d135      	bne.n	8009062 <_vfiprintf_r+0x1ce>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9203      	str	r2, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009006:	3402      	adds	r4, #2
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090f0 <_vfiprintf_r+0x25c>
 800900e:	7821      	ldrb	r1, [r4, #0]
 8009010:	2203      	movs	r2, #3
 8009012:	4650      	mov	r0, sl
 8009014:	f7f7 f904 	bl	8000220 <memchr>
 8009018:	b140      	cbz	r0, 800902c <_vfiprintf_r+0x198>
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	eba0 000a 	sub.w	r0, r0, sl
 8009020:	fa03 f000 	lsl.w	r0, r3, r0
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4303      	orrs	r3, r0
 8009028:	3401      	adds	r4, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	482c      	ldr	r0, [pc, #176]	; (80090e4 <_vfiprintf_r+0x250>)
 8009032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009036:	2206      	movs	r2, #6
 8009038:	f7f7 f8f2 	bl	8000220 <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d03f      	beq.n	80090c0 <_vfiprintf_r+0x22c>
 8009040:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <_vfiprintf_r+0x254>)
 8009042:	bb1b      	cbnz	r3, 800908c <_vfiprintf_r+0x1f8>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	443b      	add	r3, r7
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	e767      	b.n	8008f28 <_vfiprintf_r+0x94>
 8009058:	fb0c 3202 	mla	r2, ip, r2, r3
 800905c:	460c      	mov	r4, r1
 800905e:	2001      	movs	r0, #1
 8009060:	e7a5      	b.n	8008fae <_vfiprintf_r+0x11a>
 8009062:	2300      	movs	r3, #0
 8009064:	3401      	adds	r4, #1
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	4619      	mov	r1, r3
 800906a:	f04f 0c0a 	mov.w	ip, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	; 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_vfiprintf_r+0x1ee>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c5      	beq.n	800900a <_vfiprintf_r+0x176>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c3      	b.n	800900a <_vfiprintf_r+0x176>
 8009082:	fb0c 2101 	mla	r1, ip, r1, r2
 8009086:	4604      	mov	r4, r0
 8009088:	2301      	movs	r3, #1
 800908a:	e7f0      	b.n	800906e <_vfiprintf_r+0x1da>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <_vfiprintf_r+0x258>)
 8009094:	a904      	add	r1, sp, #16
 8009096:	4630      	mov	r0, r6
 8009098:	f7fd fee8 	bl	8006e6c <_printf_float>
 800909c:	4607      	mov	r7, r0
 800909e:	1c78      	adds	r0, r7, #1
 80090a0:	d1d6      	bne.n	8009050 <_vfiprintf_r+0x1bc>
 80090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a4:	07d9      	lsls	r1, r3, #31
 80090a6:	d405      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	059a      	lsls	r2, r3, #22
 80090ac:	d402      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b0:	f7ff fa34 	bl	800851c <__retarget_lock_release_recursive>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af12 	bmi.w	8008ee0 <_vfiprintf_r+0x4c>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	e711      	b.n	8008ee4 <_vfiprintf_r+0x50>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <_vfiprintf_r+0x258>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7fe f972 	bl	80073b4 <_printf_i>
 80090d0:	e7e4      	b.n	800909c <_vfiprintf_r+0x208>
 80090d2:	bf00      	nop
 80090d4:	080098e8 	.word	0x080098e8
 80090d8:	08009908 	.word	0x08009908
 80090dc:	080098c8 	.word	0x080098c8
 80090e0:	08009a84 	.word	0x08009a84
 80090e4:	08009a8e 	.word	0x08009a8e
 80090e8:	08006e6d 	.word	0x08006e6d
 80090ec:	08008e6f 	.word	0x08008e6f
 80090f0:	08009a8a 	.word	0x08009a8a

080090f4 <_sbrk_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d06      	ldr	r5, [pc, #24]	; (8009110 <_sbrk_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	f7f9 fb56 	bl	80027b0 <_sbrk>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_sbrk_r+0x1a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_sbrk_r+0x1a>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20000658 	.word	0x20000658

08009114 <__sread>:
 8009114:	b510      	push	{r4, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	f000 faa8 	bl	8009670 <_read_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	bfab      	itete	ge
 8009124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009126:	89a3      	ldrhlt	r3, [r4, #12]
 8009128:	181b      	addge	r3, r3, r0
 800912a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800912e:	bfac      	ite	ge
 8009130:	6563      	strge	r3, [r4, #84]	; 0x54
 8009132:	81a3      	strhlt	r3, [r4, #12]
 8009134:	bd10      	pop	{r4, pc}

08009136 <__swrite>:
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	461f      	mov	r7, r3
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	05db      	lsls	r3, r3, #23
 8009140:	4605      	mov	r5, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4616      	mov	r6, r2
 8009146:	d505      	bpl.n	8009154 <__swrite+0x1e>
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	2302      	movs	r3, #2
 800914e:	2200      	movs	r2, #0
 8009150:	f000 f9f8 	bl	8009544 <_lseek_r>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	4632      	mov	r2, r6
 8009162:	463b      	mov	r3, r7
 8009164:	4628      	mov	r0, r5
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	f000 b869 	b.w	8009240 <_write_r>

0800916e <__sseek>:
 800916e:	b510      	push	{r4, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009176:	f000 f9e5 	bl	8009544 <_lseek_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	bf15      	itete	ne
 8009180:	6560      	strne	r0, [r4, #84]	; 0x54
 8009182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800918a:	81a3      	strheq	r3, [r4, #12]
 800918c:	bf18      	it	ne
 800918e:	81a3      	strhne	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__sclose>:
 8009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009196:	f000 b8f1 	b.w	800937c <_close_r>
	...

0800919c <__swbuf_r>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	460e      	mov	r6, r1
 80091a0:	4614      	mov	r4, r2
 80091a2:	4605      	mov	r5, r0
 80091a4:	b118      	cbz	r0, 80091ae <__swbuf_r+0x12>
 80091a6:	6983      	ldr	r3, [r0, #24]
 80091a8:	b90b      	cbnz	r3, 80091ae <__swbuf_r+0x12>
 80091aa:	f7ff f913 	bl	80083d4 <__sinit>
 80091ae:	4b21      	ldr	r3, [pc, #132]	; (8009234 <__swbuf_r+0x98>)
 80091b0:	429c      	cmp	r4, r3
 80091b2:	d12b      	bne.n	800920c <__swbuf_r+0x70>
 80091b4:	686c      	ldr	r4, [r5, #4]
 80091b6:	69a3      	ldr	r3, [r4, #24]
 80091b8:	60a3      	str	r3, [r4, #8]
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	071a      	lsls	r2, r3, #28
 80091be:	d52f      	bpl.n	8009220 <__swbuf_r+0x84>
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	b36b      	cbz	r3, 8009220 <__swbuf_r+0x84>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	1ac0      	subs	r0, r0, r3
 80091ca:	6963      	ldr	r3, [r4, #20]
 80091cc:	b2f6      	uxtb	r6, r6
 80091ce:	4283      	cmp	r3, r0
 80091d0:	4637      	mov	r7, r6
 80091d2:	dc04      	bgt.n	80091de <__swbuf_r+0x42>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f966 	bl	80094a8 <_fflush_r>
 80091dc:	bb30      	cbnz	r0, 800922c <__swbuf_r+0x90>
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	60a3      	str	r3, [r4, #8]
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	6022      	str	r2, [r4, #0]
 80091ea:	701e      	strb	r6, [r3, #0]
 80091ec:	6963      	ldr	r3, [r4, #20]
 80091ee:	3001      	adds	r0, #1
 80091f0:	4283      	cmp	r3, r0
 80091f2:	d004      	beq.n	80091fe <__swbuf_r+0x62>
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	07db      	lsls	r3, r3, #31
 80091f8:	d506      	bpl.n	8009208 <__swbuf_r+0x6c>
 80091fa:	2e0a      	cmp	r6, #10
 80091fc:	d104      	bne.n	8009208 <__swbuf_r+0x6c>
 80091fe:	4621      	mov	r1, r4
 8009200:	4628      	mov	r0, r5
 8009202:	f000 f951 	bl	80094a8 <_fflush_r>
 8009206:	b988      	cbnz	r0, 800922c <__swbuf_r+0x90>
 8009208:	4638      	mov	r0, r7
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <__swbuf_r+0x9c>)
 800920e:	429c      	cmp	r4, r3
 8009210:	d101      	bne.n	8009216 <__swbuf_r+0x7a>
 8009212:	68ac      	ldr	r4, [r5, #8]
 8009214:	e7cf      	b.n	80091b6 <__swbuf_r+0x1a>
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <__swbuf_r+0xa0>)
 8009218:	429c      	cmp	r4, r3
 800921a:	bf08      	it	eq
 800921c:	68ec      	ldreq	r4, [r5, #12]
 800921e:	e7ca      	b.n	80091b6 <__swbuf_r+0x1a>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f81e 	bl	8009264 <__swsetup_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	d0cb      	beq.n	80091c4 <__swbuf_r+0x28>
 800922c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009230:	e7ea      	b.n	8009208 <__swbuf_r+0x6c>
 8009232:	bf00      	nop
 8009234:	080098e8 	.word	0x080098e8
 8009238:	08009908 	.word	0x08009908
 800923c:	080098c8 	.word	0x080098c8

08009240 <_write_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	; (8009260 <_write_r+0x20>)
 8009244:	4604      	mov	r4, r0
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f9 fa5d 	bl	800270e <_write>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_write_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_write_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000658 	.word	0x20000658

08009264 <__swsetup_r>:
 8009264:	4b32      	ldr	r3, [pc, #200]	; (8009330 <__swsetup_r+0xcc>)
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	681d      	ldr	r5, [r3, #0]
 800926a:	4606      	mov	r6, r0
 800926c:	460c      	mov	r4, r1
 800926e:	b125      	cbz	r5, 800927a <__swsetup_r+0x16>
 8009270:	69ab      	ldr	r3, [r5, #24]
 8009272:	b913      	cbnz	r3, 800927a <__swsetup_r+0x16>
 8009274:	4628      	mov	r0, r5
 8009276:	f7ff f8ad 	bl	80083d4 <__sinit>
 800927a:	4b2e      	ldr	r3, [pc, #184]	; (8009334 <__swsetup_r+0xd0>)
 800927c:	429c      	cmp	r4, r3
 800927e:	d10f      	bne.n	80092a0 <__swsetup_r+0x3c>
 8009280:	686c      	ldr	r4, [r5, #4]
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009288:	0719      	lsls	r1, r3, #28
 800928a:	d42c      	bmi.n	80092e6 <__swsetup_r+0x82>
 800928c:	06dd      	lsls	r5, r3, #27
 800928e:	d411      	bmi.n	80092b4 <__swsetup_r+0x50>
 8009290:	2309      	movs	r3, #9
 8009292:	6033      	str	r3, [r6, #0]
 8009294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800929e:	e03e      	b.n	800931e <__swsetup_r+0xba>
 80092a0:	4b25      	ldr	r3, [pc, #148]	; (8009338 <__swsetup_r+0xd4>)
 80092a2:	429c      	cmp	r4, r3
 80092a4:	d101      	bne.n	80092aa <__swsetup_r+0x46>
 80092a6:	68ac      	ldr	r4, [r5, #8]
 80092a8:	e7eb      	b.n	8009282 <__swsetup_r+0x1e>
 80092aa:	4b24      	ldr	r3, [pc, #144]	; (800933c <__swsetup_r+0xd8>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	bf08      	it	eq
 80092b0:	68ec      	ldreq	r4, [r5, #12]
 80092b2:	e7e6      	b.n	8009282 <__swsetup_r+0x1e>
 80092b4:	0758      	lsls	r0, r3, #29
 80092b6:	d512      	bpl.n	80092de <__swsetup_r+0x7a>
 80092b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ba:	b141      	cbz	r1, 80092ce <__swsetup_r+0x6a>
 80092bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092c0:	4299      	cmp	r1, r3
 80092c2:	d002      	beq.n	80092ca <__swsetup_r+0x66>
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fcdb 	bl	8008c80 <_free_r>
 80092ca:	2300      	movs	r3, #0
 80092cc:	6363      	str	r3, [r4, #52]	; 0x34
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	2300      	movs	r3, #0
 80092d8:	6063      	str	r3, [r4, #4]
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	f043 0308 	orr.w	r3, r3, #8
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	b94b      	cbnz	r3, 80092fe <__swsetup_r+0x9a>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f4:	d003      	beq.n	80092fe <__swsetup_r+0x9a>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 f95b 	bl	80095b4 <__smakebuf_r>
 80092fe:	89a0      	ldrh	r0, [r4, #12]
 8009300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009304:	f010 0301 	ands.w	r3, r0, #1
 8009308:	d00a      	beq.n	8009320 <__swsetup_r+0xbc>
 800930a:	2300      	movs	r3, #0
 800930c:	60a3      	str	r3, [r4, #8]
 800930e:	6963      	ldr	r3, [r4, #20]
 8009310:	425b      	negs	r3, r3
 8009312:	61a3      	str	r3, [r4, #24]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	b943      	cbnz	r3, 800932a <__swsetup_r+0xc6>
 8009318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800931c:	d1ba      	bne.n	8009294 <__swsetup_r+0x30>
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	0781      	lsls	r1, r0, #30
 8009322:	bf58      	it	pl
 8009324:	6963      	ldrpl	r3, [r4, #20]
 8009326:	60a3      	str	r3, [r4, #8]
 8009328:	e7f4      	b.n	8009314 <__swsetup_r+0xb0>
 800932a:	2000      	movs	r0, #0
 800932c:	e7f7      	b.n	800931e <__swsetup_r+0xba>
 800932e:	bf00      	nop
 8009330:	2000000c 	.word	0x2000000c
 8009334:	080098e8 	.word	0x080098e8
 8009338:	08009908 	.word	0x08009908
 800933c:	080098c8 	.word	0x080098c8

08009340 <__assert_func>:
 8009340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009342:	4614      	mov	r4, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <__assert_func+0x2c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4605      	mov	r5, r0
 800934c:	68d8      	ldr	r0, [r3, #12]
 800934e:	b14c      	cbz	r4, 8009364 <__assert_func+0x24>
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <__assert_func+0x30>)
 8009352:	9100      	str	r1, [sp, #0]
 8009354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009358:	4906      	ldr	r1, [pc, #24]	; (8009374 <__assert_func+0x34>)
 800935a:	462b      	mov	r3, r5
 800935c:	f000 f8e0 	bl	8009520 <fiprintf>
 8009360:	f000 f9a5 	bl	80096ae <abort>
 8009364:	4b04      	ldr	r3, [pc, #16]	; (8009378 <__assert_func+0x38>)
 8009366:	461c      	mov	r4, r3
 8009368:	e7f3      	b.n	8009352 <__assert_func+0x12>
 800936a:	bf00      	nop
 800936c:	2000000c 	.word	0x2000000c
 8009370:	08009a95 	.word	0x08009a95
 8009374:	08009aa2 	.word	0x08009aa2
 8009378:	08009ad0 	.word	0x08009ad0

0800937c <_close_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_close_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f9 f9dd 	bl	8002746 <_close>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_close_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_close_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000658 	.word	0x20000658

0800939c <__sflush_r>:
 800939c:	898a      	ldrh	r2, [r1, #12]
 800939e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a2:	4605      	mov	r5, r0
 80093a4:	0710      	lsls	r0, r2, #28
 80093a6:	460c      	mov	r4, r1
 80093a8:	d458      	bmi.n	800945c <__sflush_r+0xc0>
 80093aa:	684b      	ldr	r3, [r1, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dc05      	bgt.n	80093bc <__sflush_r+0x20>
 80093b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dc02      	bgt.n	80093bc <__sflush_r+0x20>
 80093b6:	2000      	movs	r0, #0
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093be:	2e00      	cmp	r6, #0
 80093c0:	d0f9      	beq.n	80093b6 <__sflush_r+0x1a>
 80093c2:	2300      	movs	r3, #0
 80093c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093c8:	682f      	ldr	r7, [r5, #0]
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	d032      	beq.n	8009434 <__sflush_r+0x98>
 80093ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	075a      	lsls	r2, r3, #29
 80093d4:	d505      	bpl.n	80093e2 <__sflush_r+0x46>
 80093d6:	6863      	ldr	r3, [r4, #4]
 80093d8:	1ac0      	subs	r0, r0, r3
 80093da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093dc:	b10b      	cbz	r3, 80093e2 <__sflush_r+0x46>
 80093de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093e0:	1ac0      	subs	r0, r0, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	4602      	mov	r2, r0
 80093e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e8:	6a21      	ldr	r1, [r4, #32]
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b0      	blx	r6
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	d106      	bne.n	8009402 <__sflush_r+0x66>
 80093f4:	6829      	ldr	r1, [r5, #0]
 80093f6:	291d      	cmp	r1, #29
 80093f8:	d82c      	bhi.n	8009454 <__sflush_r+0xb8>
 80093fa:	4a2a      	ldr	r2, [pc, #168]	; (80094a4 <__sflush_r+0x108>)
 80093fc:	40ca      	lsrs	r2, r1
 80093fe:	07d6      	lsls	r6, r2, #31
 8009400:	d528      	bpl.n	8009454 <__sflush_r+0xb8>
 8009402:	2200      	movs	r2, #0
 8009404:	6062      	str	r2, [r4, #4]
 8009406:	04d9      	lsls	r1, r3, #19
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	6022      	str	r2, [r4, #0]
 800940c:	d504      	bpl.n	8009418 <__sflush_r+0x7c>
 800940e:	1c42      	adds	r2, r0, #1
 8009410:	d101      	bne.n	8009416 <__sflush_r+0x7a>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	b903      	cbnz	r3, 8009418 <__sflush_r+0x7c>
 8009416:	6560      	str	r0, [r4, #84]	; 0x54
 8009418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941a:	602f      	str	r7, [r5, #0]
 800941c:	2900      	cmp	r1, #0
 800941e:	d0ca      	beq.n	80093b6 <__sflush_r+0x1a>
 8009420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009424:	4299      	cmp	r1, r3
 8009426:	d002      	beq.n	800942e <__sflush_r+0x92>
 8009428:	4628      	mov	r0, r5
 800942a:	f7ff fc29 	bl	8008c80 <_free_r>
 800942e:	2000      	movs	r0, #0
 8009430:	6360      	str	r0, [r4, #52]	; 0x34
 8009432:	e7c1      	b.n	80093b8 <__sflush_r+0x1c>
 8009434:	6a21      	ldr	r1, [r4, #32]
 8009436:	2301      	movs	r3, #1
 8009438:	4628      	mov	r0, r5
 800943a:	47b0      	blx	r6
 800943c:	1c41      	adds	r1, r0, #1
 800943e:	d1c7      	bne.n	80093d0 <__sflush_r+0x34>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0c4      	beq.n	80093d0 <__sflush_r+0x34>
 8009446:	2b1d      	cmp	r3, #29
 8009448:	d001      	beq.n	800944e <__sflush_r+0xb2>
 800944a:	2b16      	cmp	r3, #22
 800944c:	d101      	bne.n	8009452 <__sflush_r+0xb6>
 800944e:	602f      	str	r7, [r5, #0]
 8009450:	e7b1      	b.n	80093b6 <__sflush_r+0x1a>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	e7ad      	b.n	80093b8 <__sflush_r+0x1c>
 800945c:	690f      	ldr	r7, [r1, #16]
 800945e:	2f00      	cmp	r7, #0
 8009460:	d0a9      	beq.n	80093b6 <__sflush_r+0x1a>
 8009462:	0793      	lsls	r3, r2, #30
 8009464:	680e      	ldr	r6, [r1, #0]
 8009466:	bf08      	it	eq
 8009468:	694b      	ldreq	r3, [r1, #20]
 800946a:	600f      	str	r7, [r1, #0]
 800946c:	bf18      	it	ne
 800946e:	2300      	movne	r3, #0
 8009470:	eba6 0807 	sub.w	r8, r6, r7
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	f1b8 0f00 	cmp.w	r8, #0
 800947a:	dd9c      	ble.n	80093b6 <__sflush_r+0x1a>
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009480:	4643      	mov	r3, r8
 8009482:	463a      	mov	r2, r7
 8009484:	4628      	mov	r0, r5
 8009486:	47b0      	blx	r6
 8009488:	2800      	cmp	r0, #0
 800948a:	dc06      	bgt.n	800949a <__sflush_r+0xfe>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009498:	e78e      	b.n	80093b8 <__sflush_r+0x1c>
 800949a:	4407      	add	r7, r0
 800949c:	eba8 0800 	sub.w	r8, r8, r0
 80094a0:	e7e9      	b.n	8009476 <__sflush_r+0xda>
 80094a2:	bf00      	nop
 80094a4:	20400001 	.word	0x20400001

080094a8 <_fflush_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b913      	cbnz	r3, 80094b8 <_fflush_r+0x10>
 80094b2:	2500      	movs	r5, #0
 80094b4:	4628      	mov	r0, r5
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	b118      	cbz	r0, 80094c2 <_fflush_r+0x1a>
 80094ba:	6983      	ldr	r3, [r0, #24]
 80094bc:	b90b      	cbnz	r3, 80094c2 <_fflush_r+0x1a>
 80094be:	f7fe ff89 	bl	80083d4 <__sinit>
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <_fflush_r+0x6c>)
 80094c4:	429c      	cmp	r4, r3
 80094c6:	d11b      	bne.n	8009500 <_fflush_r+0x58>
 80094c8:	686c      	ldr	r4, [r5, #4]
 80094ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0ef      	beq.n	80094b2 <_fflush_r+0xa>
 80094d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094d4:	07d0      	lsls	r0, r2, #31
 80094d6:	d404      	bmi.n	80094e2 <_fflush_r+0x3a>
 80094d8:	0599      	lsls	r1, r3, #22
 80094da:	d402      	bmi.n	80094e2 <_fflush_r+0x3a>
 80094dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094de:	f7ff f81c 	bl	800851a <__retarget_lock_acquire_recursive>
 80094e2:	4628      	mov	r0, r5
 80094e4:	4621      	mov	r1, r4
 80094e6:	f7ff ff59 	bl	800939c <__sflush_r>
 80094ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ec:	07da      	lsls	r2, r3, #31
 80094ee:	4605      	mov	r5, r0
 80094f0:	d4e0      	bmi.n	80094b4 <_fflush_r+0xc>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	059b      	lsls	r3, r3, #22
 80094f6:	d4dd      	bmi.n	80094b4 <_fflush_r+0xc>
 80094f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094fa:	f7ff f80f 	bl	800851c <__retarget_lock_release_recursive>
 80094fe:	e7d9      	b.n	80094b4 <_fflush_r+0xc>
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <_fflush_r+0x70>)
 8009502:	429c      	cmp	r4, r3
 8009504:	d101      	bne.n	800950a <_fflush_r+0x62>
 8009506:	68ac      	ldr	r4, [r5, #8]
 8009508:	e7df      	b.n	80094ca <_fflush_r+0x22>
 800950a:	4b04      	ldr	r3, [pc, #16]	; (800951c <_fflush_r+0x74>)
 800950c:	429c      	cmp	r4, r3
 800950e:	bf08      	it	eq
 8009510:	68ec      	ldreq	r4, [r5, #12]
 8009512:	e7da      	b.n	80094ca <_fflush_r+0x22>
 8009514:	080098e8 	.word	0x080098e8
 8009518:	08009908 	.word	0x08009908
 800951c:	080098c8 	.word	0x080098c8

08009520 <fiprintf>:
 8009520:	b40e      	push	{r1, r2, r3}
 8009522:	b503      	push	{r0, r1, lr}
 8009524:	4601      	mov	r1, r0
 8009526:	ab03      	add	r3, sp, #12
 8009528:	4805      	ldr	r0, [pc, #20]	; (8009540 <fiprintf+0x20>)
 800952a:	f853 2b04 	ldr.w	r2, [r3], #4
 800952e:	6800      	ldr	r0, [r0, #0]
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f7ff fcaf 	bl	8008e94 <_vfiprintf_r>
 8009536:	b002      	add	sp, #8
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	b003      	add	sp, #12
 800953e:	4770      	bx	lr
 8009540:	2000000c 	.word	0x2000000c

08009544 <_lseek_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_lseek_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f9 f91e 	bl	8002794 <_lseek>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_lseek_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_lseek_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20000658 	.word	0x20000658

08009568 <__swhatbuf_r>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	460e      	mov	r6, r1
 800956c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009570:	2900      	cmp	r1, #0
 8009572:	b096      	sub	sp, #88	; 0x58
 8009574:	4614      	mov	r4, r2
 8009576:	461d      	mov	r5, r3
 8009578:	da08      	bge.n	800958c <__swhatbuf_r+0x24>
 800957a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	602a      	str	r2, [r5, #0]
 8009582:	061a      	lsls	r2, r3, #24
 8009584:	d410      	bmi.n	80095a8 <__swhatbuf_r+0x40>
 8009586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800958a:	e00e      	b.n	80095aa <__swhatbuf_r+0x42>
 800958c:	466a      	mov	r2, sp
 800958e:	f000 f895 	bl	80096bc <_fstat_r>
 8009592:	2800      	cmp	r0, #0
 8009594:	dbf1      	blt.n	800957a <__swhatbuf_r+0x12>
 8009596:	9a01      	ldr	r2, [sp, #4]
 8009598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800959c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095a0:	425a      	negs	r2, r3
 80095a2:	415a      	adcs	r2, r3
 80095a4:	602a      	str	r2, [r5, #0]
 80095a6:	e7ee      	b.n	8009586 <__swhatbuf_r+0x1e>
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	2000      	movs	r0, #0
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	b016      	add	sp, #88	; 0x58
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080095b4 <__smakebuf_r>:
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095b8:	079d      	lsls	r5, r3, #30
 80095ba:	4606      	mov	r6, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	d507      	bpl.n	80095d0 <__smakebuf_r+0x1c>
 80095c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	2301      	movs	r3, #1
 80095ca:	6163      	str	r3, [r4, #20]
 80095cc:	b002      	add	sp, #8
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	ab01      	add	r3, sp, #4
 80095d2:	466a      	mov	r2, sp
 80095d4:	f7ff ffc8 	bl	8009568 <__swhatbuf_r>
 80095d8:	9900      	ldr	r1, [sp, #0]
 80095da:	4605      	mov	r5, r0
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff fbbb 	bl	8008d58 <_malloc_r>
 80095e2:	b948      	cbnz	r0, 80095f8 <__smakebuf_r+0x44>
 80095e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e8:	059a      	lsls	r2, r3, #22
 80095ea:	d4ef      	bmi.n	80095cc <__smakebuf_r+0x18>
 80095ec:	f023 0303 	bic.w	r3, r3, #3
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	e7e3      	b.n	80095c0 <__smakebuf_r+0xc>
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <__smakebuf_r+0x7c>)
 80095fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	6163      	str	r3, [r4, #20]
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	6120      	str	r0, [r4, #16]
 800960e:	b15b      	cbz	r3, 8009628 <__smakebuf_r+0x74>
 8009610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009614:	4630      	mov	r0, r6
 8009616:	f000 f863 	bl	80096e0 <_isatty_r>
 800961a:	b128      	cbz	r0, 8009628 <__smakebuf_r+0x74>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	89a0      	ldrh	r0, [r4, #12]
 800962a:	4305      	orrs	r5, r0
 800962c:	81a5      	strh	r5, [r4, #12]
 800962e:	e7cd      	b.n	80095cc <__smakebuf_r+0x18>
 8009630:	0800836d 	.word	0x0800836d

08009634 <__ascii_mbtowc>:
 8009634:	b082      	sub	sp, #8
 8009636:	b901      	cbnz	r1, 800963a <__ascii_mbtowc+0x6>
 8009638:	a901      	add	r1, sp, #4
 800963a:	b142      	cbz	r2, 800964e <__ascii_mbtowc+0x1a>
 800963c:	b14b      	cbz	r3, 8009652 <__ascii_mbtowc+0x1e>
 800963e:	7813      	ldrb	r3, [r2, #0]
 8009640:	600b      	str	r3, [r1, #0]
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	1e10      	subs	r0, r2, #0
 8009646:	bf18      	it	ne
 8009648:	2001      	movne	r0, #1
 800964a:	b002      	add	sp, #8
 800964c:	4770      	bx	lr
 800964e:	4610      	mov	r0, r2
 8009650:	e7fb      	b.n	800964a <__ascii_mbtowc+0x16>
 8009652:	f06f 0001 	mvn.w	r0, #1
 8009656:	e7f8      	b.n	800964a <__ascii_mbtowc+0x16>

08009658 <__malloc_lock>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__malloc_lock+0x8>)
 800965a:	f7fe bf5e 	b.w	800851a <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	2000064c 	.word	0x2000064c

08009664 <__malloc_unlock>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__malloc_unlock+0x8>)
 8009666:	f7fe bf59 	b.w	800851c <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	2000064c 	.word	0x2000064c

08009670 <_read_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	; (8009690 <_read_r+0x20>)
 8009674:	4604      	mov	r4, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f9 f828 	bl	80026d4 <_read>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_read_r+0x1e>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_read_r+0x1e>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	20000658 	.word	0x20000658

08009694 <__ascii_wctomb>:
 8009694:	b149      	cbz	r1, 80096aa <__ascii_wctomb+0x16>
 8009696:	2aff      	cmp	r2, #255	; 0xff
 8009698:	bf85      	ittet	hi
 800969a:	238a      	movhi	r3, #138	; 0x8a
 800969c:	6003      	strhi	r3, [r0, #0]
 800969e:	700a      	strbls	r2, [r1, #0]
 80096a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096a4:	bf98      	it	ls
 80096a6:	2001      	movls	r0, #1
 80096a8:	4770      	bx	lr
 80096aa:	4608      	mov	r0, r1
 80096ac:	4770      	bx	lr

080096ae <abort>:
 80096ae:	b508      	push	{r3, lr}
 80096b0:	2006      	movs	r0, #6
 80096b2:	f000 f84d 	bl	8009750 <raise>
 80096b6:	2001      	movs	r0, #1
 80096b8:	f7f9 f802 	bl	80026c0 <_exit>

080096bc <_fstat_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_fstat_r+0x20>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f7f9 f848 	bl	800275e <_fstat>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d102      	bne.n	80096d8 <_fstat_r+0x1c>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b103      	cbz	r3, 80096d8 <_fstat_r+0x1c>
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	20000658 	.word	0x20000658

080096e0 <_isatty_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d06      	ldr	r5, [pc, #24]	; (80096fc <_isatty_r+0x1c>)
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f9 f847 	bl	800277e <_isatty>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_isatty_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_isatty_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20000658 	.word	0x20000658

08009700 <_raise_r>:
 8009700:	291f      	cmp	r1, #31
 8009702:	b538      	push	{r3, r4, r5, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	d904      	bls.n	8009714 <_raise_r+0x14>
 800970a:	2316      	movs	r3, #22
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009716:	b112      	cbz	r2, 800971e <_raise_r+0x1e>
 8009718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800971c:	b94b      	cbnz	r3, 8009732 <_raise_r+0x32>
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f830 	bl	8009784 <_getpid_r>
 8009724:	462a      	mov	r2, r5
 8009726:	4601      	mov	r1, r0
 8009728:	4620      	mov	r0, r4
 800972a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800972e:	f000 b817 	b.w	8009760 <_kill_r>
 8009732:	2b01      	cmp	r3, #1
 8009734:	d00a      	beq.n	800974c <_raise_r+0x4c>
 8009736:	1c59      	adds	r1, r3, #1
 8009738:	d103      	bne.n	8009742 <_raise_r+0x42>
 800973a:	2316      	movs	r3, #22
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	2001      	movs	r0, #1
 8009740:	e7e7      	b.n	8009712 <_raise_r+0x12>
 8009742:	2400      	movs	r4, #0
 8009744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009748:	4628      	mov	r0, r5
 800974a:	4798      	blx	r3
 800974c:	2000      	movs	r0, #0
 800974e:	e7e0      	b.n	8009712 <_raise_r+0x12>

08009750 <raise>:
 8009750:	4b02      	ldr	r3, [pc, #8]	; (800975c <raise+0xc>)
 8009752:	4601      	mov	r1, r0
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f7ff bfd3 	b.w	8009700 <_raise_r>
 800975a:	bf00      	nop
 800975c:	2000000c 	.word	0x2000000c

08009760 <_kill_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_kill_r+0x20>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	f7f8 ff97 	bl	80026a0 <_kill>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	d102      	bne.n	800977c <_kill_r+0x1c>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b103      	cbz	r3, 800977c <_kill_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20000658 	.word	0x20000658

08009784 <_getpid_r>:
 8009784:	f7f8 bf84 	b.w	8002690 <_getpid>

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr
