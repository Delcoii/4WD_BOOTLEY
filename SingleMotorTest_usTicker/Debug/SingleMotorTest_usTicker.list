
SingleMotorTest_usTicker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007970  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007b40  08007b40  00017b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08008158  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008158  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f6d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002782  00000000  00000000  00031179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a44  00000000  00000000  00035548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012613  00000000  00000000  00059f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deda5  00000000  00000000  0006c59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  0014b394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b28 	.word	0x08007b28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007b28 	.word	0x08007b28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <float_map>:

#include <stdio.h>			// for debugging


float float_map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f36:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f42:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f46:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f52:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f62:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f76:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <FL_BrakeDisable>:
{
    HAL_GPIO_WritePin(FL_BRAKE_PORT, FL_BRAKE_PIN, GPIO_PIN_RESET);
}

void FL_BrakeDisable(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FL_BRAKE_PORT, FL_BRAKE_PIN, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4802      	ldr	r0, [pc, #8]	; (8000f9c <FL_BrakeDisable+0x14>)
 8000f94:	f001 fdec 	bl	8002b70 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <FL_RunMotor>:
 * dir  : CW or CCW
 * parameter
 * RATED_SPEED_CCR, MIN_SPEED_CCR, MAX_RPM
*/
void FL_RunMotor(float rpm, uint8_t dir)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000faa:	4603      	mov	r3, r0
 8000fac:	70fb      	strb	r3, [r7, #3]
    float f_RPMtoCCR;
    uint32_t u32_input_CCR;

//    f_RPMtoCCR = MIN_SPEED_CCR - (rpm * ((float)MIN_SPEED_CCR/(float)MAX_RPM));
    f_RPMtoCCR = float_map(rpm, 0.0, RATED_RPM, MIN_SPEED_CCR, RATED_SPEED_CCR);
 8000fae:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8001034 <FL_RunMotor+0x94>
 8000fb2:	eddf 1a21 	vldr	s3, [pc, #132]	; 8001038 <FL_RunMotor+0x98>
 8000fb6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800103c <FL_RunMotor+0x9c>
 8000fba:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001040 <FL_RunMotor+0xa0>
 8000fbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fc2:	f7ff ffb3 	bl	8000f2c <float_map>
 8000fc6:	ed87 0a03 	vstr	s0, [r7, #12]

    if (f_RPMtoCCR > MIN_SPEED_CCR)
 8000fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001038 <FL_RunMotor+0x98>
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd02      	ble.n	8000fe2 <FL_RunMotor+0x42>
    	f_RPMtoCCR = MIN_SPEED_CCR;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <FL_RunMotor+0xa4>)
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e00a      	b.n	8000ff8 <FL_RunMotor+0x58>
    else if(f_RPMtoCCR < RATED_SPEED_CCR)
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001034 <FL_RunMotor+0x94>
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d501      	bpl.n	8000ff8 <FL_RunMotor+0x58>
    	f_RPMtoCCR = RATED_SPEED_CCR;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <FL_RunMotor+0xa8>)
 8000ff6:	60fb      	str	r3, [r7, #12]

    u32_input_CCR = (uint32_t)f_RPMtoCCR;
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001000:	ee17 3a90 	vmov	r3, s15
 8001004:	60bb      	str	r3, [r7, #8]

    // 존나 짜치네 진짜 중국산모터
    if (u32_input_CCR > 380)	u32_input_CCR = 500;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 800100c:	d902      	bls.n	8001014 <FL_RunMotor+0x74>
 800100e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001012:	60bb      	str	r3, [r7, #8]

	FL_BrakeDisable();
 8001014:	f7ff ffb8 	bl	8000f88 <FL_BrakeDisable>
    HAL_GPIO_WritePin(FL_DIR_PORT, FL_DIR_PIN, dir);
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	461a      	mov	r2, r3
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <FL_RunMotor+0xac>)
 8001020:	f001 fda6 	bl	8002b70 <HAL_GPIO_WritePin>
    TIM1->CCR1 = u32_input_CCR;
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <FL_RunMotor+0xb0>)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	6353      	str	r3, [r2, #52]	; 0x34


//    printf("\r\n\nCCR1 : %d\t", u32_input_CCR);	// for debugging
//    printf("result CCR : %f \r\n\n", f_RPMtoCCR);
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	43660000 	.word	0x43660000
 8001038:	43c80000 	.word	0x43c80000
 800103c:	43e10000 	.word	0x43e10000
 8001040:	00000000 	.word	0x00000000
 8001044:	43c80000 	.word	0x43c80000
 8001048:	43660000 	.word	0x43660000
 800104c:	40020000 	.word	0x40020000
 8001050:	40010000 	.word	0x40010000

08001054 <Period2RPM>:
 *
 * 모터 ppr	: 6
 * 모터 기어비	: 14
 */
float Period2RPM(uint32_t u32_period_us)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	float f_RPM = (60 * 1000000) / (((float)u32_period_us * MOTOR_PPR) * GEAR_RATIO);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001076:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001098 <Period2RPM+0x44>
 800107a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107e:	edc7 7a03 	vstr	s15, [r7, #12]
	return f_RPM;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	ee07 3a90 	vmov	s15, r3
}
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	4c64e1c0 	.word	0x4c64e1c0

0800109c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010b0:	4a2a      	ldr	r2, [pc, #168]	; (800115c <MX_ADC1_Init+0xc0>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 2;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010d8:	2202      	movs	r2, #2
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010e4:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <MX_ADC1_Init+0xc4>)
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_ADC1_Init+0xbc>)
 80010fe:	2201      	movs	r2, #1
 8001100:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001102:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_ADC1_Init+0xbc>)
 8001104:	f000 fe7e 	bl	8001e04 <HAL_ADC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800110e:	f000 fab1 	bl	8001674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001112:	230c      	movs	r3, #12
 8001114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800111a:	2307      	movs	r3, #7
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC1_Init+0xbc>)
 8001124:	f001 f850 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800112e:	f000 faa1 	bl	8001674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001132:	230d      	movs	r3, #13
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC1_Init+0xbc>)
 8001140:	f001 f842 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 fa93 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f8 	.word	0x200001f8
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0x7c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d127      	bne.n	80011d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_ADC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ACCEL_Pin|STEERING_Pin;
 80011be:	230c      	movs	r3, #12
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_ADC_MspInit+0x84>)
 80011d2:	f001 fb39 	bl	8002848 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800

080011ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_GPIO_Init+0x124>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <MX_GPIO_Init+0x124>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <MX_GPIO_Init+0x124>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <MX_GPIO_Init+0x124>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <MX_GPIO_Init+0x124>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <MX_GPIO_Init+0x124>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <MX_GPIO_Init+0x124>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a33      	ldr	r2, [pc, #204]	; (8001310 <MX_GPIO_Init+0x124>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <MX_GPIO_Init+0x124>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0x124>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <MX_GPIO_Init+0x124>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_GPIO_Init+0x124>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|FL_DIR_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2160      	movs	r1, #96	; 0x60
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <MX_GPIO_Init+0x128>)
 8001278:	f001 fc7a 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL_BRAKE_GPIO_Port, FL_BRAKE_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	4825      	ldr	r0, [pc, #148]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001284:	f001 fc74 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	481f      	ldr	r0, [pc, #124]	; (800131c <MX_GPIO_Init+0x130>)
 80012a0:	f001 fad2 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|FL_DIR_Pin;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_GPIO_Init+0x128>)
 80012bc:	f001 fac4 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c0:	2310      	movs	r3, #16
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012c4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x130>)
 80012d6:	f001 fab7 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL_BRAKE_Pin;
 80012da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FL_BRAKE_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_GPIO_Init+0x12c>)
 80012f4:	f001 faa8 	bl	8002848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	200a      	movs	r0, #10
 80012fe:	f001 fa6c 	bl	80027da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001302:	200a      	movs	r0, #10
 8001304:	f001 fa85 	bl	8002812 <HAL_NVIC_EnableIRQ>

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800

08001320 <HAL_TIM_PeriodElapsedCallback>:


uint32_t u32_counter_10us = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	 *
	 * TIM10
	 * prescaler 	: 42 - 1
	 * counter		: 2 - 1
	 */
	if(htim->Instance == TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d104      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		u32_counter_10us += 1;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800133a:	6013      	str	r3, [r2, #0]
	}

}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	20000240 	.word	0x20000240

0800134c <HAL_GPIO_EXTI_Callback>:
 * us 단위로 변환시킬려면 해당 변수에 *10을 하여 이용
 */
uint32_t u32_FL_half_period_10us;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
	static uint32_t u32_FL_tick_10us[2];

	if(GPIO_Pin == GPIO_PIN_4)
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b10      	cmp	r3, #16
 800135a:	d112      	bne.n	8001382 <HAL_GPIO_EXTI_Callback+0x36>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);		// for test
 800135c:	2120      	movs	r1, #32
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_GPIO_EXTI_Callback+0x40>)
 8001360:	f001 fc1f 	bl	8002ba2 <HAL_GPIO_TogglePin>

		u32_FL_tick_10us[0] = u32_FL_tick_10us[1];
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_GPIO_EXTI_Callback+0x44>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_GPIO_EXTI_Callback+0x44>)
 800136a:	6013      	str	r3, [r2, #0]
		u32_FL_tick_10us[1] = u32_counter_10us;		// from global variable
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_GPIO_EXTI_Callback+0x48>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_GPIO_EXTI_Callback+0x44>)
 8001372:	6053      	str	r3, [r2, #4]

		u32_FL_half_period_10us = u32_FL_tick_10us[1] - u32_FL_tick_10us[0];
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_GPIO_EXTI_Callback+0x44>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_GPIO_EXTI_Callback+0x44>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001380:	6013      	str	r3, [r2, #0]
	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020000 	.word	0x40020000
 8001390:	20000248 	.word	0x20000248
 8001394:	20000240 	.word	0x20000240
 8001398:	20000244 	.word	0x20000244

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a0:	b098      	sub	sp, #96	; 0x60
 80013a2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fcbc 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f8f6 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f7ff ff1e 	bl	80011ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b0:	f000 fc08 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013b4:	f7ff fe72 	bl	800109c <MX_ADC1_Init>
  MX_TIM1_Init();
 80013b8:	f000 faac 	bl	8001914 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013bc:	f000 fb2e 	bl	8001a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 	  HAL_TIM_Base_Start_IT(&htim2);
 80013c0:	486a      	ldr	r0, [pc, #424]	; (800156c <main+0x1d0>)
 80013c2:	f002 fa59 	bl	8003878 <HAL_TIM_Base_Start_IT>

  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4869      	ldr	r0, [pc, #420]	; (8001570 <main+0x1d4>)
 80013ca:	f002 fb15 	bl	80039f8 <HAL_TIM_PWM_Start>
//  	uint32_t index = 0;
//	uint32_t u32_sum = 0;
//	uint32_t u32_data[WINDOW_SIZE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
//	uint32_t u32_result;

  	uint8_t filter_index = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	float f_sum = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
	float f_data[WINDOW_SIZE] = {0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
 80013da:	463b      	mov	r3, r7
 80013dc:	2228      	movs	r2, #40	; 0x28
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 fe69 	bl	80050b8 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_ADC_Start(&hadc1);
 80013e6:	4863      	ldr	r0, [pc, #396]	; (8001574 <main+0x1d8>)
 80013e8:	f000 fd50 	bl	8001e8c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);   // adc값 읽힐 때까지 최대 100ms 대기
 80013ec:	2164      	movs	r1, #100	; 0x64
 80013ee:	4861      	ldr	r0, [pc, #388]	; (8001574 <main+0x1d8>)
 80013f0:	f000 fe51 	bl	8002096 <HAL_ADC_PollForConversion>
      u32_adc_accel_value = HAL_ADC_GetValue(&hadc1);
 80013f4:	485f      	ldr	r0, [pc, #380]	; (8001574 <main+0x1d8>)
 80013f6:	f000 fed9 	bl	80021ac <HAL_ADC_GetValue>
 80013fa:	63f8      	str	r0, [r7, #60]	; 0x3c
//      HAL_ADC_Stop(&hadc1);

      HAL_ADC_PollForConversion(&hadc1, 100);   // adc값 읽힐 때까지 최대 100ms 대기
 80013fc:	2164      	movs	r1, #100	; 0x64
 80013fe:	485d      	ldr	r0, [pc, #372]	; (8001574 <main+0x1d8>)
 8001400:	f000 fe49 	bl	8002096 <HAL_ADC_PollForConversion>
      u32_adc_steering_value = HAL_ADC_GetValue(&hadc1);
 8001404:	485b      	ldr	r0, [pc, #364]	; (8001574 <main+0x1d8>)
 8001406:	f000 fed1 	bl	80021ac <HAL_ADC_GetValue>
 800140a:	63b8      	str	r0, [r7, #56]	; 0x38

      HAL_ADC_Stop(&hadc1);
 800140c:	4859      	ldr	r0, [pc, #356]	; (8001574 <main+0x1d8>)
 800140e:	f000 fe0f 	bl	8002030 <HAL_ADC_Stop>


      f_voltage = float_map((float)u32_adc_accel_value, 0.0, (float)ADC_MAX_VALUE, 0.0, 3.3);		// 3.3은 stm32 구동전압
 8001412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141c:	ed9f 2a56 	vldr	s4, [pc, #344]	; 8001578 <main+0x1dc>
 8001420:	eddf 1a56 	vldr	s3, [pc, #344]	; 800157c <main+0x1e0>
 8001424:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001580 <main+0x1e4>
 8001428:	eddf 0a54 	vldr	s1, [pc, #336]	; 800157c <main+0x1e0>
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f7ff fd7c 	bl	8000f2c <float_map>
 8001434:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
//      u32_ccr_value = uint32_map(u32_adc_accel_value, 0, ADC_MAX_VALUE, 0, PWM_MAX_VALUE);
      f_FL_input_RPM = float_map((float)u32_adc_accel_value, ADC_MIN_VALUE, ADC_MAX_VALUE, 0.0, RATED_RPM);
 8001438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001442:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8001584 <main+0x1e8>
 8001446:	eddf 1a4d 	vldr	s3, [pc, #308]	; 800157c <main+0x1e0>
 800144a:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8001580 <main+0x1e4>
 800144e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001588 <main+0x1ec>
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	f7ff fd69 	bl	8000f2c <float_map>
 800145a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
      if (f_FL_input_RPM < 0.0)	f_FL_input_RPM = 0.0;		// 필수
 800145e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	d502      	bpl.n	8001472 <main+0xd6>
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	64fb      	str	r3, [r7, #76]	; 0x4c


	  if (u32_adc_steering_value < (ADC_MAX_VALUE / 2))
 8001472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001474:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8001478:	4293      	cmp	r3, r2
 800147a:	d805      	bhi.n	8001488 <main+0xec>
		  FL_RunMotor(f_FL_input_RPM, CCW);
 800147c:	2001      	movs	r0, #1
 800147e:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001482:	f7ff fd8d 	bl	8000fa0 <FL_RunMotor>
 8001486:	e004      	b.n	8001492 <main+0xf6>
      else
    	  FL_RunMotor(f_FL_input_RPM, CW);
 8001488:	2000      	movs	r0, #0
 800148a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800148e:	f7ff fd87 	bl	8000fa0 <FL_RunMotor>


      u32_half_period_us = u32_FL_half_period_10us * 10;
 8001492:	4b3e      	ldr	r3, [pc, #248]	; (800158c <main+0x1f0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
//      u32_filtered_half_period_us = u32_AvgFilter(u32_half_period_us);

//      f_FL_measured_RPM = (60 * 1000000) / ((u32_half_period_us * 12) * 14);
      f_FL_measured_RPM = Period2RPM(u32_half_period_us * 2.);
 80014a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014a2:	f7ff f84f 	bl	8000544 <__aeabi_ui2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f7fe ff0f 	bl	80002cc <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb97 	bl	8000be8 <__aeabi_d2uiz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdc9 	bl	8001054 <Period2RPM>
 80014c2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
//      f_FL_filtered_RPM = AvgFilter(f_FL_measured_RPM);
//      f_FL_filtered_RPM = f_MovingAverage(f_FL_measured_RPM);


	  f_sum = 0.;
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
//	  printf("sum : %d \r\nindex : %d", u32_sum, index);

	  f_data[filter_index] = f_FL_measured_RPM;
 80014cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3350      	adds	r3, #80	; 0x50
 80014d4:	443b      	add	r3, r7
 80014d6:	3b50      	subs	r3, #80	; 0x50
 80014d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014da:	601a      	str	r2, [r3, #0]
//	  printf("index : %d\tdata[index] : %d \r\n", index, u32_data[index]);

	  for(int i = 0; i < WINDOW_SIZE; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
 80014e0:	e00f      	b.n	8001502 <main+0x166>
	  {
		  f_sum += f_data[i];
 80014e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	3350      	adds	r3, #80	; 0x50
 80014e8:	443b      	add	r3, r7
 80014ea:	3b50      	subs	r3, #80	; 0x50
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  for(int i = 0; i < WINDOW_SIZE; i++)
 80014fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fe:	3301      	adds	r3, #1
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001504:	2b09      	cmp	r3, #9
 8001506:	ddec      	ble.n	80014e2 <main+0x146>
	  }
//	  printf("f_sum : %f \r\n", f_sum);

	  filter_index = (filter_index+1) % WINDOW_SIZE;
 8001508:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <main+0x1f4>)
 8001510:	fb83 1302 	smull	r1, r3, r3, r2
 8001514:	1099      	asrs	r1, r3, #2
 8001516:	17d3      	asrs	r3, r2, #31
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	460b      	mov	r3, r1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1ad1      	subs	r1, r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
//	  printf("index : %d \r\n", index);

	  f_result = f_sum / (float)WINDOW_SIZE;
 800152a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800152e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//	  printf("result : %d \r\n\n", u32_result);

      printf("input RPM %f\t meas %f\t filt %f \r\n", f_FL_input_RPM, f_FL_measured_RPM, f_result);
 800153a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800153c:	f7ff f824 	bl	8000588 <__aeabi_f2d>
 8001540:	4680      	mov	r8, r0
 8001542:	4689      	mov	r9, r1
 8001544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001546:	f7ff f81f 	bl	8000588 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001550:	f7ff f81a 	bl	8000588 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155c:	e9cd 4500 	strd	r4, r5, [sp]
 8001560:	4642      	mov	r2, r8
 8001562:	464b      	mov	r3, r9
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <main+0x1f8>)
 8001566:	f004 fa19 	bl	800599c <iprintf>
  {
 800156a:	e73c      	b.n	80013e6 <main+0x4a>
 800156c:	2000029c 	.word	0x2000029c
 8001570:	20000254 	.word	0x20000254
 8001574:	200001f8 	.word	0x200001f8
 8001578:	40533333 	.word	0x40533333
 800157c:	00000000 	.word	0x00000000
 8001580:	457ff000 	.word	0x457ff000
 8001584:	43e10000 	.word	0x43e10000
 8001588:	42480000 	.word	0x42480000
 800158c:	20000244 	.word	0x20000244
 8001590:	66666667 	.word	0x66666667
 8001594:	08007b40 	.word	0x08007b40

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2234      	movs	r2, #52	; 0x34
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fd86 	bl	80050b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <SystemClock_Config+0xd4>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a29      	ldr	r2, [pc, #164]	; (800166c <SystemClock_Config+0xd4>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <SystemClock_Config+0xd4>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <SystemClock_Config+0xd8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <SystemClock_Config+0xd8>)
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <SystemClock_Config+0xd8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001600:	2310      	movs	r3, #16
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2302      	movs	r3, #2
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001608:	2300      	movs	r3, #0
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800160c:	2310      	movs	r3, #16
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001616:	2304      	movs	r3, #4
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800161a:	2302      	movs	r3, #2
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800161e:	2302      	movs	r3, #2
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fe38 	bl	800329c <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001632:	f000 f81f 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2302      	movs	r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	2102      	movs	r1, #2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fad8 	bl	8002c08 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800165e:	f000 f809 	bl	8001674 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3750      	adds	r7, #80	; 0x50
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("you can't sleep now");
 800167c:	4801      	ldr	r0, [pc, #4]	; (8001684 <Error_Handler+0x10>)
 800167e:	f004 f98d 	bl	800599c <iprintf>
  {
 8001682:	e7fb      	b.n	800167c <Error_Handler+0x8>
 8001684:	08007b64 	.word	0x08007b64

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_MspInit+0x4c>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f001 f87c 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 fb4e 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001730:	2010      	movs	r0, #16
 8001732:	f001 fa51 	bl	8002bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001742:	f002 fa21 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000254 	.word	0x20000254

08001750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM2_IRQHandler+0x10>)
 8001756:	f002 fa17 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000029c 	.word	0x2000029c

08001764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return 1;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_kill>:

int _kill(int pid, int sig)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800177e:	f003 fc71 	bl	8005064 <__errno>
 8001782:	4603      	mov	r3, r0
 8001784:	2216      	movs	r2, #22
 8001786:	601a      	str	r2, [r3, #0]
  return -1;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_exit>:

void _exit (int status)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ffe7 	bl	8001774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017a6:	e7fe      	b.n	80017a6 <_exit+0x12>

080017a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00a      	b.n	80017d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ba:	f3af 8000 	nop.w
 80017be:	4601      	mov	r1, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbf0      	blt.n	80017ba <_read+0x12>
  }

  return len;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e009      	b.n	8001808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fa53 	bl	8001ca8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf1      	blt.n	80017f4 <_write+0x12>
  }
  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	605a      	str	r2, [r3, #4]
  return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_isatty>:

int _isatty(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f003 fbd6 	bl	8005064 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20020000 	.word	0x20020000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	20000250 	.word	0x20000250
 80018ec:	20000340 	.word	0x20000340

080018f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b092      	sub	sp, #72	; 0x48
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2220      	movs	r2, #32
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f003 fbba 	bl	80050b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <MX_TIM1_Init+0x104>)
 8001948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <MX_TIM1_Init+0x100>)
 800194c:	2253      	movs	r2, #83	; 0x53
 800194e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400-1;
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001958:	f240 128f 	movw	r2, #399	; 0x18f
 800195c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <MX_TIM1_Init+0x100>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001970:	4828      	ldr	r0, [pc, #160]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001972:	f001 fff1 	bl	8003958 <HAL_TIM_PWM_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800197c:	f7ff fe7a 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198c:	4619      	mov	r1, r3
 800198e:	4821      	ldr	r0, [pc, #132]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001990:	f002 fec4 	bl	800471c <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800199a:	f7ff fe6b 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199e:	2360      	movs	r3, #96	; 0x60
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80019a2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_TIM1_Init+0x100>)
 80019c6:	f002 f9e7 	bl	8003d98 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80019d0:	f7ff fe50 	bl	8001674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM1_Init+0x100>)
 80019f8:	f002 ff0c 	bl	8004814 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001a02:	f7ff fe37 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM1_Init+0x100>)
 8001a08:	f000 f8a2 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3748      	adds	r7, #72	; 0x48
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000254 	.word	0x20000254
 8001a18:	40010000 	.word	0x40010000

08001a1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a42:	2229      	movs	r2, #41	; 0x29
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a4e:	2213      	movs	r2, #19
 8001a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a60:	f001 feba 	bl	80037d8 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f7ff fe03 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a7c:	f002 fa4e 	bl	8003f1c <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f7ff fdf5 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a98:	f002 fe40 	bl	800471c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001aa2:	f7ff fde7 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000029c 	.word	0x2000029c

08001ab4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_TIM_PWM_MspInit+0x48>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d115      	bne.n	8001af2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_TIM_PWM_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_TIM_PWM_MspInit+0x4c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_TIM_PWM_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 fe77 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aec:	2019      	movs	r0, #25
 8001aee:	f000 fe90 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d115      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_TIM_Base_MspInit+0x48>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_TIM_Base_MspInit+0x48>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_TIM_Base_MspInit+0x48>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201c      	movs	r0, #28
 8001b38:	f000 fe4f 	bl	80027da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b3c:	201c      	movs	r0, #28
 8001b3e:	f000 fe68 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11e      	bne.n	8001bb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FL_SPEED_Pin;
 8001b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FL_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_TIM_MspPostInit+0x70>)
 8001bac:	f000 fe4c 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MX_USART2_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	f002 fe70 	bl	80048e0 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c06:	f7ff fd35 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002e4 	.word	0x200002e4
 8001c14:	40004400 	.word	0x40004400

08001c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_UART_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x8c>)
 8001c8e:	f000 fddb 	bl	8002848 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <__io_putchar+0x20>)
 8001cba:	f002 fe5e 	bl	800497a <HAL_UART_Transmit>
  return ch;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200002e4 	.word	0x200002e4

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cd2:	490e      	ldr	r1, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce8:	4c0b      	ldr	r4, [pc, #44]	; (8001d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf6:	f7ff fdfb 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f003 f9b9 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff fb4d 	bl	800139c <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d10:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 8001d14:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d18:	2000033c 	.word	0x2000033c

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_Init+0x40>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_Init+0x40>)
 8001d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_Init+0x40>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 fd3b 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 f808 	bl	8001d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d54:	f7ff fc98 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x54>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x58>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd53 	bl	800282e <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00e      	b.n	8001db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d80a      	bhi.n	8001dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da0:	f000 fd1b 	bl	80027da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <HAL_InitTick+0x5c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000328 	.word	0x20000328

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000328 	.word	0x20000328

08001e04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e033      	b.n	8001e82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff f99e 	bl	8001164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e4a:	f023 0302 	bic.w	r3, r3, #2
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fae8 	bl	800242c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
 8001e72:	e001      	b.n	8001e78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Start+0x1a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0b2      	b.n	800200c <HAL_ADC_Start+0x180>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d018      	beq.n	8001eee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ecc:	4b52      	ldr	r3, [pc, #328]	; (8002018 <HAL_ADC_Start+0x18c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_ADC_Start+0x190>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9a      	lsrs	r2, r3, #18
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ee0:	e002      	b.n	8001ee8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d17a      	bne.n	8001ff2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3a:	d106      	bne.n	8001f4a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f023 0206 	bic.w	r2, r3, #6
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
 8001f48:	e002      	b.n	8001f50 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_ADC_Start+0x194>)
 8001f5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d12a      	bne.n	8001fc8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_ADC_Start+0x198>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d015      	beq.n	8001fa8 <HAL_ADC_Start+0x11c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <HAL_ADC_Start+0x19c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_Start+0x106>
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_ADC_Start+0x194>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a25      	ldr	r2, [pc, #148]	; (800202c <HAL_ADC_Start+0x1a0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d136      	bne.n	800200a <HAL_ADC_Start+0x17e>
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_ADC_Start+0x194>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d130      	bne.n	800200a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d129      	bne.n	800200a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	e020      	b.n	800200a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_ADC_Start+0x198>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11b      	bne.n	800200a <HAL_ADC_Start+0x17e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d114      	bne.n	800200a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e00b      	b.n	800200a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83
 8002020:	40012300 	.word	0x40012300
 8002024:	40012000 	.word	0x40012000
 8002028:	40012100 	.word	0x40012100
 800202c:	40012200 	.word	0x40012200

08002030 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Stop+0x16>
 8002042:	2302      	movs	r3, #2
 8002044:	e021      	b.n	800208a <HAL_ADC_Stop+0x5a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d113      	bne.n	80020dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c2:	d10b      	bne.n	80020dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0220 	orr.w	r2, r3, #32
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e063      	b.n	80021a4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020dc:	f7ff fe86 	bl	8001dec <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e2:	e021      	b.n	8002128 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ea:	d01d      	beq.n	8002128 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_ADC_PollForConversion+0x6c>
 80020f2:	f7ff fe7b 	bl	8001dec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d212      	bcs.n	8002128 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d00b      	beq.n	8002128 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e03d      	b.n	80021a4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d1d6      	bne.n	80020e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0212 	mvn.w	r2, #18
 800213e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d123      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11f      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	d111      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e113      	b.n	800240c <HAL_ADC_ConfigChannel+0x244>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d925      	bls.n	8002240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43da      	mvns	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	400a      	ands	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	4603      	mov	r3, r0
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4403      	add	r3, r0
 8002232:	3b1e      	subs	r3, #30
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e022      	b.n	8002286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	2207      	movs	r2, #7
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	4603      	mov	r3, r0
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4403      	add	r3, r0
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b06      	cmp	r3, #6
 800228c:	d824      	bhi.n	80022d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b05      	subs	r3, #5
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b05      	subs	r3, #5
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
 80022d6:	e04c      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d824      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b23      	subs	r3, #35	; 0x23
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43da      	mvns	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	400a      	ands	r2, r1
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b23      	subs	r3, #35	; 0x23
 800231c:	fa00 f203 	lsl.w	r2, r0, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
 8002328:	e023      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b41      	subs	r3, #65	; 0x41
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b41      	subs	r3, #65	; 0x41
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_ADC_ConfigChannel+0x250>)
 8002374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <HAL_ADC_ConfigChannel+0x254>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10f      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b12      	cmp	r3, #18
 8002386:	d10b      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <HAL_ADC_ConfigChannel+0x254>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12b      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x23a>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_ADC_ConfigChannel+0x258>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <HAL_ADC_ConfigChannel+0x1f4>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d122      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_ADC_ConfigChannel+0x258>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d111      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_ADC_ConfigChannel+0x25c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_ADC_ConfigChannel+0x260>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	0c9a      	lsrs	r2, r3, #18
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012300 	.word	0x40012300
 800241c:	40012000 	.word	0x40012000
 8002420:	10000012 	.word	0x10000012
 8002424:	20000000 	.word	0x20000000
 8002428:	431bde83 	.word	0x431bde83

0800242c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002434:	4b79      	ldr	r3, [pc, #484]	; (800261c <ADC_Init+0x1f0>)
 8002436:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	4a58      	ldr	r2, [pc, #352]	; (8002620 <ADC_Init+0x1f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e00f      	b.n	800252a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0202 	bic.w	r2, r2, #2
 8002538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6899      	ldr	r1, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
 8002544:	005a      	lsls	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002566:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	3b01      	subs	r3, #1
 8002584:	035a      	lsls	r2, r3, #13
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	e007      	b.n	80025a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	051a      	lsls	r2, r3, #20
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025e2:	025a      	lsls	r2, r3, #9
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	029a      	lsls	r2, r3, #10
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40012300 	.word	0x40012300
 8002620:	0f000001 	.word	0x0f000001

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002790:	d301      	bcc.n	8002796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002792:	2301      	movs	r3, #1
 8002794:	e00f      	b.n	80027b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <SysTick_Config+0x40>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279e:	210f      	movs	r1, #15
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a4:	f7ff ff8e 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <SysTick_Config+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SysTick_Config+0x40>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff29 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff3e 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff8e 	bl	8002718 <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5d 	bl	80026c4 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff31 	bl	8002688 <__NVIC_EnableIRQ>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffa2 	bl	8002780 <SysTick_Config>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e165      	b.n	8002b30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8154 	bne.w	8002b2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	2b02      	cmp	r3, #2
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b03      	cmp	r3, #3
 8002906:	d017      	beq.n	8002938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80ae 	beq.w	8002b2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_GPIO_Init+0x300>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <HAL_GPIO_Init+0x300>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <HAL_GPIO_Init+0x300>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_GPIO_Init+0x304>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_GPIO_Init+0x308>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d025      	beq.n	8002a62 <HAL_GPIO_Init+0x21a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <HAL_GPIO_Init+0x30c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01f      	beq.n	8002a5e <HAL_GPIO_Init+0x216>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_GPIO_Init+0x310>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x212>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_GPIO_Init+0x314>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x20e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	; (8002b60 <HAL_GPIO_Init+0x318>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x20a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4a      	ldr	r2, [pc, #296]	; (8002b64 <HAL_GPIO_Init+0x31c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x206>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a49      	ldr	r2, [pc, #292]	; (8002b68 <HAL_GPIO_Init+0x320>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x202>
 8002a46:	2306      	movs	r3, #6
 8002a48:	e00c      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e00a      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x21c>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x304>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_GPIO_Init+0x324>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f ae96 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	041a      	lsls	r2, r3, #16
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fba8 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cc      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b68      	ldr	r3, [pc, #416]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d90c      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d044      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e067      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7ff f878 	bl	8001dec <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7ff f874 	bl	8001dec <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d20c      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f855 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ffd8 	bl	8001d64 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08007b78 	.word	0x08007b78
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0a9b      	lsrs	r3, r3, #10
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	08007b88 	.word	0x08007b88

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffdc 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0b5b      	lsrs	r3, r3, #13
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	08007b88 	.word	0x08007b88

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e40:	b0ae      	sub	sp, #184	; 0xb8
 8002e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e62:	4bcb      	ldr	r3, [pc, #812]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	f200 8206 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x440>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	0800327d 	.word	0x0800327d
 8002e80:	0800327d 	.word	0x0800327d
 8002e84:	0800327d 	.word	0x0800327d
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	0800327d 	.word	0x0800327d
 8002e90:	0800327d 	.word	0x0800327d
 8002e94:	0800327d 	.word	0x0800327d
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	0800327d 	.word	0x0800327d
 8002ea0:	0800327d 	.word	0x0800327d
 8002ea4:	0800327d 	.word	0x0800327d
 8002ea8:	080030ad 	.word	0x080030ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4bb9      	ldr	r3, [pc, #740]	; (8003194 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eb2:	e1e7      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb4:	4bb8      	ldr	r3, [pc, #736]	; (8003198 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eba:	e1e3      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4bb4      	ldr	r3, [pc, #720]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec8:	4bb1      	ldr	r3, [pc, #708]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d071      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	4bae      	ldr	r3, [pc, #696]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0c:	0150      	lsls	r0, r2, #5
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4621      	mov	r1, r4
 8002f14:	1a51      	subs	r1, r2, r1
 8002f16:	6439      	str	r1, [r7, #64]	; 0x40
 8002f18:	4629      	mov	r1, r5
 8002f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	018b      	lsls	r3, r1, #6
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f36:	4641      	mov	r1, r8
 8002f38:	018a      	lsls	r2, r1, #6
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	1a51      	subs	r1, r2, r1
 8002f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f40:	4649      	mov	r1, r9
 8002f42:	eb63 0301 	sbc.w	r3, r3, r1
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f54:	4649      	mov	r1, r9
 8002f56:	00cb      	lsls	r3, r1, #3
 8002f58:	4641      	mov	r1, r8
 8002f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f5e:	4641      	mov	r1, r8
 8002f60:	00ca      	lsls	r2, r1, #3
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	4622      	mov	r2, r4
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6e:	462b      	mov	r3, r5
 8002f70:	460a      	mov	r2, r1
 8002f72:	eb42 0303 	adc.w	r3, r2, r3
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f84:	4629      	mov	r1, r5
 8002f86:	024b      	lsls	r3, r1, #9
 8002f88:	4621      	mov	r1, r4
 8002f8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8e:	4621      	mov	r1, r4
 8002f90:	024a      	lsls	r2, r1, #9
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fa8:	f7fd fe3e 	bl	8000c28 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb6:	e067      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	f04f 0000 	mov.w	r0, #0
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	0159      	lsls	r1, r3, #5
 8002fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fec:	0150      	lsls	r0, r2, #5
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	1a51      	subs	r1, r2, r1
 8002ff6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800300c:	4649      	mov	r1, r9
 800300e:	018b      	lsls	r3, r1, #6
 8003010:	4641      	mov	r1, r8
 8003012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003016:	4641      	mov	r1, r8
 8003018:	018a      	lsls	r2, r1, #6
 800301a:	4641      	mov	r1, r8
 800301c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003020:	4649      	mov	r1, r9
 8003022:	eb63 0b01 	sbc.w	fp, r3, r1
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003032:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303a:	4692      	mov	sl, r2
 800303c:	469b      	mov	fp, r3
 800303e:	4623      	mov	r3, r4
 8003040:	eb1a 0303 	adds.w	r3, sl, r3
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	462b      	mov	r3, r5
 8003048:	eb4b 0303 	adc.w	r3, fp, r3
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800305a:	4629      	mov	r1, r5
 800305c:	028b      	lsls	r3, r1, #10
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003064:	4621      	mov	r1, r4
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003070:	2200      	movs	r2, #0
 8003072:	673b      	str	r3, [r7, #112]	; 0x70
 8003074:	677a      	str	r2, [r7, #116]	; 0x74
 8003076:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800307a:	f7fd fdd5 	bl	8000c28 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4613      	mov	r3, r2
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800309a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800309e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030aa:	e0eb      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ac:	4b38      	ldr	r3, [pc, #224]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d06b      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	2200      	movs	r2, #0
 80030cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	663b      	str	r3, [r7, #96]	; 0x60
 80030d8:	2300      	movs	r3, #0
 80030da:	667b      	str	r3, [r7, #100]	; 0x64
 80030dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	f04f 0000 	mov.w	r0, #0
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	0159      	lsls	r1, r3, #5
 80030ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f2:	0150      	lsls	r0, r2, #5
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4621      	mov	r1, r4
 80030fa:	1a51      	subs	r1, r2, r1
 80030fc:	61b9      	str	r1, [r7, #24]
 80030fe:	4629      	mov	r1, r5
 8003100:	eb63 0301 	sbc.w	r3, r3, r1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003112:	4659      	mov	r1, fp
 8003114:	018b      	lsls	r3, r1, #6
 8003116:	4651      	mov	r1, sl
 8003118:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800311c:	4651      	mov	r1, sl
 800311e:	018a      	lsls	r2, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ebb2 0801 	subs.w	r8, r2, r1
 8003126:	4659      	mov	r1, fp
 8003128:	eb63 0901 	sbc.w	r9, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003138:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003140:	4690      	mov	r8, r2
 8003142:	4699      	mov	r9, r3
 8003144:	4623      	mov	r3, r4
 8003146:	eb18 0303 	adds.w	r3, r8, r3
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003160:	4629      	mov	r1, r5
 8003162:	024b      	lsls	r3, r1, #9
 8003164:	4621      	mov	r1, r4
 8003166:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800316a:	4621      	mov	r1, r4
 800316c:	024a      	lsls	r2, r1, #9
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003176:	2200      	movs	r2, #0
 8003178:	65bb      	str	r3, [r7, #88]	; 0x58
 800317a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800317c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003180:	f7fd fd52 	bl	8000c28 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800318e:	e065      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x420>
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_GetSysClockFreq+0x458>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	2200      	movs	r2, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	4611      	mov	r1, r2
 80031a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ac:	653b      	str	r3, [r7, #80]	; 0x50
 80031ae:	2300      	movs	r3, #0
 80031b0:	657b      	str	r3, [r7, #84]	; 0x54
 80031b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031b6:	4642      	mov	r2, r8
 80031b8:	464b      	mov	r3, r9
 80031ba:	f04f 0000 	mov.w	r0, #0
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	0159      	lsls	r1, r3, #5
 80031c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c8:	0150      	lsls	r0, r2, #5
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4641      	mov	r1, r8
 80031d0:	1a51      	subs	r1, r2, r1
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	4649      	mov	r1, r9
 80031d6:	eb63 0301 	sbc.w	r3, r3, r1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031e8:	4659      	mov	r1, fp
 80031ea:	018b      	lsls	r3, r1, #6
 80031ec:	4651      	mov	r1, sl
 80031ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f2:	4651      	mov	r1, sl
 80031f4:	018a      	lsls	r2, r1, #6
 80031f6:	4651      	mov	r1, sl
 80031f8:	1a54      	subs	r4, r2, r1
 80031fa:	4659      	mov	r1, fp
 80031fc:	eb63 0501 	sbc.w	r5, r3, r1
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	464b      	mov	r3, r9
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003244:	2200      	movs	r2, #0
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
 8003248:	64fa      	str	r2, [r7, #76]	; 0x4c
 800324a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800324e:	f7fd fceb 	bl	8000c28 <__aeabi_uldivmod>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4613      	mov	r3, r2
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_RCC_GetSysClockFreq+0x458>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0f1b      	lsrs	r3, r3, #28
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800326a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800326e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800327a:	e003      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_GetSysClockFreq+0x45c>)
 800327e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003288:	4618      	mov	r0, r3
 800328a:	37b8      	adds	r7, #184	; 0xb8
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	00f42400 	.word	0x00f42400

0800329c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e28d      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8083 	beq.w	80033c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032bc:	4b94      	ldr	r3, [pc, #592]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d019      	beq.n	80032fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c8:	4b91      	ldr	r3, [pc, #580]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d4:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e0:	d00c      	beq.n	80032fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d112      	bne.n	8003314 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fa:	d10b      	bne.n	8003314 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	4b84      	ldr	r3, [pc, #528]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x124>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d157      	bne.n	80033c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e25a      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d106      	bne.n	800332c <HAL_RCC_OscConfig+0x90>
 800331e:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7b      	ldr	r2, [pc, #492]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0xcc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0xb4>
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b73      	ldr	r3, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a72      	ldr	r2, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0xcc>
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6e      	ldr	r2, [pc, #440]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6b      	ldr	r2, [pc, #428]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fd3c 	bl	8001dec <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fd38 	bl	8001dec <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e21f      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0xdc>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fd28 	bl	8001dec <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fd24 	bl	8001dec <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e20b      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x104>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d06f      	beq.n	80034ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033da:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033e6:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x186>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1d3      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4937      	ldr	r1, [pc, #220]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x278>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe fcd1 	bl	8001dec <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344e:	f7fe fccd 	bl	8001dec <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1b4      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4925      	ldr	r1, [pc, #148]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_OscConfig+0x278>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fcb0 	bl	8001dec <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003490:	f7fe fcac 	bl	8001dec <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e193      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d036      	beq.n	8003528 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fc90 	bl	8001dec <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fc8c 	bl	8001dec <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e173      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x234>
 80034ee:	e01b      	b.n	8003528 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fc79 	bl	8001dec <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	e00e      	b.n	800351c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe fc75 	bl	8001dec <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d907      	bls.n	800351c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e15c      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ea      	bne.n	80034fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8097 	beq.w	8003664 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b83      	ldr	r3, [pc, #524]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b7f      	ldr	r3, [pc, #508]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a7e      	ldr	r2, [pc, #504]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b79      	ldr	r3, [pc, #484]	; (800374c <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x4b0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x4b0>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe fc35 	bl	8001dec <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe fc31 	bl	8001dec <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e118      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b6c      	ldr	r3, [pc, #432]	; (800374c <HAL_RCC_OscConfig+0x4b0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x31e>
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x358>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x340>
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x358>
 80035dc:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a59      	ldr	r2, [pc, #356]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b57      	ldr	r3, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	f023 0304 	bic.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe fbf6 	bl	8001dec <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe fbf2 	bl	8001dec <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0d7      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ee      	beq.n	8003604 <HAL_RCC_OscConfig+0x368>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fbe0 	bl	8001dec <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fbdc 	bl	8001dec <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0c1      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ee      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80ad 	beq.w	80037c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d060      	beq.n	800373c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d145      	bne.n	800370e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x4b4>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe fbb0 	bl	8001dec <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe fbac 	bl	8001dec <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e093      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	3b01      	subs	r3, #1
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	071b      	lsls	r3, r3, #28
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4b4>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fb81 	bl	8001dec <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe fb7d 	bl	8001dec <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e064      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x452>
 800370c:	e05c      	b.n	80037c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x4b4>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fb6a 	bl	8001dec <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe fb66 	bl	8001dec <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e04d      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x480>
 800373a:	e045      	b.n	80037c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e040      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
 8003750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCC_OscConfig+0x538>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d030      	beq.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d129      	bne.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d122      	bne.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800378c:	4293      	cmp	r3, r2
 800378e:	d119      	bne.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d10f      	bne.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe f980 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fc70 	bl	80040fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e04e      	b.n	800392e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_TIM_Base_Start_IT+0xc4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d01d      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_TIM_Base_Start_IT+0xc8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_TIM_Base_Start_IT+0xcc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_TIM_Base_Start_IT+0xd0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_TIM_Base_Start_IT+0xd4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_TIM_Base_Start_IT+0xd8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_TIM_Base_Start_IT+0xdc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d111      	bne.n	800391c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b06      	cmp	r3, #6
 8003908:	d010      	beq.n	800392c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	e007      	b.n	800392c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40001800 	.word	0x40001800

08003958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe f898 	bl	8001ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 fbb0 	bl	80040fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_TIM_PWM_Start+0x24>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e022      	b.n	8003a62 <HAL_TIM_PWM_Start+0x6a>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d109      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x3e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e015      	b.n	8003a62 <HAL_TIM_PWM_Start+0x6a>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start+0x58>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e008      	b.n	8003a62 <HAL_TIM_PWM_Start+0x6a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07c      	b.n	8003b64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x82>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	e013      	b.n	8003aa2 <HAL_TIM_PWM_Start+0xaa>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0x92>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a88:	e00b      	b.n	8003aa2 <HAL_TIM_PWM_Start+0xaa>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	e003      	b.n	8003aa2 <HAL_TIM_PWM_Start+0xaa>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fe10 	bl	80046d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_TIM_PWM_Start+0x174>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_PWM_Start+0xcc>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <HAL_TIM_PWM_Start+0x178>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0xd0>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_TIM_PWM_Start+0xd2>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_TIM_PWM_Start+0x174>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d01d      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_TIM_PWM_Start+0x17c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_TIM_PWM_Start+0x180>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_TIM_PWM_Start+0x184>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_TIM_PWM_Start+0x178>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_TIM_PWM_Start+0x188>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x136>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_TIM_PWM_Start+0x18c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d010      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	e007      	b.n	8003b62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40001800 	.word	0x40001800

08003b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0202 	mvn.w	r2, #2
 8003bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa77 	bl	80040be <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa69 	bl	80040aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa7a 	bl	80040d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0204 	mvn.w	r2, #4
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa4d 	bl	80040be <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa3f 	bl	80040aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa50 	bl	80040d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0208 	mvn.w	r2, #8
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa23 	bl	80040be <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa15 	bl	80040aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa26 	bl	80040d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0210 	mvn.w	r2, #16
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9f9 	bl	80040be <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9eb 	bl	80040aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9fc 	bl	80040d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0201 	mvn.w	r2, #1
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fb0a 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fdca 	bl	80048cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9c1 	bl	80040e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0220 	mvn.w	r2, #32
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fd94 	bl	80048b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0ae      	b.n	8003f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	f200 809f 	bhi.w	8003f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003f05 	.word	0x08003f05
 8003dd4:	08003f05 	.word	0x08003f05
 8003dd8:	08003f05 	.word	0x08003f05
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	08003f05 	.word	0x08003f05
 8003de4:	08003f05 	.word	0x08003f05
 8003de8:	08003f05 	.word	0x08003f05
 8003dec:	08003e83 	.word	0x08003e83
 8003df0:	08003f05 	.word	0x08003f05
 8003df4:	08003f05 	.word	0x08003f05
 8003df8:	08003f05 	.word	0x08003f05
 8003dfc:	08003ec3 	.word	0x08003ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fa18 	bl	800423c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0208 	orr.w	r2, r2, #8
 8003e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0204 	bic.w	r2, r2, #4
 8003e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	619a      	str	r2, [r3, #24]
      break;
 8003e3e:	e064      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa68 	bl	800431c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6999      	ldr	r1, [r3, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	619a      	str	r2, [r3, #24]
      break;
 8003e80:	e043      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fabd 	bl	8004408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0208 	orr.w	r2, r2, #8
 8003e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0204 	bic.w	r2, r2, #4
 8003eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
      break;
 8003ec0:	e023      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb11 	bl	80044f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69d9      	ldr	r1, [r3, #28]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	021a      	lsls	r2, r3, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	61da      	str	r2, [r3, #28]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_TIM_ConfigClockSource+0x1c>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0b4      	b.n	80040a2 <HAL_TIM_ConfigClockSource+0x186>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f70:	d03e      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	f200 8087 	bhi.w	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	f000 8086 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x172>
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d87f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b70      	cmp	r3, #112	; 0x70
 8003f8a:	d01a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8003f8c:	2b70      	cmp	r3, #112	; 0x70
 8003f8e:	d87b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	2b60      	cmp	r3, #96	; 0x60
 8003f92:	d050      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x11a>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d877      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b50      	cmp	r3, #80	; 0x50
 8003f9a:	d03c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xfa>
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d873      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d058      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x13a>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d86f      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa8:	2b30      	cmp	r3, #48	; 0x30
 8003faa:	d064      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15a>
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d86b      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d060      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15a>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d867      	bhi.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05c      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15a>
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d05a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x15a>
 8003fc0:	e062      	b.n	8004088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6899      	ldr	r1, [r3, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f000 fb5d 	bl	8004690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	609a      	str	r2, [r3, #8]
      break;
 8003fee:	e04f      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f000 fb46 	bl	8004690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e03c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	461a      	mov	r2, r3
 8004024:	f000 faba 	bl	800459c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2150      	movs	r1, #80	; 0x50
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fb13 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004034:	e02c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	461a      	mov	r2, r3
 8004044:	f000 fad9 	bl	80045fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2160      	movs	r1, #96	; 0x60
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb03 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004054:	e01c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	461a      	mov	r2, r3
 8004064:	f000 fa9a 	bl	800459c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2140      	movs	r1, #64	; 0x40
 800406e:	4618      	mov	r0, r3
 8004070:	f000 faf3 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004074:	e00c      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f000 faea 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004086:	e003      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e000      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800408e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a40      	ldr	r2, [pc, #256]	; (8004210 <TIM_Base_SetConfig+0x114>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d013      	beq.n	800413c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d00f      	beq.n	800413c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3d      	ldr	r2, [pc, #244]	; (8004214 <TIM_Base_SetConfig+0x118>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <TIM_Base_SetConfig+0x11c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3b      	ldr	r2, [pc, #236]	; (800421c <TIM_Base_SetConfig+0x120>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <TIM_Base_SetConfig+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2f      	ldr	r2, [pc, #188]	; (8004210 <TIM_Base_SetConfig+0x114>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d02b      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d027      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <TIM_Base_SetConfig+0x118>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d023      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <TIM_Base_SetConfig+0x11c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <TIM_Base_SetConfig+0x120>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01b      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a29      	ldr	r2, [pc, #164]	; (8004220 <TIM_Base_SetConfig+0x124>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d017      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <TIM_Base_SetConfig+0x128>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <TIM_Base_SetConfig+0x12c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00f      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <TIM_Base_SetConfig+0x130>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <TIM_Base_SetConfig+0x134>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a24      	ldr	r2, [pc, #144]	; (8004234 <TIM_Base_SetConfig+0x138>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a23      	ldr	r2, [pc, #140]	; (8004238 <TIM_Base_SetConfig+0x13c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d108      	bne.n	80041c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <TIM_Base_SetConfig+0x114>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0xf8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <TIM_Base_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d103      	bne.n	80041fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	615a      	str	r2, [r3, #20]
}
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010000 	.word	0x40010000
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40010400 	.word	0x40010400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800
 8004230:	40001800 	.word	0x40001800
 8004234:	40001c00 	.word	0x40001c00
 8004238:	40002000 	.word	0x40002000

0800423c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a20      	ldr	r2, [pc, #128]	; (8004314 <TIM_OC1_SetConfig+0xd8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC1_SetConfig+0x64>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <TIM_OC1_SetConfig+0xdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10c      	bne.n	80042ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0308 	bic.w	r3, r3, #8
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <TIM_OC1_SetConfig+0xd8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_OC1_SetConfig+0x8e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC1_SetConfig+0xdc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d111      	bne.n	80042ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400

0800431c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0210 	bic.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0320 	bic.w	r3, r3, #32
 8004366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <TIM_OC2_SetConfig+0xe4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_OC2_SetConfig+0x68>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <TIM_OC2_SetConfig+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10d      	bne.n	80043a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <TIM_OC2_SetConfig+0xe4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_OC2_SetConfig+0x94>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <TIM_OC2_SetConfig+0xe8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d113      	bne.n	80043d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400

08004408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <TIM_OC3_SetConfig+0xe0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_OC3_SetConfig+0x66>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a20      	ldr	r2, [pc, #128]	; (80044ec <TIM_OC3_SetConfig+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC3_SetConfig+0xe0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_OC3_SetConfig+0x92>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC3_SetConfig+0xe4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40010400 	.word	0x40010400

080044f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800453a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <TIM_OC4_SetConfig+0xa4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC4_SetConfig+0x68>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <TIM_OC4_SetConfig+0xa8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d109      	bne.n	800456c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800455e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40010400 	.word	0x40010400

0800459c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 030a 	bic.w	r3, r3, #10
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0210 	bic.w	r2, r3, #16
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	f043 0307 	orr.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e05a      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a21      	ldr	r2, [pc, #132]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d01d      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40001800 	.word	0x40001800

08004814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800482c:	2302      	movs	r3, #2
 800482e:	e03d      	b.n	80048ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e03f      	b.n	8004972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd f986 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2224      	movs	r2, #36	; 0x24
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f929 	bl	8004b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b08a      	sub	sp, #40	; 0x28
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d17c      	bne.n	8004a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_UART_Transmit+0x2c>
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e075      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Transmit+0x3e>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e06e      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ce:	f7fd fa0d 	bl	8001dec <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d108      	bne.n	80049fc <HAL_UART_Transmit+0x82>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e003      	b.n	8004a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a0c:	e02a      	b.n	8004a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f840 	bl	8004a9e <UART_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e036      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3302      	adds	r3, #2
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e007      	b.n	8004a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1cf      	bne.n	8004a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2140      	movs	r1, #64	; 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f810 	bl	8004a9e <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e006      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b090      	sub	sp, #64	; 0x40
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	e050      	b.n	8004b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab6:	d04c      	beq.n	8004b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0x30>
 8004abe:	f7fd f995 	bl	8001dec <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d241      	bcs.n	8004b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aee:	637a      	str	r2, [r7, #52]	; 0x34
 8004af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e5      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b22:	623a      	str	r2, [r7, #32]
 8004b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e5      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e00f      	b.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	bf0c      	ite	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	2300      	movne	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d09f      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3740      	adds	r7, #64	; 0x40
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b0c0      	sub	sp, #256	; 0x100
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	68d9      	ldr	r1, [r3, #12]
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	ea40 0301 	orr.w	r3, r0, r1
 8004ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bd4:	f021 010c 	bic.w	r1, r1, #12
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004be2:	430b      	orrs	r3, r1
 8004be4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf6:	6999      	ldr	r1, [r3, #24]
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	ea40 0301 	orr.w	r3, r0, r1
 8004c02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b8f      	ldr	r3, [pc, #572]	; (8004e48 <UART_SetConfig+0x2cc>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d005      	beq.n	8004c1c <UART_SetConfig+0xa0>
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b8d      	ldr	r3, [pc, #564]	; (8004e4c <UART_SetConfig+0x2d0>)
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d104      	bne.n	8004c26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7fe f8fa 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 8004c20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c24:	e003      	b.n	8004c2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c26:	f7fe f8e1 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8004c2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	f040 810c 	bne.w	8004e54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	1891      	adds	r1, r2, r2
 8004c54:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c56:	415b      	adcs	r3, r3
 8004c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c5e:	4621      	mov	r1, r4
 8004c60:	eb12 0801 	adds.w	r8, r2, r1
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb43 0901 	adc.w	r9, r3, r1
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c7e:	4690      	mov	r8, r2
 8004c80:	4699      	mov	r9, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	eb18 0303 	adds.w	r3, r8, r3
 8004c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c8c:	462b      	mov	r3, r5
 8004c8e:	eb49 0303 	adc.w	r3, r9, r3
 8004c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ca2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004caa:	460b      	mov	r3, r1
 8004cac:	18db      	adds	r3, r3, r3
 8004cae:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	eb42 0303 	adc.w	r3, r2, r3
 8004cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cc0:	f7fb ffb2 	bl	8000c28 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <UART_SetConfig+0x2d4>)
 8004cca:	fba3 2302 	umull	r2, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	011c      	lsls	r4, r3, #4
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ce0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cec:	415b      	adcs	r3, r3
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	eb12 0a01 	adds.w	sl, r2, r1
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	eb43 0b01 	adc.w	fp, r3, r1
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d14:	4692      	mov	sl, r2
 8004d16:	469b      	mov	fp, r3
 8004d18:	4643      	mov	r3, r8
 8004d1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb4b 0303 	adc.w	r3, fp, r3
 8004d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d40:	460b      	mov	r3, r1
 8004d42:	18db      	adds	r3, r3, r3
 8004d44:	643b      	str	r3, [r7, #64]	; 0x40
 8004d46:	4613      	mov	r3, r2
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d56:	f7fb ff67 	bl	8000c28 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <UART_SetConfig+0x2d4>)
 8004d62:	fba3 2301 	umull	r2, r3, r3, r1
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2264      	movs	r2, #100	; 0x64
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	1acb      	subs	r3, r1, r3
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d76:	4b36      	ldr	r3, [pc, #216]	; (8004e50 <UART_SetConfig+0x2d4>)
 8004d78:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d84:	441c      	add	r4, r3
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004da0:	415b      	adcs	r3, r3
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004da8:	4641      	mov	r1, r8
 8004daa:	1851      	adds	r1, r2, r1
 8004dac:	6339      	str	r1, [r7, #48]	; 0x30
 8004dae:	4649      	mov	r1, r9
 8004db0:	414b      	adcs	r3, r1
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	00cb      	lsls	r3, r1, #3
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dca:	4651      	mov	r1, sl
 8004dcc:	00ca      	lsls	r2, r1, #3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ddc:	464b      	mov	r3, r9
 8004dde:	460a      	mov	r2, r1
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004df4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004df8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	18db      	adds	r3, r3, r3
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e02:	4613      	mov	r3, r2
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e12:	f7fb ff09 	bl	8000c28 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <UART_SetConfig+0x2d4>)
 8004e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	2164      	movs	r1, #100	; 0x64
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	3332      	adds	r3, #50	; 0x32
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <UART_SetConfig+0x2d4>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f003 0207 	and.w	r2, r3, #7
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4422      	add	r2, r4
 8004e42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e44:	e105      	b.n	8005052 <UART_SetConfig+0x4d6>
 8004e46:	bf00      	nop
 8004e48:	40011000 	.word	0x40011000
 8004e4c:	40011400 	.word	0x40011400
 8004e50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e66:	4642      	mov	r2, r8
 8004e68:	464b      	mov	r3, r9
 8004e6a:	1891      	adds	r1, r2, r2
 8004e6c:	6239      	str	r1, [r7, #32]
 8004e6e:	415b      	adcs	r3, r3
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
 8004e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e76:	4641      	mov	r1, r8
 8004e78:	1854      	adds	r4, r2, r1
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	eb43 0501 	adc.w	r5, r3, r1
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00eb      	lsls	r3, r5, #3
 8004e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	4614      	mov	r4, r2
 8004e92:	461d      	mov	r5, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	18e3      	adds	r3, r4, r3
 8004e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	008b      	lsls	r3, r1, #2
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ecc:	4621      	mov	r1, r4
 8004ece:	008a      	lsls	r2, r1, #2
 8004ed0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ed4:	f7fb fea8 	bl	8000c28 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4b60      	ldr	r3, [pc, #384]	; (8005060 <UART_SetConfig+0x4e4>)
 8004ede:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	011c      	lsls	r4, r3, #4
 8004ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	61b9      	str	r1, [r7, #24]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6139      	str	r1, [r7, #16]
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	460a      	mov	r2, r1
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f60:	4649      	mov	r1, r9
 8004f62:	008b      	lsls	r3, r1, #2
 8004f64:	4641      	mov	r1, r8
 8004f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	008a      	lsls	r2, r1, #2
 8004f6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f72:	f7fb fe59 	bl	8000c28 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <UART_SetConfig+0x4e4>)
 8004f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	2164      	movs	r1, #100	; 0x64
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	3332      	adds	r3, #50	; 0x32
 8004f8e:	4a34      	ldr	r2, [pc, #208]	; (8005060 <UART_SetConfig+0x4e4>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9a:	441c      	add	r4, r3
 8004f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa4:	677a      	str	r2, [r7, #116]	; 0x74
 8004fa6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004faa:	4642      	mov	r2, r8
 8004fac:	464b      	mov	r3, r9
 8004fae:	1891      	adds	r1, r2, r2
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	415b      	adcs	r3, r3
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fba:	4641      	mov	r1, r8
 8004fbc:	1851      	adds	r1, r2, r1
 8004fbe:	6039      	str	r1, [r7, #0]
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	414b      	adcs	r3, r1
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	00cb      	lsls	r3, r1, #3
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fdc:	4651      	mov	r1, sl
 8004fde:	00ca      	lsls	r2, r1, #3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	189b      	adds	r3, r3, r2
 8004fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fec:	464b      	mov	r3, r9
 8004fee:	460a      	mov	r2, r1
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8005000:	667a      	str	r2, [r7, #100]	; 0x64
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800500e:	4649      	mov	r1, r9
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	4641      	mov	r1, r8
 8005014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005018:	4641      	mov	r1, r8
 800501a:	008a      	lsls	r2, r1, #2
 800501c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005020:	f7fb fe02 	bl	8000c28 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <UART_SetConfig+0x4e4>)
 800502a:	fba3 1302 	umull	r1, r3, r3, r2
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2164      	movs	r1, #100	; 0x64
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	3332      	adds	r3, #50	; 0x32
 800503c:	4a08      	ldr	r2, [pc, #32]	; (8005060 <UART_SetConfig+0x4e4>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4422      	add	r2, r4
 8005050:	609a      	str	r2, [r3, #8]
}
 8005052:	bf00      	nop
 8005054:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005058:	46bd      	mov	sp, r7
 800505a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505e:	bf00      	nop
 8005060:	51eb851f 	.word	0x51eb851f

08005064 <__errno>:
 8005064:	4b01      	ldr	r3, [pc, #4]	; (800506c <__errno+0x8>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	2000000c 	.word	0x2000000c

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f002 fd50 	bl	8007b28 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	08007f74 	.word	0x08007f74
 80050ac:	08007f74 	.word	0x08007f74
 80050b0:	08007f74 	.word	0x08007f74
 80050b4:	08007f78 	.word	0x08007f78

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <__cvt>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	ec55 4b10 	vmov	r4, r5, d0
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	460e      	mov	r6, r1
 80050d4:	4619      	mov	r1, r3
 80050d6:	462b      	mov	r3, r5
 80050d8:	bfbb      	ittet	lt
 80050da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050de:	461d      	movlt	r5, r3
 80050e0:	2300      	movge	r3, #0
 80050e2:	232d      	movlt	r3, #45	; 0x2d
 80050e4:	700b      	strb	r3, [r1, #0]
 80050e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050ec:	4691      	mov	r9, r2
 80050ee:	f023 0820 	bic.w	r8, r3, #32
 80050f2:	bfbc      	itt	lt
 80050f4:	4622      	movlt	r2, r4
 80050f6:	4614      	movlt	r4, r2
 80050f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050fc:	d005      	beq.n	800510a <__cvt+0x42>
 80050fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005102:	d100      	bne.n	8005106 <__cvt+0x3e>
 8005104:	3601      	adds	r6, #1
 8005106:	2102      	movs	r1, #2
 8005108:	e000      	b.n	800510c <__cvt+0x44>
 800510a:	2103      	movs	r1, #3
 800510c:	ab03      	add	r3, sp, #12
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	ab02      	add	r3, sp, #8
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	ec45 4b10 	vmov	d0, r4, r5
 8005118:	4653      	mov	r3, sl
 800511a:	4632      	mov	r2, r6
 800511c:	f000 fce4 	bl	8005ae8 <_dtoa_r>
 8005120:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005124:	4607      	mov	r7, r0
 8005126:	d102      	bne.n	800512e <__cvt+0x66>
 8005128:	f019 0f01 	tst.w	r9, #1
 800512c:	d022      	beq.n	8005174 <__cvt+0xac>
 800512e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005132:	eb07 0906 	add.w	r9, r7, r6
 8005136:	d110      	bne.n	800515a <__cvt+0x92>
 8005138:	783b      	ldrb	r3, [r7, #0]
 800513a:	2b30      	cmp	r3, #48	; 0x30
 800513c:	d10a      	bne.n	8005154 <__cvt+0x8c>
 800513e:	2200      	movs	r2, #0
 8005140:	2300      	movs	r3, #0
 8005142:	4620      	mov	r0, r4
 8005144:	4629      	mov	r1, r5
 8005146:	f7fb fcdf 	bl	8000b08 <__aeabi_dcmpeq>
 800514a:	b918      	cbnz	r0, 8005154 <__cvt+0x8c>
 800514c:	f1c6 0601 	rsb	r6, r6, #1
 8005150:	f8ca 6000 	str.w	r6, [sl]
 8005154:	f8da 3000 	ldr.w	r3, [sl]
 8005158:	4499      	add	r9, r3
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fcd1 	bl	8000b08 <__aeabi_dcmpeq>
 8005166:	b108      	cbz	r0, 800516c <__cvt+0xa4>
 8005168:	f8cd 900c 	str.w	r9, [sp, #12]
 800516c:	2230      	movs	r2, #48	; 0x30
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	454b      	cmp	r3, r9
 8005172:	d307      	bcc.n	8005184 <__cvt+0xbc>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005178:	1bdb      	subs	r3, r3, r7
 800517a:	4638      	mov	r0, r7
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	b004      	add	sp, #16
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	1c59      	adds	r1, r3, #1
 8005186:	9103      	str	r1, [sp, #12]
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e7f0      	b.n	800516e <__cvt+0xa6>

0800518c <__exponent>:
 800518c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800518e:	4603      	mov	r3, r0
 8005190:	2900      	cmp	r1, #0
 8005192:	bfb8      	it	lt
 8005194:	4249      	neglt	r1, r1
 8005196:	f803 2b02 	strb.w	r2, [r3], #2
 800519a:	bfb4      	ite	lt
 800519c:	222d      	movlt	r2, #45	; 0x2d
 800519e:	222b      	movge	r2, #43	; 0x2b
 80051a0:	2909      	cmp	r1, #9
 80051a2:	7042      	strb	r2, [r0, #1]
 80051a4:	dd2a      	ble.n	80051fc <__exponent+0x70>
 80051a6:	f10d 0407 	add.w	r4, sp, #7
 80051aa:	46a4      	mov	ip, r4
 80051ac:	270a      	movs	r7, #10
 80051ae:	46a6      	mov	lr, r4
 80051b0:	460a      	mov	r2, r1
 80051b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80051b6:	fb07 1516 	mls	r5, r7, r6, r1
 80051ba:	3530      	adds	r5, #48	; 0x30
 80051bc:	2a63      	cmp	r2, #99	; 0x63
 80051be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80051c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051c6:	4631      	mov	r1, r6
 80051c8:	dcf1      	bgt.n	80051ae <__exponent+0x22>
 80051ca:	3130      	adds	r1, #48	; 0x30
 80051cc:	f1ae 0502 	sub.w	r5, lr, #2
 80051d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051d4:	1c44      	adds	r4, r0, #1
 80051d6:	4629      	mov	r1, r5
 80051d8:	4561      	cmp	r1, ip
 80051da:	d30a      	bcc.n	80051f2 <__exponent+0x66>
 80051dc:	f10d 0209 	add.w	r2, sp, #9
 80051e0:	eba2 020e 	sub.w	r2, r2, lr
 80051e4:	4565      	cmp	r5, ip
 80051e6:	bf88      	it	hi
 80051e8:	2200      	movhi	r2, #0
 80051ea:	4413      	add	r3, r2
 80051ec:	1a18      	subs	r0, r3, r0
 80051ee:	b003      	add	sp, #12
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051fa:	e7ed      	b.n	80051d8 <__exponent+0x4c>
 80051fc:	2330      	movs	r3, #48	; 0x30
 80051fe:	3130      	adds	r1, #48	; 0x30
 8005200:	7083      	strb	r3, [r0, #2]
 8005202:	70c1      	strb	r1, [r0, #3]
 8005204:	1d03      	adds	r3, r0, #4
 8005206:	e7f1      	b.n	80051ec <__exponent+0x60>

08005208 <_printf_float>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	ed2d 8b02 	vpush	{d8}
 8005210:	b08d      	sub	sp, #52	; 0x34
 8005212:	460c      	mov	r4, r1
 8005214:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005218:	4616      	mov	r6, r2
 800521a:	461f      	mov	r7, r3
 800521c:	4605      	mov	r5, r0
 800521e:	f001 fb47 	bl	80068b0 <_localeconv_r>
 8005222:	f8d0 a000 	ldr.w	sl, [r0]
 8005226:	4650      	mov	r0, sl
 8005228:	f7fa fff2 	bl	8000210 <strlen>
 800522c:	2300      	movs	r3, #0
 800522e:	930a      	str	r3, [sp, #40]	; 0x28
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	f8d8 3000 	ldr.w	r3, [r8]
 8005238:	f894 b018 	ldrb.w	fp, [r4, #24]
 800523c:	3307      	adds	r3, #7
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	f8c8 2000 	str.w	r2, [r8]
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005252:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800525a:	9307      	str	r3, [sp, #28]
 800525c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005260:	ee08 0a10 	vmov	s16, r0
 8005264:	4b9f      	ldr	r3, [pc, #636]	; (80054e4 <_printf_float+0x2dc>)
 8005266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526e:	f7fb fc7d 	bl	8000b6c <__aeabi_dcmpun>
 8005272:	bb88      	cbnz	r0, 80052d8 <_printf_float+0xd0>
 8005274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005278:	4b9a      	ldr	r3, [pc, #616]	; (80054e4 <_printf_float+0x2dc>)
 800527a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800527e:	f7fb fc57 	bl	8000b30 <__aeabi_dcmple>
 8005282:	bb48      	cbnz	r0, 80052d8 <_printf_float+0xd0>
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	f7fb fc46 	bl	8000b1c <__aeabi_dcmplt>
 8005290:	b110      	cbz	r0, 8005298 <_printf_float+0x90>
 8005292:	232d      	movs	r3, #45	; 0x2d
 8005294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005298:	4b93      	ldr	r3, [pc, #588]	; (80054e8 <_printf_float+0x2e0>)
 800529a:	4894      	ldr	r0, [pc, #592]	; (80054ec <_printf_float+0x2e4>)
 800529c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052a0:	bf94      	ite	ls
 80052a2:	4698      	movls	r8, r3
 80052a4:	4680      	movhi	r8, r0
 80052a6:	2303      	movs	r3, #3
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	f023 0204 	bic.w	r2, r3, #4
 80052b0:	6022      	str	r2, [r4, #0]
 80052b2:	f04f 0900 	mov.w	r9, #0
 80052b6:	9700      	str	r7, [sp, #0]
 80052b8:	4633      	mov	r3, r6
 80052ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f9d8 	bl	8005674 <_printf_common>
 80052c4:	3001      	adds	r0, #1
 80052c6:	f040 8090 	bne.w	80053ea <_printf_float+0x1e2>
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ce:	b00d      	add	sp, #52	; 0x34
 80052d0:	ecbd 8b02 	vpop	{d8}
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	4649      	mov	r1, r9
 80052e0:	f7fb fc44 	bl	8000b6c <__aeabi_dcmpun>
 80052e4:	b140      	cbz	r0, 80052f8 <_printf_float+0xf0>
 80052e6:	464b      	mov	r3, r9
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbc      	itt	lt
 80052ec:	232d      	movlt	r3, #45	; 0x2d
 80052ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052f2:	487f      	ldr	r0, [pc, #508]	; (80054f0 <_printf_float+0x2e8>)
 80052f4:	4b7f      	ldr	r3, [pc, #508]	; (80054f4 <_printf_float+0x2ec>)
 80052f6:	e7d1      	b.n	800529c <_printf_float+0x94>
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052fe:	9206      	str	r2, [sp, #24]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	d13f      	bne.n	8005384 <_printf_float+0x17c>
 8005304:	2306      	movs	r3, #6
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	9b05      	ldr	r3, [sp, #20]
 800530a:	6861      	ldr	r1, [r4, #4]
 800530c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005310:	2300      	movs	r3, #0
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	ab0a      	add	r3, sp, #40	; 0x28
 8005316:	e9cd b301 	strd	fp, r3, [sp, #4]
 800531a:	ab09      	add	r3, sp, #36	; 0x24
 800531c:	ec49 8b10 	vmov	d0, r8, r9
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005328:	4628      	mov	r0, r5
 800532a:	f7ff fecd 	bl	80050c8 <__cvt>
 800532e:	9b06      	ldr	r3, [sp, #24]
 8005330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005332:	2b47      	cmp	r3, #71	; 0x47
 8005334:	4680      	mov	r8, r0
 8005336:	d108      	bne.n	800534a <_printf_float+0x142>
 8005338:	1cc8      	adds	r0, r1, #3
 800533a:	db02      	blt.n	8005342 <_printf_float+0x13a>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	dd41      	ble.n	80053c6 <_printf_float+0x1be>
 8005342:	f1ab 0b02 	sub.w	fp, fp, #2
 8005346:	fa5f fb8b 	uxtb.w	fp, fp
 800534a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800534e:	d820      	bhi.n	8005392 <_printf_float+0x18a>
 8005350:	3901      	subs	r1, #1
 8005352:	465a      	mov	r2, fp
 8005354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005358:	9109      	str	r1, [sp, #36]	; 0x24
 800535a:	f7ff ff17 	bl	800518c <__exponent>
 800535e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005360:	1813      	adds	r3, r2, r0
 8005362:	2a01      	cmp	r2, #1
 8005364:	4681      	mov	r9, r0
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	dc02      	bgt.n	8005370 <_printf_float+0x168>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	07d2      	lsls	r2, r2, #31
 800536e:	d501      	bpl.n	8005374 <_printf_float+0x16c>
 8005370:	3301      	adds	r3, #1
 8005372:	6123      	str	r3, [r4, #16]
 8005374:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005378:	2b00      	cmp	r3, #0
 800537a:	d09c      	beq.n	80052b6 <_printf_float+0xae>
 800537c:	232d      	movs	r3, #45	; 0x2d
 800537e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005382:	e798      	b.n	80052b6 <_printf_float+0xae>
 8005384:	9a06      	ldr	r2, [sp, #24]
 8005386:	2a47      	cmp	r2, #71	; 0x47
 8005388:	d1be      	bne.n	8005308 <_printf_float+0x100>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1bc      	bne.n	8005308 <_printf_float+0x100>
 800538e:	2301      	movs	r3, #1
 8005390:	e7b9      	b.n	8005306 <_printf_float+0xfe>
 8005392:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005396:	d118      	bne.n	80053ca <_printf_float+0x1c2>
 8005398:	2900      	cmp	r1, #0
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	dd0b      	ble.n	80053b6 <_printf_float+0x1ae>
 800539e:	6121      	str	r1, [r4, #16]
 80053a0:	b913      	cbnz	r3, 80053a8 <_printf_float+0x1a0>
 80053a2:	6822      	ldr	r2, [r4, #0]
 80053a4:	07d0      	lsls	r0, r2, #31
 80053a6:	d502      	bpl.n	80053ae <_printf_float+0x1a6>
 80053a8:	3301      	adds	r3, #1
 80053aa:	440b      	add	r3, r1
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80053b0:	f04f 0900 	mov.w	r9, #0
 80053b4:	e7de      	b.n	8005374 <_printf_float+0x16c>
 80053b6:	b913      	cbnz	r3, 80053be <_printf_float+0x1b6>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	07d2      	lsls	r2, r2, #31
 80053bc:	d501      	bpl.n	80053c2 <_printf_float+0x1ba>
 80053be:	3302      	adds	r3, #2
 80053c0:	e7f4      	b.n	80053ac <_printf_float+0x1a4>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e7f2      	b.n	80053ac <_printf_float+0x1a4>
 80053c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053cc:	4299      	cmp	r1, r3
 80053ce:	db05      	blt.n	80053dc <_printf_float+0x1d4>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	6121      	str	r1, [r4, #16]
 80053d4:	07d8      	lsls	r0, r3, #31
 80053d6:	d5ea      	bpl.n	80053ae <_printf_float+0x1a6>
 80053d8:	1c4b      	adds	r3, r1, #1
 80053da:	e7e7      	b.n	80053ac <_printf_float+0x1a4>
 80053dc:	2900      	cmp	r1, #0
 80053de:	bfd4      	ite	le
 80053e0:	f1c1 0202 	rsble	r2, r1, #2
 80053e4:	2201      	movgt	r2, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	e7e0      	b.n	80053ac <_printf_float+0x1a4>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	055a      	lsls	r2, r3, #21
 80053ee:	d407      	bmi.n	8005400 <_printf_float+0x1f8>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	4642      	mov	r2, r8
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	d12c      	bne.n	8005458 <_printf_float+0x250>
 80053fe:	e764      	b.n	80052ca <_printf_float+0xc2>
 8005400:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005404:	f240 80e0 	bls.w	80055c8 <_printf_float+0x3c0>
 8005408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800540c:	2200      	movs	r2, #0
 800540e:	2300      	movs	r3, #0
 8005410:	f7fb fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8005414:	2800      	cmp	r0, #0
 8005416:	d034      	beq.n	8005482 <_printf_float+0x27a>
 8005418:	4a37      	ldr	r2, [pc, #220]	; (80054f8 <_printf_float+0x2f0>)
 800541a:	2301      	movs	r3, #1
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	f43f af51 	beq.w	80052ca <_printf_float+0xc2>
 8005428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800542c:	429a      	cmp	r2, r3
 800542e:	db02      	blt.n	8005436 <_printf_float+0x22e>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	07d8      	lsls	r0, r3, #31
 8005434:	d510      	bpl.n	8005458 <_printf_float+0x250>
 8005436:	ee18 3a10 	vmov	r3, s16
 800543a:	4652      	mov	r2, sl
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f af41 	beq.w	80052ca <_printf_float+0xc2>
 8005448:	f04f 0800 	mov.w	r8, #0
 800544c:	f104 091a 	add.w	r9, r4, #26
 8005450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	4543      	cmp	r3, r8
 8005456:	dc09      	bgt.n	800546c <_printf_float+0x264>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	079b      	lsls	r3, r3, #30
 800545c:	f100 8105 	bmi.w	800566a <_printf_float+0x462>
 8005460:	68e0      	ldr	r0, [r4, #12]
 8005462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005464:	4298      	cmp	r0, r3
 8005466:	bfb8      	it	lt
 8005468:	4618      	movlt	r0, r3
 800546a:	e730      	b.n	80052ce <_printf_float+0xc6>
 800546c:	2301      	movs	r3, #1
 800546e:	464a      	mov	r2, r9
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	f43f af27 	beq.w	80052ca <_printf_float+0xc2>
 800547c:	f108 0801 	add.w	r8, r8, #1
 8005480:	e7e6      	b.n	8005450 <_printf_float+0x248>
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	dc39      	bgt.n	80054fc <_printf_float+0x2f4>
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <_printf_float+0x2f0>)
 800548a:	2301      	movs	r3, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f af19 	beq.w	80052ca <_printf_float+0xc2>
 8005498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800549c:	4313      	orrs	r3, r2
 800549e:	d102      	bne.n	80054a6 <_printf_float+0x29e>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	07d9      	lsls	r1, r3, #31
 80054a4:	d5d8      	bpl.n	8005458 <_printf_float+0x250>
 80054a6:	ee18 3a10 	vmov	r3, s16
 80054aa:	4652      	mov	r2, sl
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	f43f af09 	beq.w	80052ca <_printf_float+0xc2>
 80054b8:	f04f 0900 	mov.w	r9, #0
 80054bc:	f104 0a1a 	add.w	sl, r4, #26
 80054c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c2:	425b      	negs	r3, r3
 80054c4:	454b      	cmp	r3, r9
 80054c6:	dc01      	bgt.n	80054cc <_printf_float+0x2c4>
 80054c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ca:	e792      	b.n	80053f2 <_printf_float+0x1ea>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4652      	mov	r2, sl
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f aef7 	beq.w	80052ca <_printf_float+0xc2>
 80054dc:	f109 0901 	add.w	r9, r9, #1
 80054e0:	e7ee      	b.n	80054c0 <_printf_float+0x2b8>
 80054e2:	bf00      	nop
 80054e4:	7fefffff 	.word	0x7fefffff
 80054e8:	08007b94 	.word	0x08007b94
 80054ec:	08007b98 	.word	0x08007b98
 80054f0:	08007ba0 	.word	0x08007ba0
 80054f4:	08007b9c 	.word	0x08007b9c
 80054f8:	08007ba4 	.word	0x08007ba4
 80054fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005500:	429a      	cmp	r2, r3
 8005502:	bfa8      	it	ge
 8005504:	461a      	movge	r2, r3
 8005506:	2a00      	cmp	r2, #0
 8005508:	4691      	mov	r9, r2
 800550a:	dc37      	bgt.n	800557c <_printf_float+0x374>
 800550c:	f04f 0b00 	mov.w	fp, #0
 8005510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005514:	f104 021a 	add.w	r2, r4, #26
 8005518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	eba3 0309 	sub.w	r3, r3, r9
 8005520:	455b      	cmp	r3, fp
 8005522:	dc33      	bgt.n	800558c <_printf_float+0x384>
 8005524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005528:	429a      	cmp	r2, r3
 800552a:	db3b      	blt.n	80055a4 <_printf_float+0x39c>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07da      	lsls	r2, r3, #31
 8005530:	d438      	bmi.n	80055a4 <_printf_float+0x39c>
 8005532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005534:	9a05      	ldr	r2, [sp, #20]
 8005536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005538:	1a9a      	subs	r2, r3, r2
 800553a:	eba3 0901 	sub.w	r9, r3, r1
 800553e:	4591      	cmp	r9, r2
 8005540:	bfa8      	it	ge
 8005542:	4691      	movge	r9, r2
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	dc35      	bgt.n	80055b6 <_printf_float+0x3ae>
 800554a:	f04f 0800 	mov.w	r8, #0
 800554e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005552:	f104 0a1a 	add.w	sl, r4, #26
 8005556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	eba3 0309 	sub.w	r3, r3, r9
 8005560:	4543      	cmp	r3, r8
 8005562:	f77f af79 	ble.w	8005458 <_printf_float+0x250>
 8005566:	2301      	movs	r3, #1
 8005568:	4652      	mov	r2, sl
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f aeaa 	beq.w	80052ca <_printf_float+0xc2>
 8005576:	f108 0801 	add.w	r8, r8, #1
 800557a:	e7ec      	b.n	8005556 <_printf_float+0x34e>
 800557c:	4613      	mov	r3, r2
 800557e:	4631      	mov	r1, r6
 8005580:	4642      	mov	r2, r8
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	d1c0      	bne.n	800550c <_printf_float+0x304>
 800558a:	e69e      	b.n	80052ca <_printf_float+0xc2>
 800558c:	2301      	movs	r3, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	9205      	str	r2, [sp, #20]
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f ae97 	beq.w	80052ca <_printf_float+0xc2>
 800559c:	9a05      	ldr	r2, [sp, #20]
 800559e:	f10b 0b01 	add.w	fp, fp, #1
 80055a2:	e7b9      	b.n	8005518 <_printf_float+0x310>
 80055a4:	ee18 3a10 	vmov	r3, s16
 80055a8:	4652      	mov	r2, sl
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	d1be      	bne.n	8005532 <_printf_float+0x32a>
 80055b4:	e689      	b.n	80052ca <_printf_float+0xc2>
 80055b6:	9a05      	ldr	r2, [sp, #20]
 80055b8:	464b      	mov	r3, r9
 80055ba:	4442      	add	r2, r8
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	d1c1      	bne.n	800554a <_printf_float+0x342>
 80055c6:	e680      	b.n	80052ca <_printf_float+0xc2>
 80055c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	dc01      	bgt.n	80055d2 <_printf_float+0x3ca>
 80055ce:	07db      	lsls	r3, r3, #31
 80055d0:	d538      	bpl.n	8005644 <_printf_float+0x43c>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4642      	mov	r2, r8
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae74 	beq.w	80052ca <_printf_float+0xc2>
 80055e2:	ee18 3a10 	vmov	r3, s16
 80055e6:	4652      	mov	r2, sl
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f ae6b 	beq.w	80052ca <_printf_float+0xc2>
 80055f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f7fb fa84 	bl	8000b08 <__aeabi_dcmpeq>
 8005600:	b9d8      	cbnz	r0, 800563a <_printf_float+0x432>
 8005602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005604:	f108 0201 	add.w	r2, r8, #1
 8005608:	3b01      	subs	r3, #1
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	d10e      	bne.n	8005632 <_printf_float+0x42a>
 8005614:	e659      	b.n	80052ca <_printf_float+0xc2>
 8005616:	2301      	movs	r3, #1
 8005618:	4652      	mov	r2, sl
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f ae52 	beq.w	80052ca <_printf_float+0xc2>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	4543      	cmp	r3, r8
 8005630:	dcf1      	bgt.n	8005616 <_printf_float+0x40e>
 8005632:	464b      	mov	r3, r9
 8005634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005638:	e6dc      	b.n	80053f4 <_printf_float+0x1ec>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	f104 0a1a 	add.w	sl, r4, #26
 8005642:	e7f2      	b.n	800562a <_printf_float+0x422>
 8005644:	2301      	movs	r3, #1
 8005646:	4642      	mov	r2, r8
 8005648:	e7df      	b.n	800560a <_printf_float+0x402>
 800564a:	2301      	movs	r3, #1
 800564c:	464a      	mov	r2, r9
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f ae38 	beq.w	80052ca <_printf_float+0xc2>
 800565a:	f108 0801 	add.w	r8, r8, #1
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005662:	1a5b      	subs	r3, r3, r1
 8005664:	4543      	cmp	r3, r8
 8005666:	dcf0      	bgt.n	800564a <_printf_float+0x442>
 8005668:	e6fa      	b.n	8005460 <_printf_float+0x258>
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	f104 0919 	add.w	r9, r4, #25
 8005672:	e7f4      	b.n	800565e <_printf_float+0x456>

08005674 <_printf_common>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	4616      	mov	r6, r2
 800567a:	4699      	mov	r9, r3
 800567c:	688a      	ldr	r2, [r1, #8]
 800567e:	690b      	ldr	r3, [r1, #16]
 8005680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005684:	4293      	cmp	r3, r2
 8005686:	bfb8      	it	lt
 8005688:	4613      	movlt	r3, r2
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005690:	4607      	mov	r7, r0
 8005692:	460c      	mov	r4, r1
 8005694:	b10a      	cbz	r2, 800569a <_printf_common+0x26>
 8005696:	3301      	adds	r3, #1
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	0699      	lsls	r1, r3, #26
 800569e:	bf42      	ittt	mi
 80056a0:	6833      	ldrmi	r3, [r6, #0]
 80056a2:	3302      	addmi	r3, #2
 80056a4:	6033      	strmi	r3, [r6, #0]
 80056a6:	6825      	ldr	r5, [r4, #0]
 80056a8:	f015 0506 	ands.w	r5, r5, #6
 80056ac:	d106      	bne.n	80056bc <_printf_common+0x48>
 80056ae:	f104 0a19 	add.w	sl, r4, #25
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	6832      	ldr	r2, [r6, #0]
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	dc26      	bgt.n	800570a <_printf_common+0x96>
 80056bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056c0:	1e13      	subs	r3, r2, #0
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	bf18      	it	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	0692      	lsls	r2, r2, #26
 80056ca:	d42b      	bmi.n	8005724 <_printf_common+0xb0>
 80056cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056d0:	4649      	mov	r1, r9
 80056d2:	4638      	mov	r0, r7
 80056d4:	47c0      	blx	r8
 80056d6:	3001      	adds	r0, #1
 80056d8:	d01e      	beq.n	8005718 <_printf_common+0xa4>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	68e5      	ldr	r5, [r4, #12]
 80056de:	6832      	ldr	r2, [r6, #0]
 80056e0:	f003 0306 	and.w	r3, r3, #6
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	bf08      	it	eq
 80056e8:	1aad      	subeq	r5, r5, r2
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	6922      	ldr	r2, [r4, #16]
 80056ee:	bf0c      	ite	eq
 80056f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f4:	2500      	movne	r5, #0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bfc4      	itt	gt
 80056fa:	1a9b      	subgt	r3, r3, r2
 80056fc:	18ed      	addgt	r5, r5, r3
 80056fe:	2600      	movs	r6, #0
 8005700:	341a      	adds	r4, #26
 8005702:	42b5      	cmp	r5, r6
 8005704:	d11a      	bne.n	800573c <_printf_common+0xc8>
 8005706:	2000      	movs	r0, #0
 8005708:	e008      	b.n	800571c <_printf_common+0xa8>
 800570a:	2301      	movs	r3, #1
 800570c:	4652      	mov	r2, sl
 800570e:	4649      	mov	r1, r9
 8005710:	4638      	mov	r0, r7
 8005712:	47c0      	blx	r8
 8005714:	3001      	adds	r0, #1
 8005716:	d103      	bne.n	8005720 <_printf_common+0xac>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	3501      	adds	r5, #1
 8005722:	e7c6      	b.n	80056b2 <_printf_common+0x3e>
 8005724:	18e1      	adds	r1, r4, r3
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	2030      	movs	r0, #48	; 0x30
 800572a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572e:	4422      	add	r2, r4
 8005730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005738:	3302      	adds	r3, #2
 800573a:	e7c7      	b.n	80056cc <_printf_common+0x58>
 800573c:	2301      	movs	r3, #1
 800573e:	4622      	mov	r2, r4
 8005740:	4649      	mov	r1, r9
 8005742:	4638      	mov	r0, r7
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d0e6      	beq.n	8005718 <_printf_common+0xa4>
 800574a:	3601      	adds	r6, #1
 800574c:	e7d9      	b.n	8005702 <_printf_common+0x8e>
	...

08005750 <_printf_i>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	7e0f      	ldrb	r7, [r1, #24]
 8005756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005758:	2f78      	cmp	r7, #120	; 0x78
 800575a:	4691      	mov	r9, r2
 800575c:	4680      	mov	r8, r0
 800575e:	460c      	mov	r4, r1
 8005760:	469a      	mov	sl, r3
 8005762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005766:	d807      	bhi.n	8005778 <_printf_i+0x28>
 8005768:	2f62      	cmp	r7, #98	; 0x62
 800576a:	d80a      	bhi.n	8005782 <_printf_i+0x32>
 800576c:	2f00      	cmp	r7, #0
 800576e:	f000 80d8 	beq.w	8005922 <_printf_i+0x1d2>
 8005772:	2f58      	cmp	r7, #88	; 0x58
 8005774:	f000 80a3 	beq.w	80058be <_printf_i+0x16e>
 8005778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800577c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005780:	e03a      	b.n	80057f8 <_printf_i+0xa8>
 8005782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005786:	2b15      	cmp	r3, #21
 8005788:	d8f6      	bhi.n	8005778 <_printf_i+0x28>
 800578a:	a101      	add	r1, pc, #4	; (adr r1, 8005790 <_printf_i+0x40>)
 800578c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057fd 	.word	0x080057fd
 8005798:	08005779 	.word	0x08005779
 800579c:	08005779 	.word	0x08005779
 80057a0:	08005779 	.word	0x08005779
 80057a4:	08005779 	.word	0x08005779
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005779 	.word	0x08005779
 80057b0:	08005779 	.word	0x08005779
 80057b4:	08005779 	.word	0x08005779
 80057b8:	08005779 	.word	0x08005779
 80057bc:	08005909 	.word	0x08005909
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	080058eb 	.word	0x080058eb
 80057c8:	08005779 	.word	0x08005779
 80057cc:	08005779 	.word	0x08005779
 80057d0:	0800592b 	.word	0x0800592b
 80057d4:	08005779 	.word	0x08005779
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	08005779 	.word	0x08005779
 80057e0:	08005779 	.word	0x08005779
 80057e4:	080058f3 	.word	0x080058f3
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	602a      	str	r2, [r5, #0]
 80057f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0a3      	b.n	8005944 <_printf_i+0x1f4>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	0606      	lsls	r6, r0, #24
 8005802:	f101 0304 	add.w	r3, r1, #4
 8005806:	d50a      	bpl.n	800581e <_printf_i+0xce>
 8005808:	680e      	ldr	r6, [r1, #0]
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	2e00      	cmp	r6, #0
 800580e:	da03      	bge.n	8005818 <_printf_i+0xc8>
 8005810:	232d      	movs	r3, #45	; 0x2d
 8005812:	4276      	negs	r6, r6
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	485e      	ldr	r0, [pc, #376]	; (8005994 <_printf_i+0x244>)
 800581a:	230a      	movs	r3, #10
 800581c:	e019      	b.n	8005852 <_printf_i+0x102>
 800581e:	680e      	ldr	r6, [r1, #0]
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005826:	bf18      	it	ne
 8005828:	b236      	sxthne	r6, r6
 800582a:	e7ef      	b.n	800580c <_printf_i+0xbc>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	1d19      	adds	r1, r3, #4
 8005832:	6029      	str	r1, [r5, #0]
 8005834:	0601      	lsls	r1, r0, #24
 8005836:	d501      	bpl.n	800583c <_printf_i+0xec>
 8005838:	681e      	ldr	r6, [r3, #0]
 800583a:	e002      	b.n	8005842 <_printf_i+0xf2>
 800583c:	0646      	lsls	r6, r0, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0xe8>
 8005840:	881e      	ldrh	r6, [r3, #0]
 8005842:	4854      	ldr	r0, [pc, #336]	; (8005994 <_printf_i+0x244>)
 8005844:	2f6f      	cmp	r7, #111	; 0x6f
 8005846:	bf0c      	ite	eq
 8005848:	2308      	moveq	r3, #8
 800584a:	230a      	movne	r3, #10
 800584c:	2100      	movs	r1, #0
 800584e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005852:	6865      	ldr	r5, [r4, #4]
 8005854:	60a5      	str	r5, [r4, #8]
 8005856:	2d00      	cmp	r5, #0
 8005858:	bfa2      	ittt	ge
 800585a:	6821      	ldrge	r1, [r4, #0]
 800585c:	f021 0104 	bicge.w	r1, r1, #4
 8005860:	6021      	strge	r1, [r4, #0]
 8005862:	b90e      	cbnz	r6, 8005868 <_printf_i+0x118>
 8005864:	2d00      	cmp	r5, #0
 8005866:	d04d      	beq.n	8005904 <_printf_i+0x1b4>
 8005868:	4615      	mov	r5, r2
 800586a:	fbb6 f1f3 	udiv	r1, r6, r3
 800586e:	fb03 6711 	mls	r7, r3, r1, r6
 8005872:	5dc7      	ldrb	r7, [r0, r7]
 8005874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005878:	4637      	mov	r7, r6
 800587a:	42bb      	cmp	r3, r7
 800587c:	460e      	mov	r6, r1
 800587e:	d9f4      	bls.n	800586a <_printf_i+0x11a>
 8005880:	2b08      	cmp	r3, #8
 8005882:	d10b      	bne.n	800589c <_printf_i+0x14c>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07de      	lsls	r6, r3, #31
 8005888:	d508      	bpl.n	800589c <_printf_i+0x14c>
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	6861      	ldr	r1, [r4, #4]
 800588e:	4299      	cmp	r1, r3
 8005890:	bfde      	ittt	le
 8005892:	2330      	movle	r3, #48	; 0x30
 8005894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005898:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800589c:	1b52      	subs	r2, r2, r5
 800589e:	6122      	str	r2, [r4, #16]
 80058a0:	f8cd a000 	str.w	sl, [sp]
 80058a4:	464b      	mov	r3, r9
 80058a6:	aa03      	add	r2, sp, #12
 80058a8:	4621      	mov	r1, r4
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7ff fee2 	bl	8005674 <_printf_common>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d14c      	bne.n	800594e <_printf_i+0x1fe>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b8:	b004      	add	sp, #16
 80058ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058be:	4835      	ldr	r0, [pc, #212]	; (8005994 <_printf_i+0x244>)
 80058c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058c4:	6829      	ldr	r1, [r5, #0]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058cc:	6029      	str	r1, [r5, #0]
 80058ce:	061d      	lsls	r5, r3, #24
 80058d0:	d514      	bpl.n	80058fc <_printf_i+0x1ac>
 80058d2:	07df      	lsls	r7, r3, #31
 80058d4:	bf44      	itt	mi
 80058d6:	f043 0320 	orrmi.w	r3, r3, #32
 80058da:	6023      	strmi	r3, [r4, #0]
 80058dc:	b91e      	cbnz	r6, 80058e6 <_printf_i+0x196>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f023 0320 	bic.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2310      	movs	r3, #16
 80058e8:	e7b0      	b.n	800584c <_printf_i+0xfc>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	2378      	movs	r3, #120	; 0x78
 80058f4:	4828      	ldr	r0, [pc, #160]	; (8005998 <_printf_i+0x248>)
 80058f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058fa:	e7e3      	b.n	80058c4 <_printf_i+0x174>
 80058fc:	0659      	lsls	r1, r3, #25
 80058fe:	bf48      	it	mi
 8005900:	b2b6      	uxthmi	r6, r6
 8005902:	e7e6      	b.n	80058d2 <_printf_i+0x182>
 8005904:	4615      	mov	r5, r2
 8005906:	e7bb      	b.n	8005880 <_printf_i+0x130>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	6826      	ldr	r6, [r4, #0]
 800590c:	6961      	ldr	r1, [r4, #20]
 800590e:	1d18      	adds	r0, r3, #4
 8005910:	6028      	str	r0, [r5, #0]
 8005912:	0635      	lsls	r5, r6, #24
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	d501      	bpl.n	800591c <_printf_i+0x1cc>
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0x1d2>
 800591c:	0670      	lsls	r0, r6, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0x1c8>
 8005920:	8019      	strh	r1, [r3, #0]
 8005922:	2300      	movs	r3, #0
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	4615      	mov	r5, r2
 8005928:	e7ba      	b.n	80058a0 <_printf_i+0x150>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	1d1a      	adds	r2, r3, #4
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	6862      	ldr	r2, [r4, #4]
 8005934:	2100      	movs	r1, #0
 8005936:	4628      	mov	r0, r5
 8005938:	f7fa fc72 	bl	8000220 <memchr>
 800593c:	b108      	cbz	r0, 8005942 <_printf_i+0x1f2>
 800593e:	1b40      	subs	r0, r0, r5
 8005940:	6060      	str	r0, [r4, #4]
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	2300      	movs	r3, #0
 8005948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594c:	e7a8      	b.n	80058a0 <_printf_i+0x150>
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	462a      	mov	r2, r5
 8005952:	4649      	mov	r1, r9
 8005954:	4640      	mov	r0, r8
 8005956:	47d0      	blx	sl
 8005958:	3001      	adds	r0, #1
 800595a:	d0ab      	beq.n	80058b4 <_printf_i+0x164>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	079b      	lsls	r3, r3, #30
 8005960:	d413      	bmi.n	800598a <_printf_i+0x23a>
 8005962:	68e0      	ldr	r0, [r4, #12]
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	4298      	cmp	r0, r3
 8005968:	bfb8      	it	lt
 800596a:	4618      	movlt	r0, r3
 800596c:	e7a4      	b.n	80058b8 <_printf_i+0x168>
 800596e:	2301      	movs	r3, #1
 8005970:	4632      	mov	r2, r6
 8005972:	4649      	mov	r1, r9
 8005974:	4640      	mov	r0, r8
 8005976:	47d0      	blx	sl
 8005978:	3001      	adds	r0, #1
 800597a:	d09b      	beq.n	80058b4 <_printf_i+0x164>
 800597c:	3501      	adds	r5, #1
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	9903      	ldr	r1, [sp, #12]
 8005982:	1a5b      	subs	r3, r3, r1
 8005984:	42ab      	cmp	r3, r5
 8005986:	dcf2      	bgt.n	800596e <_printf_i+0x21e>
 8005988:	e7eb      	b.n	8005962 <_printf_i+0x212>
 800598a:	2500      	movs	r5, #0
 800598c:	f104 0619 	add.w	r6, r4, #25
 8005990:	e7f5      	b.n	800597e <_printf_i+0x22e>
 8005992:	bf00      	nop
 8005994:	08007ba6 	.word	0x08007ba6
 8005998:	08007bb7 	.word	0x08007bb7

0800599c <iprintf>:
 800599c:	b40f      	push	{r0, r1, r2, r3}
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <iprintf+0x2c>)
 80059a0:	b513      	push	{r0, r1, r4, lr}
 80059a2:	681c      	ldr	r4, [r3, #0]
 80059a4:	b124      	cbz	r4, 80059b0 <iprintf+0x14>
 80059a6:	69a3      	ldr	r3, [r4, #24]
 80059a8:	b913      	cbnz	r3, 80059b0 <iprintf+0x14>
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fee2 	bl	8006774 <__sinit>
 80059b0:	ab05      	add	r3, sp, #20
 80059b2:	9a04      	ldr	r2, [sp, #16]
 80059b4:	68a1      	ldr	r1, [r4, #8]
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	4620      	mov	r0, r4
 80059ba:	f001 fc3b 	bl	8007234 <_vfiprintf_r>
 80059be:	b002      	add	sp, #8
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c4:	b004      	add	sp, #16
 80059c6:	4770      	bx	lr
 80059c8:	2000000c 	.word	0x2000000c

080059cc <quorem>:
 80059cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	6903      	ldr	r3, [r0, #16]
 80059d2:	690c      	ldr	r4, [r1, #16]
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	4607      	mov	r7, r0
 80059d8:	f2c0 8081 	blt.w	8005ade <quorem+0x112>
 80059dc:	3c01      	subs	r4, #1
 80059de:	f101 0814 	add.w	r8, r1, #20
 80059e2:	f100 0514 	add.w	r5, r0, #20
 80059e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059f4:	3301      	adds	r3, #1
 80059f6:	429a      	cmp	r2, r3
 80059f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a00:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a04:	d331      	bcc.n	8005a6a <quorem+0x9e>
 8005a06:	f04f 0e00 	mov.w	lr, #0
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	46ac      	mov	ip, r5
 8005a0e:	46f2      	mov	sl, lr
 8005a10:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a14:	b293      	uxth	r3, r2
 8005a16:	fb06 e303 	mla	r3, r6, r3, lr
 8005a1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ebaa 0303 	sub.w	r3, sl, r3
 8005a24:	f8dc a000 	ldr.w	sl, [ip]
 8005a28:	0c12      	lsrs	r2, r2, #16
 8005a2a:	fa13 f38a 	uxtah	r3, r3, sl
 8005a2e:	fb06 e202 	mla	r2, r6, r2, lr
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	9b00      	ldr	r3, [sp, #0]
 8005a36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a44:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a48:	4581      	cmp	r9, r0
 8005a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a4e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a56:	d2db      	bcs.n	8005a10 <quorem+0x44>
 8005a58:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a5c:	b92b      	cbnz	r3, 8005a6a <quorem+0x9e>
 8005a5e:	9b01      	ldr	r3, [sp, #4]
 8005a60:	3b04      	subs	r3, #4
 8005a62:	429d      	cmp	r5, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	d32e      	bcc.n	8005ac6 <quorem+0xfa>
 8005a68:	613c      	str	r4, [r7, #16]
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f001 f9c0 	bl	8006df0 <__mcmp>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	db24      	blt.n	8005abe <quorem+0xf2>
 8005a74:	3601      	adds	r6, #1
 8005a76:	4628      	mov	r0, r5
 8005a78:	f04f 0c00 	mov.w	ip, #0
 8005a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a80:	f8d0 e000 	ldr.w	lr, [r0]
 8005a84:	b293      	uxth	r3, r2
 8005a86:	ebac 0303 	sub.w	r3, ip, r3
 8005a8a:	0c12      	lsrs	r2, r2, #16
 8005a8c:	fa13 f38e 	uxtah	r3, r3, lr
 8005a90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9e:	45c1      	cmp	r9, r8
 8005aa0:	f840 3b04 	str.w	r3, [r0], #4
 8005aa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005aa8:	d2e8      	bcs.n	8005a7c <quorem+0xb0>
 8005aaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab2:	b922      	cbnz	r2, 8005abe <quorem+0xf2>
 8005ab4:	3b04      	subs	r3, #4
 8005ab6:	429d      	cmp	r5, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	d30a      	bcc.n	8005ad2 <quorem+0x106>
 8005abc:	613c      	str	r4, [r7, #16]
 8005abe:	4630      	mov	r0, r6
 8005ac0:	b003      	add	sp, #12
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	3b04      	subs	r3, #4
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d1cc      	bne.n	8005a68 <quorem+0x9c>
 8005ace:	3c01      	subs	r4, #1
 8005ad0:	e7c7      	b.n	8005a62 <quorem+0x96>
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d1f0      	bne.n	8005abc <quorem+0xf0>
 8005ada:	3c01      	subs	r4, #1
 8005adc:	e7eb      	b.n	8005ab6 <quorem+0xea>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e7ee      	b.n	8005ac0 <quorem+0xf4>
 8005ae2:	0000      	movs	r0, r0
 8005ae4:	0000      	movs	r0, r0
	...

08005ae8 <_dtoa_r>:
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	ed2d 8b04 	vpush	{d8-d9}
 8005af0:	ec57 6b10 	vmov	r6, r7, d0
 8005af4:	b093      	sub	sp, #76	; 0x4c
 8005af6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005af8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005afc:	9106      	str	r1, [sp, #24]
 8005afe:	ee10 aa10 	vmov	sl, s0
 8005b02:	4604      	mov	r4, r0
 8005b04:	9209      	str	r2, [sp, #36]	; 0x24
 8005b06:	930c      	str	r3, [sp, #48]	; 0x30
 8005b08:	46bb      	mov	fp, r7
 8005b0a:	b975      	cbnz	r5, 8005b2a <_dtoa_r+0x42>
 8005b0c:	2010      	movs	r0, #16
 8005b0e:	f000 fed7 	bl	80068c0 <malloc>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6260      	str	r0, [r4, #36]	; 0x24
 8005b16:	b920      	cbnz	r0, 8005b22 <_dtoa_r+0x3a>
 8005b18:	4ba7      	ldr	r3, [pc, #668]	; (8005db8 <_dtoa_r+0x2d0>)
 8005b1a:	21ea      	movs	r1, #234	; 0xea
 8005b1c:	48a7      	ldr	r0, [pc, #668]	; (8005dbc <_dtoa_r+0x2d4>)
 8005b1e:	f001 fddf 	bl	80076e0 <__assert_func>
 8005b22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b26:	6005      	str	r5, [r0, #0]
 8005b28:	60c5      	str	r5, [r0, #12]
 8005b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b2c:	6819      	ldr	r1, [r3, #0]
 8005b2e:	b151      	cbz	r1, 8005b46 <_dtoa_r+0x5e>
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	604a      	str	r2, [r1, #4]
 8005b34:	2301      	movs	r3, #1
 8005b36:	4093      	lsls	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 ff16 	bl	800696c <_Bfree>
 8005b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	1e3b      	subs	r3, r7, #0
 8005b48:	bfaa      	itet	ge
 8005b4a:	2300      	movge	r3, #0
 8005b4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b50:	f8c8 3000 	strge.w	r3, [r8]
 8005b54:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <_dtoa_r+0x2d8>)
 8005b56:	bfbc      	itt	lt
 8005b58:	2201      	movlt	r2, #1
 8005b5a:	f8c8 2000 	strlt.w	r2, [r8]
 8005b5e:	ea33 030b 	bics.w	r3, r3, fp
 8005b62:	d11b      	bne.n	8005b9c <_dtoa_r+0xb4>
 8005b64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b66:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b70:	4333      	orrs	r3, r6
 8005b72:	f000 8592 	beq.w	800669a <_dtoa_r+0xbb2>
 8005b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b78:	b963      	cbnz	r3, 8005b94 <_dtoa_r+0xac>
 8005b7a:	4b92      	ldr	r3, [pc, #584]	; (8005dc4 <_dtoa_r+0x2dc>)
 8005b7c:	e022      	b.n	8005bc4 <_dtoa_r+0xdc>
 8005b7e:	4b92      	ldr	r3, [pc, #584]	; (8005dc8 <_dtoa_r+0x2e0>)
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	3308      	adds	r3, #8
 8005b84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	b013      	add	sp, #76	; 0x4c
 8005b8c:	ecbd 8b04 	vpop	{d8-d9}
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	4b8b      	ldr	r3, [pc, #556]	; (8005dc4 <_dtoa_r+0x2dc>)
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	3303      	adds	r3, #3
 8005b9a:	e7f3      	b.n	8005b84 <_dtoa_r+0x9c>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	4659      	mov	r1, fp
 8005ba4:	f7fa ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8005ba8:	ec4b ab19 	vmov	d9, sl, fp
 8005bac:	4680      	mov	r8, r0
 8005bae:	b158      	cbz	r0, 8005bc8 <_dtoa_r+0xe0>
 8005bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 856b 	beq.w	8006694 <_dtoa_r+0xbac>
 8005bbe:	4883      	ldr	r0, [pc, #524]	; (8005dcc <_dtoa_r+0x2e4>)
 8005bc0:	6018      	str	r0, [r3, #0]
 8005bc2:	1e43      	subs	r3, r0, #1
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	e7df      	b.n	8005b88 <_dtoa_r+0xa0>
 8005bc8:	ec4b ab10 	vmov	d0, sl, fp
 8005bcc:	aa10      	add	r2, sp, #64	; 0x40
 8005bce:	a911      	add	r1, sp, #68	; 0x44
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f001 f9b3 	bl	8006f3c <__d2b>
 8005bd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005bda:	ee08 0a10 	vmov	s16, r0
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	f000 8084 	beq.w	8005cec <_dtoa_r+0x204>
 8005be4:	ee19 3a90 	vmov	r3, s19
 8005be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bf0:	4656      	mov	r6, sl
 8005bf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bfe:	4b74      	ldr	r3, [pc, #464]	; (8005dd0 <_dtoa_r+0x2e8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fb5f 	bl	80002c8 <__aeabi_dsub>
 8005c0a:	a365      	add	r3, pc, #404	; (adr r3, 8005da0 <_dtoa_r+0x2b8>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fd12 	bl	8000638 <__aeabi_dmul>
 8005c14:	a364      	add	r3, pc, #400	; (adr r3, 8005da8 <_dtoa_r+0x2c0>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fb57 	bl	80002cc <__adddf3>
 8005c1e:	4606      	mov	r6, r0
 8005c20:	4628      	mov	r0, r5
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa fc9e 	bl	8000564 <__aeabi_i2d>
 8005c28:	a361      	add	r3, pc, #388	; (adr r3, 8005db0 <_dtoa_r+0x2c8>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa fd03 	bl	8000638 <__aeabi_dmul>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7fa fb47 	bl	80002cc <__adddf3>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460f      	mov	r7, r1
 8005c42:	f7fa ffa9 	bl	8000b98 <__aeabi_d2iz>
 8005c46:	2200      	movs	r2, #0
 8005c48:	9000      	str	r0, [sp, #0]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	4639      	mov	r1, r7
 8005c50:	f7fa ff64 	bl	8000b1c <__aeabi_dcmplt>
 8005c54:	b150      	cbz	r0, 8005c6c <_dtoa_r+0x184>
 8005c56:	9800      	ldr	r0, [sp, #0]
 8005c58:	f7fa fc84 	bl	8000564 <__aeabi_i2d>
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	463b      	mov	r3, r7
 8005c60:	f7fa ff52 	bl	8000b08 <__aeabi_dcmpeq>
 8005c64:	b910      	cbnz	r0, 8005c6c <_dtoa_r+0x184>
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	9b00      	ldr	r3, [sp, #0]
 8005c6e:	2b16      	cmp	r3, #22
 8005c70:	d85a      	bhi.n	8005d28 <_dtoa_r+0x240>
 8005c72:	9a00      	ldr	r2, [sp, #0]
 8005c74:	4b57      	ldr	r3, [pc, #348]	; (8005dd4 <_dtoa_r+0x2ec>)
 8005c76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	ec51 0b19 	vmov	r0, r1, d9
 8005c82:	f7fa ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d050      	beq.n	8005d2c <_dtoa_r+0x244>
 8005c8a:	9b00      	ldr	r3, [sp, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c96:	1b5d      	subs	r5, r3, r5
 8005c98:	1e6b      	subs	r3, r5, #1
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	bf45      	ittet	mi
 8005c9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ca2:	9304      	strmi	r3, [sp, #16]
 8005ca4:	2300      	movpl	r3, #0
 8005ca6:	2300      	movmi	r3, #0
 8005ca8:	bf4c      	ite	mi
 8005caa:	9305      	strmi	r3, [sp, #20]
 8005cac:	9304      	strpl	r3, [sp, #16]
 8005cae:	9b00      	ldr	r3, [sp, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	db3d      	blt.n	8005d30 <_dtoa_r+0x248>
 8005cb4:	9b05      	ldr	r3, [sp, #20]
 8005cb6:	9a00      	ldr	r2, [sp, #0]
 8005cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cba:	4413      	add	r3, r2
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9307      	str	r3, [sp, #28]
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	2b09      	cmp	r3, #9
 8005cc6:	f200 8089 	bhi.w	8005ddc <_dtoa_r+0x2f4>
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	bfc4      	itt	gt
 8005cce:	3b04      	subgt	r3, #4
 8005cd0:	9306      	strgt	r3, [sp, #24]
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	f1a3 0302 	sub.w	r3, r3, #2
 8005cd8:	bfcc      	ite	gt
 8005cda:	2500      	movgt	r5, #0
 8005cdc:	2501      	movle	r5, #1
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	f200 8087 	bhi.w	8005df2 <_dtoa_r+0x30a>
 8005ce4:	e8df f003 	tbb	[pc, r3]
 8005ce8:	59383a2d 	.word	0x59383a2d
 8005cec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005cf0:	441d      	add	r5, r3
 8005cf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	bfc1      	itttt	gt
 8005cfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d02:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d0a:	bfda      	itte	le
 8005d0c:	f1c3 0320 	rsble	r3, r3, #32
 8005d10:	fa06 f003 	lslle.w	r0, r6, r3
 8005d14:	4318      	orrgt	r0, r3
 8005d16:	f7fa fc15 	bl	8000544 <__aeabi_ui2d>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d22:	3d01      	subs	r5, #1
 8005d24:	930e      	str	r3, [sp, #56]	; 0x38
 8005d26:	e76a      	b.n	8005bfe <_dtoa_r+0x116>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7b2      	b.n	8005c92 <_dtoa_r+0x1aa>
 8005d2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d2e:	e7b1      	b.n	8005c94 <_dtoa_r+0x1ac>
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	9a00      	ldr	r2, [sp, #0]
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	4253      	negs	r3, r2
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d40:	e7bf      	b.n	8005cc2 <_dtoa_r+0x1da>
 8005d42:	2300      	movs	r3, #0
 8005d44:	9308      	str	r3, [sp, #32]
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc55      	bgt.n	8005df8 <_dtoa_r+0x310>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d52:	461a      	mov	r2, r3
 8005d54:	9209      	str	r2, [sp, #36]	; 0x24
 8005d56:	e00c      	b.n	8005d72 <_dtoa_r+0x28a>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e7f3      	b.n	8005d44 <_dtoa_r+0x25c>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d60:	9308      	str	r3, [sp, #32]
 8005d62:	9b00      	ldr	r3, [sp, #0]
 8005d64:	4413      	add	r3, r2
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	bfb8      	it	lt
 8005d70:	2301      	movlt	r3, #1
 8005d72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d74:	2200      	movs	r2, #0
 8005d76:	6042      	str	r2, [r0, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	f102 0614 	add.w	r6, r2, #20
 8005d7e:	429e      	cmp	r6, r3
 8005d80:	6841      	ldr	r1, [r0, #4]
 8005d82:	d93d      	bls.n	8005e00 <_dtoa_r+0x318>
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fdb1 	bl	80068ec <_Balloc>
 8005d8a:	9001      	str	r0, [sp, #4]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d13b      	bne.n	8005e08 <_dtoa_r+0x320>
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <_dtoa_r+0x2f0>)
 8005d92:	4602      	mov	r2, r0
 8005d94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d98:	e6c0      	b.n	8005b1c <_dtoa_r+0x34>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e7df      	b.n	8005d5e <_dtoa_r+0x276>
 8005d9e:	bf00      	nop
 8005da0:	636f4361 	.word	0x636f4361
 8005da4:	3fd287a7 	.word	0x3fd287a7
 8005da8:	8b60c8b3 	.word	0x8b60c8b3
 8005dac:	3fc68a28 	.word	0x3fc68a28
 8005db0:	509f79fb 	.word	0x509f79fb
 8005db4:	3fd34413 	.word	0x3fd34413
 8005db8:	08007bd5 	.word	0x08007bd5
 8005dbc:	08007bec 	.word	0x08007bec
 8005dc0:	7ff00000 	.word	0x7ff00000
 8005dc4:	08007bd1 	.word	0x08007bd1
 8005dc8:	08007bc8 	.word	0x08007bc8
 8005dcc:	08007ba5 	.word	0x08007ba5
 8005dd0:	3ff80000 	.word	0x3ff80000
 8005dd4:	08007d40 	.word	0x08007d40
 8005dd8:	08007c47 	.word	0x08007c47
 8005ddc:	2501      	movs	r5, #1
 8005dde:	2300      	movs	r3, #0
 8005de0:	9306      	str	r3, [sp, #24]
 8005de2:	9508      	str	r5, [sp, #32]
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2312      	movs	r3, #18
 8005df0:	e7b0      	b.n	8005d54 <_dtoa_r+0x26c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	9308      	str	r3, [sp, #32]
 8005df6:	e7f5      	b.n	8005de4 <_dtoa_r+0x2fc>
 8005df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dfe:	e7b8      	b.n	8005d72 <_dtoa_r+0x28a>
 8005e00:	3101      	adds	r1, #1
 8005e02:	6041      	str	r1, [r0, #4]
 8005e04:	0052      	lsls	r2, r2, #1
 8005e06:	e7b8      	b.n	8005d7a <_dtoa_r+0x292>
 8005e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0a:	9a01      	ldr	r2, [sp, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	2b0e      	cmp	r3, #14
 8005e12:	f200 809d 	bhi.w	8005f50 <_dtoa_r+0x468>
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	f000 809a 	beq.w	8005f50 <_dtoa_r+0x468>
 8005e1c:	9b00      	ldr	r3, [sp, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dd32      	ble.n	8005e88 <_dtoa_r+0x3a0>
 8005e22:	4ab7      	ldr	r2, [pc, #732]	; (8006100 <_dtoa_r+0x618>)
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e30:	9b00      	ldr	r3, [sp, #0]
 8005e32:	05d8      	lsls	r0, r3, #23
 8005e34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e38:	d516      	bpl.n	8005e68 <_dtoa_r+0x380>
 8005e3a:	4bb2      	ldr	r3, [pc, #712]	; (8006104 <_dtoa_r+0x61c>)
 8005e3c:	ec51 0b19 	vmov	r0, r1, d9
 8005e40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e44:	f7fa fd22 	bl	800088c <__aeabi_ddiv>
 8005e48:	f007 070f 	and.w	r7, r7, #15
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	468b      	mov	fp, r1
 8005e50:	2503      	movs	r5, #3
 8005e52:	4eac      	ldr	r6, [pc, #688]	; (8006104 <_dtoa_r+0x61c>)
 8005e54:	b957      	cbnz	r7, 8005e6c <_dtoa_r+0x384>
 8005e56:	4642      	mov	r2, r8
 8005e58:	464b      	mov	r3, r9
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	f7fa fd15 	bl	800088c <__aeabi_ddiv>
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	e028      	b.n	8005eba <_dtoa_r+0x3d2>
 8005e68:	2502      	movs	r5, #2
 8005e6a:	e7f2      	b.n	8005e52 <_dtoa_r+0x36a>
 8005e6c:	07f9      	lsls	r1, r7, #31
 8005e6e:	d508      	bpl.n	8005e82 <_dtoa_r+0x39a>
 8005e70:	4640      	mov	r0, r8
 8005e72:	4649      	mov	r1, r9
 8005e74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e78:	f7fa fbde 	bl	8000638 <__aeabi_dmul>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	4680      	mov	r8, r0
 8005e80:	4689      	mov	r9, r1
 8005e82:	107f      	asrs	r7, r7, #1
 8005e84:	3608      	adds	r6, #8
 8005e86:	e7e5      	b.n	8005e54 <_dtoa_r+0x36c>
 8005e88:	f000 809b 	beq.w	8005fc2 <_dtoa_r+0x4da>
 8005e8c:	9b00      	ldr	r3, [sp, #0]
 8005e8e:	4f9d      	ldr	r7, [pc, #628]	; (8006104 <_dtoa_r+0x61c>)
 8005e90:	425e      	negs	r6, r3
 8005e92:	4b9b      	ldr	r3, [pc, #620]	; (8006100 <_dtoa_r+0x618>)
 8005e94:	f006 020f 	and.w	r2, r6, #15
 8005e98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	ec51 0b19 	vmov	r0, r1, d9
 8005ea4:	f7fa fbc8 	bl	8000638 <__aeabi_dmul>
 8005ea8:	1136      	asrs	r6, r6, #4
 8005eaa:	4682      	mov	sl, r0
 8005eac:	468b      	mov	fp, r1
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2502      	movs	r5, #2
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	d17a      	bne.n	8005fac <_dtoa_r+0x4c4>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d3      	bne.n	8005e62 <_dtoa_r+0x37a>
 8005eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8082 	beq.w	8005fc6 <_dtoa_r+0x4de>
 8005ec2:	4b91      	ldr	r3, [pc, #580]	; (8006108 <_dtoa_r+0x620>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	4659      	mov	r1, fp
 8005eca:	f7fa fe27 	bl	8000b1c <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d079      	beq.n	8005fc6 <_dtoa_r+0x4de>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d076      	beq.n	8005fc6 <_dtoa_r+0x4de>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dd36      	ble.n	8005f4c <_dtoa_r+0x464>
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	1e5f      	subs	r7, r3, #1
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4b88      	ldr	r3, [pc, #544]	; (800610c <_dtoa_r+0x624>)
 8005eea:	f7fa fba5 	bl	8000638 <__aeabi_dmul>
 8005eee:	9e02      	ldr	r6, [sp, #8]
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	468b      	mov	fp, r1
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7fa fb34 	bl	8000564 <__aeabi_i2d>
 8005efc:	4652      	mov	r2, sl
 8005efe:	465b      	mov	r3, fp
 8005f00:	f7fa fb9a 	bl	8000638 <__aeabi_dmul>
 8005f04:	4b82      	ldr	r3, [pc, #520]	; (8006110 <_dtoa_r+0x628>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	f7fa f9e0 	bl	80002cc <__adddf3>
 8005f0c:	46d0      	mov	r8, sl
 8005f0e:	46d9      	mov	r9, fp
 8005f10:	4682      	mov	sl, r0
 8005f12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d158      	bne.n	8005fcc <_dtoa_r+0x4e4>
 8005f1a:	4b7e      	ldr	r3, [pc, #504]	; (8006114 <_dtoa_r+0x62c>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa f9d1 	bl	80002c8 <__aeabi_dsub>
 8005f26:	4652      	mov	r2, sl
 8005f28:	465b      	mov	r3, fp
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4689      	mov	r9, r1
 8005f2e:	f7fa fe13 	bl	8000b58 <__aeabi_dcmpgt>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f040 8295 	bne.w	8006462 <_dtoa_r+0x97a>
 8005f38:	4652      	mov	r2, sl
 8005f3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8289 	bne.w	800645e <_dtoa_r+0x976>
 8005f4c:	ec5b ab19 	vmov	sl, fp, d9
 8005f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f2c0 8148 	blt.w	80061e8 <_dtoa_r+0x700>
 8005f58:	9a00      	ldr	r2, [sp, #0]
 8005f5a:	2a0e      	cmp	r2, #14
 8005f5c:	f300 8144 	bgt.w	80061e8 <_dtoa_r+0x700>
 8005f60:	4b67      	ldr	r3, [pc, #412]	; (8006100 <_dtoa_r+0x618>)
 8005f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f280 80d5 	bge.w	800611c <_dtoa_r+0x634>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f300 80d1 	bgt.w	800611c <_dtoa_r+0x634>
 8005f7a:	f040 826f 	bne.w	800645c <_dtoa_r+0x974>
 8005f7e:	4b65      	ldr	r3, [pc, #404]	; (8006114 <_dtoa_r+0x62c>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa fb57 	bl	8000638 <__aeabi_dmul>
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	465b      	mov	r3, fp
 8005f8e:	f7fa fdd9 	bl	8000b44 <__aeabi_dcmpge>
 8005f92:	9e03      	ldr	r6, [sp, #12]
 8005f94:	4637      	mov	r7, r6
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f040 8245 	bne.w	8006426 <_dtoa_r+0x93e>
 8005f9c:	9d01      	ldr	r5, [sp, #4]
 8005f9e:	2331      	movs	r3, #49	; 0x31
 8005fa0:	f805 3b01 	strb.w	r3, [r5], #1
 8005fa4:	9b00      	ldr	r3, [sp, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	e240      	b.n	800642e <_dtoa_r+0x946>
 8005fac:	07f2      	lsls	r2, r6, #31
 8005fae:	d505      	bpl.n	8005fbc <_dtoa_r+0x4d4>
 8005fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb4:	f7fa fb40 	bl	8000638 <__aeabi_dmul>
 8005fb8:	3501      	adds	r5, #1
 8005fba:	2301      	movs	r3, #1
 8005fbc:	1076      	asrs	r6, r6, #1
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	e777      	b.n	8005eb2 <_dtoa_r+0x3ca>
 8005fc2:	2502      	movs	r5, #2
 8005fc4:	e779      	b.n	8005eba <_dtoa_r+0x3d2>
 8005fc6:	9f00      	ldr	r7, [sp, #0]
 8005fc8:	9e03      	ldr	r6, [sp, #12]
 8005fca:	e794      	b.n	8005ef6 <_dtoa_r+0x40e>
 8005fcc:	9901      	ldr	r1, [sp, #4]
 8005fce:	4b4c      	ldr	r3, [pc, #304]	; (8006100 <_dtoa_r+0x618>)
 8005fd0:	4431      	add	r1, r6
 8005fd2:	910d      	str	r1, [sp, #52]	; 0x34
 8005fd4:	9908      	ldr	r1, [sp, #32]
 8005fd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d043      	beq.n	800606a <_dtoa_r+0x582>
 8005fe2:	494d      	ldr	r1, [pc, #308]	; (8006118 <_dtoa_r+0x630>)
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7fa fc51 	bl	800088c <__aeabi_ddiv>
 8005fea:	4652      	mov	r2, sl
 8005fec:	465b      	mov	r3, fp
 8005fee:	f7fa f96b 	bl	80002c8 <__aeabi_dsub>
 8005ff2:	9d01      	ldr	r5, [sp, #4]
 8005ff4:	4682      	mov	sl, r0
 8005ff6:	468b      	mov	fp, r1
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f7fa fdcc 	bl	8000b98 <__aeabi_d2iz>
 8006000:	4606      	mov	r6, r0
 8006002:	f7fa faaf 	bl	8000564 <__aeabi_i2d>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f95b 	bl	80002c8 <__aeabi_dsub>
 8006012:	3630      	adds	r6, #48	; 0x30
 8006014:	f805 6b01 	strb.w	r6, [r5], #1
 8006018:	4652      	mov	r2, sl
 800601a:	465b      	mov	r3, fp
 800601c:	4680      	mov	r8, r0
 800601e:	4689      	mov	r9, r1
 8006020:	f7fa fd7c 	bl	8000b1c <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	d163      	bne.n	80060f0 <_dtoa_r+0x608>
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	4936      	ldr	r1, [pc, #216]	; (8006108 <_dtoa_r+0x620>)
 800602e:	2000      	movs	r0, #0
 8006030:	f7fa f94a 	bl	80002c8 <__aeabi_dsub>
 8006034:	4652      	mov	r2, sl
 8006036:	465b      	mov	r3, fp
 8006038:	f7fa fd70 	bl	8000b1c <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 80b5 	bne.w	80061ac <_dtoa_r+0x6c4>
 8006042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006044:	429d      	cmp	r5, r3
 8006046:	d081      	beq.n	8005f4c <_dtoa_r+0x464>
 8006048:	4b30      	ldr	r3, [pc, #192]	; (800610c <_dtoa_r+0x624>)
 800604a:	2200      	movs	r2, #0
 800604c:	4650      	mov	r0, sl
 800604e:	4659      	mov	r1, fp
 8006050:	f7fa faf2 	bl	8000638 <__aeabi_dmul>
 8006054:	4b2d      	ldr	r3, [pc, #180]	; (800610c <_dtoa_r+0x624>)
 8006056:	4682      	mov	sl, r0
 8006058:	468b      	mov	fp, r1
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	2200      	movs	r2, #0
 8006060:	f7fa faea 	bl	8000638 <__aeabi_dmul>
 8006064:	4680      	mov	r8, r0
 8006066:	4689      	mov	r9, r1
 8006068:	e7c6      	b.n	8005ff8 <_dtoa_r+0x510>
 800606a:	4650      	mov	r0, sl
 800606c:	4659      	mov	r1, fp
 800606e:	f7fa fae3 	bl	8000638 <__aeabi_dmul>
 8006072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006074:	9d01      	ldr	r5, [sp, #4]
 8006076:	930f      	str	r3, [sp, #60]	; 0x3c
 8006078:	4682      	mov	sl, r0
 800607a:	468b      	mov	fp, r1
 800607c:	4649      	mov	r1, r9
 800607e:	4640      	mov	r0, r8
 8006080:	f7fa fd8a 	bl	8000b98 <__aeabi_d2iz>
 8006084:	4606      	mov	r6, r0
 8006086:	f7fa fa6d 	bl	8000564 <__aeabi_i2d>
 800608a:	3630      	adds	r6, #48	; 0x30
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa f918 	bl	80002c8 <__aeabi_dsub>
 8006098:	f805 6b01 	strb.w	r6, [r5], #1
 800609c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609e:	429d      	cmp	r5, r3
 80060a0:	4680      	mov	r8, r0
 80060a2:	4689      	mov	r9, r1
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	d124      	bne.n	80060f4 <_dtoa_r+0x60c>
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <_dtoa_r+0x630>)
 80060ac:	4650      	mov	r0, sl
 80060ae:	4659      	mov	r1, fp
 80060b0:	f7fa f90c 	bl	80002cc <__adddf3>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4640      	mov	r0, r8
 80060ba:	4649      	mov	r1, r9
 80060bc:	f7fa fd4c 	bl	8000b58 <__aeabi_dcmpgt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d173      	bne.n	80061ac <_dtoa_r+0x6c4>
 80060c4:	4652      	mov	r2, sl
 80060c6:	465b      	mov	r3, fp
 80060c8:	4913      	ldr	r1, [pc, #76]	; (8006118 <_dtoa_r+0x630>)
 80060ca:	2000      	movs	r0, #0
 80060cc:	f7fa f8fc 	bl	80002c8 <__aeabi_dsub>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4640      	mov	r0, r8
 80060d6:	4649      	mov	r1, r9
 80060d8:	f7fa fd20 	bl	8000b1c <__aeabi_dcmplt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	f43f af35 	beq.w	8005f4c <_dtoa_r+0x464>
 80060e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060e4:	1e6b      	subs	r3, r5, #1
 80060e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060ec:	2b30      	cmp	r3, #48	; 0x30
 80060ee:	d0f8      	beq.n	80060e2 <_dtoa_r+0x5fa>
 80060f0:	9700      	str	r7, [sp, #0]
 80060f2:	e049      	b.n	8006188 <_dtoa_r+0x6a0>
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <_dtoa_r+0x624>)
 80060f6:	f7fa fa9f 	bl	8000638 <__aeabi_dmul>
 80060fa:	4680      	mov	r8, r0
 80060fc:	4689      	mov	r9, r1
 80060fe:	e7bd      	b.n	800607c <_dtoa_r+0x594>
 8006100:	08007d40 	.word	0x08007d40
 8006104:	08007d18 	.word	0x08007d18
 8006108:	3ff00000 	.word	0x3ff00000
 800610c:	40240000 	.word	0x40240000
 8006110:	401c0000 	.word	0x401c0000
 8006114:	40140000 	.word	0x40140000
 8006118:	3fe00000 	.word	0x3fe00000
 800611c:	9d01      	ldr	r5, [sp, #4]
 800611e:	4656      	mov	r6, sl
 8006120:	465f      	mov	r7, fp
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fbaf 	bl	800088c <__aeabi_ddiv>
 800612e:	f7fa fd33 	bl	8000b98 <__aeabi_d2iz>
 8006132:	4682      	mov	sl, r0
 8006134:	f7fa fa16 	bl	8000564 <__aeabi_i2d>
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	f7fa fa7c 	bl	8000638 <__aeabi_dmul>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800614c:	f7fa f8bc 	bl	80002c8 <__aeabi_dsub>
 8006150:	f805 6b01 	strb.w	r6, [r5], #1
 8006154:	9e01      	ldr	r6, [sp, #4]
 8006156:	9f03      	ldr	r7, [sp, #12]
 8006158:	1bae      	subs	r6, r5, r6
 800615a:	42b7      	cmp	r7, r6
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	d135      	bne.n	80061ce <_dtoa_r+0x6e6>
 8006162:	f7fa f8b3 	bl	80002cc <__adddf3>
 8006166:	4642      	mov	r2, r8
 8006168:	464b      	mov	r3, r9
 800616a:	4606      	mov	r6, r0
 800616c:	460f      	mov	r7, r1
 800616e:	f7fa fcf3 	bl	8000b58 <__aeabi_dcmpgt>
 8006172:	b9d0      	cbnz	r0, 80061aa <_dtoa_r+0x6c2>
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7fa fcc4 	bl	8000b08 <__aeabi_dcmpeq>
 8006180:	b110      	cbz	r0, 8006188 <_dtoa_r+0x6a0>
 8006182:	f01a 0f01 	tst.w	sl, #1
 8006186:	d110      	bne.n	80061aa <_dtoa_r+0x6c2>
 8006188:	4620      	mov	r0, r4
 800618a:	ee18 1a10 	vmov	r1, s16
 800618e:	f000 fbed 	bl	800696c <_Bfree>
 8006192:	2300      	movs	r3, #0
 8006194:	9800      	ldr	r0, [sp, #0]
 8006196:	702b      	strb	r3, [r5, #0]
 8006198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800619a:	3001      	adds	r0, #1
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f43f acf1 	beq.w	8005b88 <_dtoa_r+0xa0>
 80061a6:	601d      	str	r5, [r3, #0]
 80061a8:	e4ee      	b.n	8005b88 <_dtoa_r+0xa0>
 80061aa:	9f00      	ldr	r7, [sp, #0]
 80061ac:	462b      	mov	r3, r5
 80061ae:	461d      	mov	r5, r3
 80061b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b4:	2a39      	cmp	r2, #57	; 0x39
 80061b6:	d106      	bne.n	80061c6 <_dtoa_r+0x6de>
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d1f7      	bne.n	80061ae <_dtoa_r+0x6c6>
 80061be:	9901      	ldr	r1, [sp, #4]
 80061c0:	2230      	movs	r2, #48	; 0x30
 80061c2:	3701      	adds	r7, #1
 80061c4:	700a      	strb	r2, [r1, #0]
 80061c6:	781a      	ldrb	r2, [r3, #0]
 80061c8:	3201      	adds	r2, #1
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e790      	b.n	80060f0 <_dtoa_r+0x608>
 80061ce:	4ba6      	ldr	r3, [pc, #664]	; (8006468 <_dtoa_r+0x980>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa fa31 	bl	8000638 <__aeabi_dmul>
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	4606      	mov	r6, r0
 80061dc:	460f      	mov	r7, r1
 80061de:	f7fa fc93 	bl	8000b08 <__aeabi_dcmpeq>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d09d      	beq.n	8006122 <_dtoa_r+0x63a>
 80061e6:	e7cf      	b.n	8006188 <_dtoa_r+0x6a0>
 80061e8:	9a08      	ldr	r2, [sp, #32]
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	f000 80d7 	beq.w	800639e <_dtoa_r+0x8b6>
 80061f0:	9a06      	ldr	r2, [sp, #24]
 80061f2:	2a01      	cmp	r2, #1
 80061f4:	f300 80ba 	bgt.w	800636c <_dtoa_r+0x884>
 80061f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	f000 80b2 	beq.w	8006364 <_dtoa_r+0x87c>
 8006200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006204:	9e07      	ldr	r6, [sp, #28]
 8006206:	9d04      	ldr	r5, [sp, #16]
 8006208:	9a04      	ldr	r2, [sp, #16]
 800620a:	441a      	add	r2, r3
 800620c:	9204      	str	r2, [sp, #16]
 800620e:	9a05      	ldr	r2, [sp, #20]
 8006210:	2101      	movs	r1, #1
 8006212:	441a      	add	r2, r3
 8006214:	4620      	mov	r0, r4
 8006216:	9205      	str	r2, [sp, #20]
 8006218:	f000 fc60 	bl	8006adc <__i2b>
 800621c:	4607      	mov	r7, r0
 800621e:	2d00      	cmp	r5, #0
 8006220:	dd0c      	ble.n	800623c <_dtoa_r+0x754>
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	dd09      	ble.n	800623c <_dtoa_r+0x754>
 8006228:	42ab      	cmp	r3, r5
 800622a:	9a04      	ldr	r2, [sp, #16]
 800622c:	bfa8      	it	ge
 800622e:	462b      	movge	r3, r5
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	9204      	str	r2, [sp, #16]
 8006234:	9a05      	ldr	r2, [sp, #20]
 8006236:	1aed      	subs	r5, r5, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	b31b      	cbz	r3, 8006288 <_dtoa_r+0x7a0>
 8006240:	9b08      	ldr	r3, [sp, #32]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80af 	beq.w	80063a6 <_dtoa_r+0x8be>
 8006248:	2e00      	cmp	r6, #0
 800624a:	dd13      	ble.n	8006274 <_dtoa_r+0x78c>
 800624c:	4639      	mov	r1, r7
 800624e:	4632      	mov	r2, r6
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fd03 	bl	8006c5c <__pow5mult>
 8006256:	ee18 2a10 	vmov	r2, s16
 800625a:	4601      	mov	r1, r0
 800625c:	4607      	mov	r7, r0
 800625e:	4620      	mov	r0, r4
 8006260:	f000 fc52 	bl	8006b08 <__multiply>
 8006264:	ee18 1a10 	vmov	r1, s16
 8006268:	4680      	mov	r8, r0
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fb7e 	bl	800696c <_Bfree>
 8006270:	ee08 8a10 	vmov	s16, r8
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	1b9a      	subs	r2, r3, r6
 8006278:	d006      	beq.n	8006288 <_dtoa_r+0x7a0>
 800627a:	ee18 1a10 	vmov	r1, s16
 800627e:	4620      	mov	r0, r4
 8006280:	f000 fcec 	bl	8006c5c <__pow5mult>
 8006284:	ee08 0a10 	vmov	s16, r0
 8006288:	2101      	movs	r1, #1
 800628a:	4620      	mov	r0, r4
 800628c:	f000 fc26 	bl	8006adc <__i2b>
 8006290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	4606      	mov	r6, r0
 8006296:	f340 8088 	ble.w	80063aa <_dtoa_r+0x8c2>
 800629a:	461a      	mov	r2, r3
 800629c:	4601      	mov	r1, r0
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 fcdc 	bl	8006c5c <__pow5mult>
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	4606      	mov	r6, r0
 80062aa:	f340 8081 	ble.w	80063b0 <_dtoa_r+0x8c8>
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	6933      	ldr	r3, [r6, #16]
 80062b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062b8:	6918      	ldr	r0, [r3, #16]
 80062ba:	f000 fbbf 	bl	8006a3c <__hi0bits>
 80062be:	f1c0 0020 	rsb	r0, r0, #32
 80062c2:	9b05      	ldr	r3, [sp, #20]
 80062c4:	4418      	add	r0, r3
 80062c6:	f010 001f 	ands.w	r0, r0, #31
 80062ca:	f000 8092 	beq.w	80063f2 <_dtoa_r+0x90a>
 80062ce:	f1c0 0320 	rsb	r3, r0, #32
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	f340 808a 	ble.w	80063ec <_dtoa_r+0x904>
 80062d8:	f1c0 001c 	rsb	r0, r0, #28
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	4403      	add	r3, r0
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	4403      	add	r3, r0
 80062e6:	4405      	add	r5, r0
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dd07      	ble.n	8006300 <_dtoa_r+0x818>
 80062f0:	ee18 1a10 	vmov	r1, s16
 80062f4:	461a      	mov	r2, r3
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fd0a 	bl	8006d10 <__lshift>
 80062fc:	ee08 0a10 	vmov	s16, r0
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd05      	ble.n	8006312 <_dtoa_r+0x82a>
 8006306:	4631      	mov	r1, r6
 8006308:	461a      	mov	r2, r3
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fd00 	bl	8006d10 <__lshift>
 8006310:	4606      	mov	r6, r0
 8006312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d06e      	beq.n	80063f6 <_dtoa_r+0x90e>
 8006318:	ee18 0a10 	vmov	r0, s16
 800631c:	4631      	mov	r1, r6
 800631e:	f000 fd67 	bl	8006df0 <__mcmp>
 8006322:	2800      	cmp	r0, #0
 8006324:	da67      	bge.n	80063f6 <_dtoa_r+0x90e>
 8006326:	9b00      	ldr	r3, [sp, #0]
 8006328:	3b01      	subs	r3, #1
 800632a:	ee18 1a10 	vmov	r1, s16
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	220a      	movs	r2, #10
 8006332:	2300      	movs	r3, #0
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fb3b 	bl	80069b0 <__multadd>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	ee08 0a10 	vmov	s16, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 81b1 	beq.w	80066a8 <_dtoa_r+0xbc0>
 8006346:	2300      	movs	r3, #0
 8006348:	4639      	mov	r1, r7
 800634a:	220a      	movs	r2, #10
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fb2f 	bl	80069b0 <__multadd>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	4607      	mov	r7, r0
 8006358:	f300 808e 	bgt.w	8006478 <_dtoa_r+0x990>
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	2b02      	cmp	r3, #2
 8006360:	dc51      	bgt.n	8006406 <_dtoa_r+0x91e>
 8006362:	e089      	b.n	8006478 <_dtoa_r+0x990>
 8006364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800636a:	e74b      	b.n	8006204 <_dtoa_r+0x71c>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	1e5e      	subs	r6, r3, #1
 8006370:	9b07      	ldr	r3, [sp, #28]
 8006372:	42b3      	cmp	r3, r6
 8006374:	bfbf      	itttt	lt
 8006376:	9b07      	ldrlt	r3, [sp, #28]
 8006378:	9607      	strlt	r6, [sp, #28]
 800637a:	1af2      	sublt	r2, r6, r3
 800637c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800637e:	bfb6      	itet	lt
 8006380:	189b      	addlt	r3, r3, r2
 8006382:	1b9e      	subge	r6, r3, r6
 8006384:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	bfb8      	it	lt
 800638a:	2600      	movlt	r6, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfb7      	itett	lt
 8006390:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006394:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006398:	1a9d      	sublt	r5, r3, r2
 800639a:	2300      	movlt	r3, #0
 800639c:	e734      	b.n	8006208 <_dtoa_r+0x720>
 800639e:	9e07      	ldr	r6, [sp, #28]
 80063a0:	9d04      	ldr	r5, [sp, #16]
 80063a2:	9f08      	ldr	r7, [sp, #32]
 80063a4:	e73b      	b.n	800621e <_dtoa_r+0x736>
 80063a6:	9a07      	ldr	r2, [sp, #28]
 80063a8:	e767      	b.n	800627a <_dtoa_r+0x792>
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	dc18      	bgt.n	80063e2 <_dtoa_r+0x8fa>
 80063b0:	f1ba 0f00 	cmp.w	sl, #0
 80063b4:	d115      	bne.n	80063e2 <_dtoa_r+0x8fa>
 80063b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ba:	b993      	cbnz	r3, 80063e2 <_dtoa_r+0x8fa>
 80063bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063c0:	0d1b      	lsrs	r3, r3, #20
 80063c2:	051b      	lsls	r3, r3, #20
 80063c4:	b183      	cbz	r3, 80063e8 <_dtoa_r+0x900>
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	9304      	str	r3, [sp, #16]
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	3301      	adds	r3, #1
 80063d0:	9305      	str	r3, [sp, #20]
 80063d2:	f04f 0801 	mov.w	r8, #1
 80063d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f47f af6a 	bne.w	80062b2 <_dtoa_r+0x7ca>
 80063de:	2001      	movs	r0, #1
 80063e0:	e76f      	b.n	80062c2 <_dtoa_r+0x7da>
 80063e2:	f04f 0800 	mov.w	r8, #0
 80063e6:	e7f6      	b.n	80063d6 <_dtoa_r+0x8ee>
 80063e8:	4698      	mov	r8, r3
 80063ea:	e7f4      	b.n	80063d6 <_dtoa_r+0x8ee>
 80063ec:	f43f af7d 	beq.w	80062ea <_dtoa_r+0x802>
 80063f0:	4618      	mov	r0, r3
 80063f2:	301c      	adds	r0, #28
 80063f4:	e772      	b.n	80062dc <_dtoa_r+0x7f4>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	dc37      	bgt.n	800646c <_dtoa_r+0x984>
 80063fc:	9b06      	ldr	r3, [sp, #24]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	dd34      	ble.n	800646c <_dtoa_r+0x984>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	9302      	str	r3, [sp, #8]
 8006406:	9b02      	ldr	r3, [sp, #8]
 8006408:	b96b      	cbnz	r3, 8006426 <_dtoa_r+0x93e>
 800640a:	4631      	mov	r1, r6
 800640c:	2205      	movs	r2, #5
 800640e:	4620      	mov	r0, r4
 8006410:	f000 face 	bl	80069b0 <__multadd>
 8006414:	4601      	mov	r1, r0
 8006416:	4606      	mov	r6, r0
 8006418:	ee18 0a10 	vmov	r0, s16
 800641c:	f000 fce8 	bl	8006df0 <__mcmp>
 8006420:	2800      	cmp	r0, #0
 8006422:	f73f adbb 	bgt.w	8005f9c <_dtoa_r+0x4b4>
 8006426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006428:	9d01      	ldr	r5, [sp, #4]
 800642a:	43db      	mvns	r3, r3
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f04f 0800 	mov.w	r8, #0
 8006432:	4631      	mov	r1, r6
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fa99 	bl	800696c <_Bfree>
 800643a:	2f00      	cmp	r7, #0
 800643c:	f43f aea4 	beq.w	8006188 <_dtoa_r+0x6a0>
 8006440:	f1b8 0f00 	cmp.w	r8, #0
 8006444:	d005      	beq.n	8006452 <_dtoa_r+0x96a>
 8006446:	45b8      	cmp	r8, r7
 8006448:	d003      	beq.n	8006452 <_dtoa_r+0x96a>
 800644a:	4641      	mov	r1, r8
 800644c:	4620      	mov	r0, r4
 800644e:	f000 fa8d 	bl	800696c <_Bfree>
 8006452:	4639      	mov	r1, r7
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fa89 	bl	800696c <_Bfree>
 800645a:	e695      	b.n	8006188 <_dtoa_r+0x6a0>
 800645c:	2600      	movs	r6, #0
 800645e:	4637      	mov	r7, r6
 8006460:	e7e1      	b.n	8006426 <_dtoa_r+0x93e>
 8006462:	9700      	str	r7, [sp, #0]
 8006464:	4637      	mov	r7, r6
 8006466:	e599      	b.n	8005f9c <_dtoa_r+0x4b4>
 8006468:	40240000 	.word	0x40240000
 800646c:	9b08      	ldr	r3, [sp, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80ca 	beq.w	8006608 <_dtoa_r+0xb20>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	2d00      	cmp	r5, #0
 800647a:	dd05      	ble.n	8006488 <_dtoa_r+0x9a0>
 800647c:	4639      	mov	r1, r7
 800647e:	462a      	mov	r2, r5
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fc45 	bl	8006d10 <__lshift>
 8006486:	4607      	mov	r7, r0
 8006488:	f1b8 0f00 	cmp.w	r8, #0
 800648c:	d05b      	beq.n	8006546 <_dtoa_r+0xa5e>
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fa2b 	bl	80068ec <_Balloc>
 8006496:	4605      	mov	r5, r0
 8006498:	b928      	cbnz	r0, 80064a6 <_dtoa_r+0x9be>
 800649a:	4b87      	ldr	r3, [pc, #540]	; (80066b8 <_dtoa_r+0xbd0>)
 800649c:	4602      	mov	r2, r0
 800649e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80064a2:	f7ff bb3b 	b.w	8005b1c <_dtoa_r+0x34>
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	3202      	adds	r2, #2
 80064aa:	0092      	lsls	r2, r2, #2
 80064ac:	f107 010c 	add.w	r1, r7, #12
 80064b0:	300c      	adds	r0, #12
 80064b2:	f000 fa0d 	bl	80068d0 <memcpy>
 80064b6:	2201      	movs	r2, #1
 80064b8:	4629      	mov	r1, r5
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 fc28 	bl	8006d10 <__lshift>
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	f103 0901 	add.w	r9, r3, #1
 80064c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	9305      	str	r3, [sp, #20]
 80064ce:	f00a 0301 	and.w	r3, sl, #1
 80064d2:	46b8      	mov	r8, r7
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	4607      	mov	r7, r0
 80064d8:	4631      	mov	r1, r6
 80064da:	ee18 0a10 	vmov	r0, s16
 80064de:	f7ff fa75 	bl	80059cc <quorem>
 80064e2:	4641      	mov	r1, r8
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064ea:	ee18 0a10 	vmov	r0, s16
 80064ee:	f000 fc7f 	bl	8006df0 <__mcmp>
 80064f2:	463a      	mov	r2, r7
 80064f4:	9003      	str	r0, [sp, #12]
 80064f6:	4631      	mov	r1, r6
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fc95 	bl	8006e28 <__mdiff>
 80064fe:	68c2      	ldr	r2, [r0, #12]
 8006500:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006504:	4605      	mov	r5, r0
 8006506:	bb02      	cbnz	r2, 800654a <_dtoa_r+0xa62>
 8006508:	4601      	mov	r1, r0
 800650a:	ee18 0a10 	vmov	r0, s16
 800650e:	f000 fc6f 	bl	8006df0 <__mcmp>
 8006512:	4602      	mov	r2, r0
 8006514:	4629      	mov	r1, r5
 8006516:	4620      	mov	r0, r4
 8006518:	9207      	str	r2, [sp, #28]
 800651a:	f000 fa27 	bl	800696c <_Bfree>
 800651e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006522:	ea43 0102 	orr.w	r1, r3, r2
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	430b      	orrs	r3, r1
 800652a:	464d      	mov	r5, r9
 800652c:	d10f      	bne.n	800654e <_dtoa_r+0xa66>
 800652e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006532:	d02a      	beq.n	800658a <_dtoa_r+0xaa2>
 8006534:	9b03      	ldr	r3, [sp, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	dd02      	ble.n	8006540 <_dtoa_r+0xa58>
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006540:	f88b a000 	strb.w	sl, [fp]
 8006544:	e775      	b.n	8006432 <_dtoa_r+0x94a>
 8006546:	4638      	mov	r0, r7
 8006548:	e7ba      	b.n	80064c0 <_dtoa_r+0x9d8>
 800654a:	2201      	movs	r2, #1
 800654c:	e7e2      	b.n	8006514 <_dtoa_r+0xa2c>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	db04      	blt.n	800655e <_dtoa_r+0xa76>
 8006554:	9906      	ldr	r1, [sp, #24]
 8006556:	430b      	orrs	r3, r1
 8006558:	9904      	ldr	r1, [sp, #16]
 800655a:	430b      	orrs	r3, r1
 800655c:	d122      	bne.n	80065a4 <_dtoa_r+0xabc>
 800655e:	2a00      	cmp	r2, #0
 8006560:	ddee      	ble.n	8006540 <_dtoa_r+0xa58>
 8006562:	ee18 1a10 	vmov	r1, s16
 8006566:	2201      	movs	r2, #1
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fbd1 	bl	8006d10 <__lshift>
 800656e:	4631      	mov	r1, r6
 8006570:	ee08 0a10 	vmov	s16, r0
 8006574:	f000 fc3c 	bl	8006df0 <__mcmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	dc03      	bgt.n	8006584 <_dtoa_r+0xa9c>
 800657c:	d1e0      	bne.n	8006540 <_dtoa_r+0xa58>
 800657e:	f01a 0f01 	tst.w	sl, #1
 8006582:	d0dd      	beq.n	8006540 <_dtoa_r+0xa58>
 8006584:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006588:	d1d7      	bne.n	800653a <_dtoa_r+0xa52>
 800658a:	2339      	movs	r3, #57	; 0x39
 800658c:	f88b 3000 	strb.w	r3, [fp]
 8006590:	462b      	mov	r3, r5
 8006592:	461d      	mov	r5, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800659a:	2a39      	cmp	r2, #57	; 0x39
 800659c:	d071      	beq.n	8006682 <_dtoa_r+0xb9a>
 800659e:	3201      	adds	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e746      	b.n	8006432 <_dtoa_r+0x94a>
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	dd07      	ble.n	80065b8 <_dtoa_r+0xad0>
 80065a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065ac:	d0ed      	beq.n	800658a <_dtoa_r+0xaa2>
 80065ae:	f10a 0301 	add.w	r3, sl, #1
 80065b2:	f88b 3000 	strb.w	r3, [fp]
 80065b6:	e73c      	b.n	8006432 <_dtoa_r+0x94a>
 80065b8:	9b05      	ldr	r3, [sp, #20]
 80065ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80065be:	4599      	cmp	r9, r3
 80065c0:	d047      	beq.n	8006652 <_dtoa_r+0xb6a>
 80065c2:	ee18 1a10 	vmov	r1, s16
 80065c6:	2300      	movs	r3, #0
 80065c8:	220a      	movs	r2, #10
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f9f0 	bl	80069b0 <__multadd>
 80065d0:	45b8      	cmp	r8, r7
 80065d2:	ee08 0a10 	vmov	s16, r0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f04f 020a 	mov.w	r2, #10
 80065de:	4641      	mov	r1, r8
 80065e0:	4620      	mov	r0, r4
 80065e2:	d106      	bne.n	80065f2 <_dtoa_r+0xb0a>
 80065e4:	f000 f9e4 	bl	80069b0 <__multadd>
 80065e8:	4680      	mov	r8, r0
 80065ea:	4607      	mov	r7, r0
 80065ec:	f109 0901 	add.w	r9, r9, #1
 80065f0:	e772      	b.n	80064d8 <_dtoa_r+0x9f0>
 80065f2:	f000 f9dd 	bl	80069b0 <__multadd>
 80065f6:	4639      	mov	r1, r7
 80065f8:	4680      	mov	r8, r0
 80065fa:	2300      	movs	r3, #0
 80065fc:	220a      	movs	r2, #10
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f9d6 	bl	80069b0 <__multadd>
 8006604:	4607      	mov	r7, r0
 8006606:	e7f1      	b.n	80065ec <_dtoa_r+0xb04>
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	9302      	str	r3, [sp, #8]
 800660c:	9d01      	ldr	r5, [sp, #4]
 800660e:	ee18 0a10 	vmov	r0, s16
 8006612:	4631      	mov	r1, r6
 8006614:	f7ff f9da 	bl	80059cc <quorem>
 8006618:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800661c:	9b01      	ldr	r3, [sp, #4]
 800661e:	f805 ab01 	strb.w	sl, [r5], #1
 8006622:	1aea      	subs	r2, r5, r3
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	4293      	cmp	r3, r2
 8006628:	dd09      	ble.n	800663e <_dtoa_r+0xb56>
 800662a:	ee18 1a10 	vmov	r1, s16
 800662e:	2300      	movs	r3, #0
 8006630:	220a      	movs	r2, #10
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f9bc 	bl	80069b0 <__multadd>
 8006638:	ee08 0a10 	vmov	s16, r0
 800663c:	e7e7      	b.n	800660e <_dtoa_r+0xb26>
 800663e:	9b02      	ldr	r3, [sp, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfc8      	it	gt
 8006644:	461d      	movgt	r5, r3
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	bfd8      	it	le
 800664a:	2501      	movle	r5, #1
 800664c:	441d      	add	r5, r3
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	ee18 1a10 	vmov	r1, s16
 8006656:	2201      	movs	r2, #1
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fb59 	bl	8006d10 <__lshift>
 800665e:	4631      	mov	r1, r6
 8006660:	ee08 0a10 	vmov	s16, r0
 8006664:	f000 fbc4 	bl	8006df0 <__mcmp>
 8006668:	2800      	cmp	r0, #0
 800666a:	dc91      	bgt.n	8006590 <_dtoa_r+0xaa8>
 800666c:	d102      	bne.n	8006674 <_dtoa_r+0xb8c>
 800666e:	f01a 0f01 	tst.w	sl, #1
 8006672:	d18d      	bne.n	8006590 <_dtoa_r+0xaa8>
 8006674:	462b      	mov	r3, r5
 8006676:	461d      	mov	r5, r3
 8006678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800667c:	2a30      	cmp	r2, #48	; 0x30
 800667e:	d0fa      	beq.n	8006676 <_dtoa_r+0xb8e>
 8006680:	e6d7      	b.n	8006432 <_dtoa_r+0x94a>
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d184      	bne.n	8006592 <_dtoa_r+0xaaa>
 8006688:	9b00      	ldr	r3, [sp, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2331      	movs	r3, #49	; 0x31
 8006690:	7013      	strb	r3, [r2, #0]
 8006692:	e6ce      	b.n	8006432 <_dtoa_r+0x94a>
 8006694:	4b09      	ldr	r3, [pc, #36]	; (80066bc <_dtoa_r+0xbd4>)
 8006696:	f7ff ba95 	b.w	8005bc4 <_dtoa_r+0xdc>
 800669a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f aa6e 	bne.w	8005b7e <_dtoa_r+0x96>
 80066a2:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <_dtoa_r+0xbd8>)
 80066a4:	f7ff ba8e 	b.w	8005bc4 <_dtoa_r+0xdc>
 80066a8:	9b02      	ldr	r3, [sp, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dcae      	bgt.n	800660c <_dtoa_r+0xb24>
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	f73f aea8 	bgt.w	8006406 <_dtoa_r+0x91e>
 80066b6:	e7a9      	b.n	800660c <_dtoa_r+0xb24>
 80066b8:	08007c47 	.word	0x08007c47
 80066bc:	08007ba4 	.word	0x08007ba4
 80066c0:	08007bc8 	.word	0x08007bc8

080066c4 <std>:
 80066c4:	2300      	movs	r3, #0
 80066c6:	b510      	push	{r4, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	e9c0 3300 	strd	r3, r3, [r0]
 80066ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066d2:	6083      	str	r3, [r0, #8]
 80066d4:	8181      	strh	r1, [r0, #12]
 80066d6:	6643      	str	r3, [r0, #100]	; 0x64
 80066d8:	81c2      	strh	r2, [r0, #14]
 80066da:	6183      	str	r3, [r0, #24]
 80066dc:	4619      	mov	r1, r3
 80066de:	2208      	movs	r2, #8
 80066e0:	305c      	adds	r0, #92	; 0x5c
 80066e2:	f7fe fce9 	bl	80050b8 <memset>
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <std+0x38>)
 80066e8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ea:	4b05      	ldr	r3, [pc, #20]	; (8006700 <std+0x3c>)
 80066ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <std+0x40>)
 80066f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <std+0x44>)
 80066f4:	6224      	str	r4, [r4, #32]
 80066f6:	6323      	str	r3, [r4, #48]	; 0x30
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	bf00      	nop
 80066fc:	080074b5 	.word	0x080074b5
 8006700:	080074d7 	.word	0x080074d7
 8006704:	0800750f 	.word	0x0800750f
 8006708:	08007533 	.word	0x08007533

0800670c <_cleanup_r>:
 800670c:	4901      	ldr	r1, [pc, #4]	; (8006714 <_cleanup_r+0x8>)
 800670e:	f000 b8af 	b.w	8006870 <_fwalk_reent>
 8006712:	bf00      	nop
 8006714:	08007849 	.word	0x08007849

08006718 <__sfmoreglue>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	2268      	movs	r2, #104	; 0x68
 800671c:	1e4d      	subs	r5, r1, #1
 800671e:	4355      	muls	r5, r2
 8006720:	460e      	mov	r6, r1
 8006722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006726:	f000 fce7 	bl	80070f8 <_malloc_r>
 800672a:	4604      	mov	r4, r0
 800672c:	b140      	cbz	r0, 8006740 <__sfmoreglue+0x28>
 800672e:	2100      	movs	r1, #0
 8006730:	e9c0 1600 	strd	r1, r6, [r0]
 8006734:	300c      	adds	r0, #12
 8006736:	60a0      	str	r0, [r4, #8]
 8006738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800673c:	f7fe fcbc 	bl	80050b8 <memset>
 8006740:	4620      	mov	r0, r4
 8006742:	bd70      	pop	{r4, r5, r6, pc}

08006744 <__sfp_lock_acquire>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__sfp_lock_acquire+0x8>)
 8006746:	f000 b8b8 	b.w	80068ba <__retarget_lock_acquire_recursive>
 800674a:	bf00      	nop
 800674c:	2000032d 	.word	0x2000032d

08006750 <__sfp_lock_release>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__sfp_lock_release+0x8>)
 8006752:	f000 b8b3 	b.w	80068bc <__retarget_lock_release_recursive>
 8006756:	bf00      	nop
 8006758:	2000032d 	.word	0x2000032d

0800675c <__sinit_lock_acquire>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__sinit_lock_acquire+0x8>)
 800675e:	f000 b8ac 	b.w	80068ba <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	2000032e 	.word	0x2000032e

08006768 <__sinit_lock_release>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__sinit_lock_release+0x8>)
 800676a:	f000 b8a7 	b.w	80068bc <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	2000032e 	.word	0x2000032e

08006774 <__sinit>:
 8006774:	b510      	push	{r4, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	f7ff fff0 	bl	800675c <__sinit_lock_acquire>
 800677c:	69a3      	ldr	r3, [r4, #24]
 800677e:	b11b      	cbz	r3, 8006788 <__sinit+0x14>
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006784:	f7ff bff0 	b.w	8006768 <__sinit_lock_release>
 8006788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800678c:	6523      	str	r3, [r4, #80]	; 0x50
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <__sinit+0x68>)
 8006790:	4a13      	ldr	r2, [pc, #76]	; (80067e0 <__sinit+0x6c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	62a2      	str	r2, [r4, #40]	; 0x28
 8006796:	42a3      	cmp	r3, r4
 8006798:	bf04      	itt	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	61a3      	streq	r3, [r4, #24]
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 f820 	bl	80067e4 <__sfp>
 80067a4:	6060      	str	r0, [r4, #4]
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f81c 	bl	80067e4 <__sfp>
 80067ac:	60a0      	str	r0, [r4, #8]
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 f818 	bl	80067e4 <__sfp>
 80067b4:	2200      	movs	r2, #0
 80067b6:	60e0      	str	r0, [r4, #12]
 80067b8:	2104      	movs	r1, #4
 80067ba:	6860      	ldr	r0, [r4, #4]
 80067bc:	f7ff ff82 	bl	80066c4 <std>
 80067c0:	68a0      	ldr	r0, [r4, #8]
 80067c2:	2201      	movs	r2, #1
 80067c4:	2109      	movs	r1, #9
 80067c6:	f7ff ff7d 	bl	80066c4 <std>
 80067ca:	68e0      	ldr	r0, [r4, #12]
 80067cc:	2202      	movs	r2, #2
 80067ce:	2112      	movs	r1, #18
 80067d0:	f7ff ff78 	bl	80066c4 <std>
 80067d4:	2301      	movs	r3, #1
 80067d6:	61a3      	str	r3, [r4, #24]
 80067d8:	e7d2      	b.n	8006780 <__sinit+0xc>
 80067da:	bf00      	nop
 80067dc:	08007b90 	.word	0x08007b90
 80067e0:	0800670d 	.word	0x0800670d

080067e4 <__sfp>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	4607      	mov	r7, r0
 80067e8:	f7ff ffac 	bl	8006744 <__sfp_lock_acquire>
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <__sfp+0x84>)
 80067ee:	681e      	ldr	r6, [r3, #0]
 80067f0:	69b3      	ldr	r3, [r6, #24]
 80067f2:	b913      	cbnz	r3, 80067fa <__sfp+0x16>
 80067f4:	4630      	mov	r0, r6
 80067f6:	f7ff ffbd 	bl	8006774 <__sinit>
 80067fa:	3648      	adds	r6, #72	; 0x48
 80067fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006800:	3b01      	subs	r3, #1
 8006802:	d503      	bpl.n	800680c <__sfp+0x28>
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	b30b      	cbz	r3, 800684c <__sfp+0x68>
 8006808:	6836      	ldr	r6, [r6, #0]
 800680a:	e7f7      	b.n	80067fc <__sfp+0x18>
 800680c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006810:	b9d5      	cbnz	r5, 8006848 <__sfp+0x64>
 8006812:	4b16      	ldr	r3, [pc, #88]	; (800686c <__sfp+0x88>)
 8006814:	60e3      	str	r3, [r4, #12]
 8006816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800681a:	6665      	str	r5, [r4, #100]	; 0x64
 800681c:	f000 f84c 	bl	80068b8 <__retarget_lock_init_recursive>
 8006820:	f7ff ff96 	bl	8006750 <__sfp_lock_release>
 8006824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800682c:	6025      	str	r5, [r4, #0]
 800682e:	61a5      	str	r5, [r4, #24]
 8006830:	2208      	movs	r2, #8
 8006832:	4629      	mov	r1, r5
 8006834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006838:	f7fe fc3e 	bl	80050b8 <memset>
 800683c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006844:	4620      	mov	r0, r4
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006848:	3468      	adds	r4, #104	; 0x68
 800684a:	e7d9      	b.n	8006800 <__sfp+0x1c>
 800684c:	2104      	movs	r1, #4
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ff62 	bl	8006718 <__sfmoreglue>
 8006854:	4604      	mov	r4, r0
 8006856:	6030      	str	r0, [r6, #0]
 8006858:	2800      	cmp	r0, #0
 800685a:	d1d5      	bne.n	8006808 <__sfp+0x24>
 800685c:	f7ff ff78 	bl	8006750 <__sfp_lock_release>
 8006860:	230c      	movs	r3, #12
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	e7ee      	b.n	8006844 <__sfp+0x60>
 8006866:	bf00      	nop
 8006868:	08007b90 	.word	0x08007b90
 800686c:	ffff0001 	.word	0xffff0001

08006870 <_fwalk_reent>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4606      	mov	r6, r0
 8006876:	4688      	mov	r8, r1
 8006878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800687c:	2700      	movs	r7, #0
 800687e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006882:	f1b9 0901 	subs.w	r9, r9, #1
 8006886:	d505      	bpl.n	8006894 <_fwalk_reent+0x24>
 8006888:	6824      	ldr	r4, [r4, #0]
 800688a:	2c00      	cmp	r4, #0
 800688c:	d1f7      	bne.n	800687e <_fwalk_reent+0xe>
 800688e:	4638      	mov	r0, r7
 8006890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006894:	89ab      	ldrh	r3, [r5, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d907      	bls.n	80068aa <_fwalk_reent+0x3a>
 800689a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800689e:	3301      	adds	r3, #1
 80068a0:	d003      	beq.n	80068aa <_fwalk_reent+0x3a>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4630      	mov	r0, r6
 80068a6:	47c0      	blx	r8
 80068a8:	4307      	orrs	r7, r0
 80068aa:	3568      	adds	r5, #104	; 0x68
 80068ac:	e7e9      	b.n	8006882 <_fwalk_reent+0x12>
	...

080068b0 <_localeconv_r>:
 80068b0:	4800      	ldr	r0, [pc, #0]	; (80068b4 <_localeconv_r+0x4>)
 80068b2:	4770      	bx	lr
 80068b4:	20000160 	.word	0x20000160

080068b8 <__retarget_lock_init_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_acquire_recursive>:
 80068ba:	4770      	bx	lr

080068bc <__retarget_lock_release_recursive>:
 80068bc:	4770      	bx	lr
	...

080068c0 <malloc>:
 80068c0:	4b02      	ldr	r3, [pc, #8]	; (80068cc <malloc+0xc>)
 80068c2:	4601      	mov	r1, r0
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	f000 bc17 	b.w	80070f8 <_malloc_r>
 80068ca:	bf00      	nop
 80068cc:	2000000c 	.word	0x2000000c

080068d0 <memcpy>:
 80068d0:	440a      	add	r2, r1
 80068d2:	4291      	cmp	r1, r2
 80068d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068d8:	d100      	bne.n	80068dc <memcpy+0xc>
 80068da:	4770      	bx	lr
 80068dc:	b510      	push	{r4, lr}
 80068de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e6:	4291      	cmp	r1, r2
 80068e8:	d1f9      	bne.n	80068de <memcpy+0xe>
 80068ea:	bd10      	pop	{r4, pc}

080068ec <_Balloc>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	b976      	cbnz	r6, 8006914 <_Balloc+0x28>
 80068f6:	2010      	movs	r0, #16
 80068f8:	f7ff ffe2 	bl	80068c0 <malloc>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006900:	b920      	cbnz	r0, 800690c <_Balloc+0x20>
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <_Balloc+0x78>)
 8006904:	4818      	ldr	r0, [pc, #96]	; (8006968 <_Balloc+0x7c>)
 8006906:	2166      	movs	r1, #102	; 0x66
 8006908:	f000 feea 	bl	80076e0 <__assert_func>
 800690c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006910:	6006      	str	r6, [r0, #0]
 8006912:	60c6      	str	r6, [r0, #12]
 8006914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006916:	68f3      	ldr	r3, [r6, #12]
 8006918:	b183      	cbz	r3, 800693c <_Balloc+0x50>
 800691a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006922:	b9b8      	cbnz	r0, 8006954 <_Balloc+0x68>
 8006924:	2101      	movs	r1, #1
 8006926:	fa01 f605 	lsl.w	r6, r1, r5
 800692a:	1d72      	adds	r2, r6, #5
 800692c:	0092      	lsls	r2, r2, #2
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fb60 	bl	8006ff4 <_calloc_r>
 8006934:	b160      	cbz	r0, 8006950 <_Balloc+0x64>
 8006936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800693a:	e00e      	b.n	800695a <_Balloc+0x6e>
 800693c:	2221      	movs	r2, #33	; 0x21
 800693e:	2104      	movs	r1, #4
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fb57 	bl	8006ff4 <_calloc_r>
 8006946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006948:	60f0      	str	r0, [r6, #12]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <_Balloc+0x2e>
 8006950:	2000      	movs	r0, #0
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	6802      	ldr	r2, [r0, #0]
 8006956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800695a:	2300      	movs	r3, #0
 800695c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006960:	e7f7      	b.n	8006952 <_Balloc+0x66>
 8006962:	bf00      	nop
 8006964:	08007bd5 	.word	0x08007bd5
 8006968:	08007cb8 	.word	0x08007cb8

0800696c <_Bfree>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006970:	4605      	mov	r5, r0
 8006972:	460c      	mov	r4, r1
 8006974:	b976      	cbnz	r6, 8006994 <_Bfree+0x28>
 8006976:	2010      	movs	r0, #16
 8006978:	f7ff ffa2 	bl	80068c0 <malloc>
 800697c:	4602      	mov	r2, r0
 800697e:	6268      	str	r0, [r5, #36]	; 0x24
 8006980:	b920      	cbnz	r0, 800698c <_Bfree+0x20>
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <_Bfree+0x3c>)
 8006984:	4809      	ldr	r0, [pc, #36]	; (80069ac <_Bfree+0x40>)
 8006986:	218a      	movs	r1, #138	; 0x8a
 8006988:	f000 feaa 	bl	80076e0 <__assert_func>
 800698c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006990:	6006      	str	r6, [r0, #0]
 8006992:	60c6      	str	r6, [r0, #12]
 8006994:	b13c      	cbz	r4, 80069a6 <_Bfree+0x3a>
 8006996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006998:	6862      	ldr	r2, [r4, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069a0:	6021      	str	r1, [r4, #0]
 80069a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	08007bd5 	.word	0x08007bd5
 80069ac:	08007cb8 	.word	0x08007cb8

080069b0 <__multadd>:
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	690d      	ldr	r5, [r1, #16]
 80069b6:	4607      	mov	r7, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	461e      	mov	r6, r3
 80069bc:	f101 0c14 	add.w	ip, r1, #20
 80069c0:	2000      	movs	r0, #0
 80069c2:	f8dc 3000 	ldr.w	r3, [ip]
 80069c6:	b299      	uxth	r1, r3
 80069c8:	fb02 6101 	mla	r1, r2, r1, r6
 80069cc:	0c1e      	lsrs	r6, r3, #16
 80069ce:	0c0b      	lsrs	r3, r1, #16
 80069d0:	fb02 3306 	mla	r3, r2, r6, r3
 80069d4:	b289      	uxth	r1, r1
 80069d6:	3001      	adds	r0, #1
 80069d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069dc:	4285      	cmp	r5, r0
 80069de:	f84c 1b04 	str.w	r1, [ip], #4
 80069e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069e6:	dcec      	bgt.n	80069c2 <__multadd+0x12>
 80069e8:	b30e      	cbz	r6, 8006a2e <__multadd+0x7e>
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dc19      	bgt.n	8006a24 <__multadd+0x74>
 80069f0:	6861      	ldr	r1, [r4, #4]
 80069f2:	4638      	mov	r0, r7
 80069f4:	3101      	adds	r1, #1
 80069f6:	f7ff ff79 	bl	80068ec <_Balloc>
 80069fa:	4680      	mov	r8, r0
 80069fc:	b928      	cbnz	r0, 8006a0a <__multadd+0x5a>
 80069fe:	4602      	mov	r2, r0
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <__multadd+0x84>)
 8006a02:	480d      	ldr	r0, [pc, #52]	; (8006a38 <__multadd+0x88>)
 8006a04:	21b5      	movs	r1, #181	; 0xb5
 8006a06:	f000 fe6b 	bl	80076e0 <__assert_func>
 8006a0a:	6922      	ldr	r2, [r4, #16]
 8006a0c:	3202      	adds	r2, #2
 8006a0e:	f104 010c 	add.w	r1, r4, #12
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	300c      	adds	r0, #12
 8006a16:	f7ff ff5b 	bl	80068d0 <memcpy>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff ffa5 	bl	800696c <_Bfree>
 8006a22:	4644      	mov	r4, r8
 8006a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a28:	3501      	adds	r5, #1
 8006a2a:	615e      	str	r6, [r3, #20]
 8006a2c:	6125      	str	r5, [r4, #16]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a34:	08007c47 	.word	0x08007c47
 8006a38:	08007cb8 	.word	0x08007cb8

08006a3c <__hi0bits>:
 8006a3c:	0c03      	lsrs	r3, r0, #16
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	b9d3      	cbnz	r3, 8006a78 <__hi0bits+0x3c>
 8006a42:	0400      	lsls	r0, r0, #16
 8006a44:	2310      	movs	r3, #16
 8006a46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a4a:	bf04      	itt	eq
 8006a4c:	0200      	lsleq	r0, r0, #8
 8006a4e:	3308      	addeq	r3, #8
 8006a50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a54:	bf04      	itt	eq
 8006a56:	0100      	lsleq	r0, r0, #4
 8006a58:	3304      	addeq	r3, #4
 8006a5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a5e:	bf04      	itt	eq
 8006a60:	0080      	lsleq	r0, r0, #2
 8006a62:	3302      	addeq	r3, #2
 8006a64:	2800      	cmp	r0, #0
 8006a66:	db05      	blt.n	8006a74 <__hi0bits+0x38>
 8006a68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a6c:	f103 0301 	add.w	r3, r3, #1
 8006a70:	bf08      	it	eq
 8006a72:	2320      	moveq	r3, #32
 8006a74:	4618      	mov	r0, r3
 8006a76:	4770      	bx	lr
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e7e4      	b.n	8006a46 <__hi0bits+0xa>

08006a7c <__lo0bits>:
 8006a7c:	6803      	ldr	r3, [r0, #0]
 8006a7e:	f013 0207 	ands.w	r2, r3, #7
 8006a82:	4601      	mov	r1, r0
 8006a84:	d00b      	beq.n	8006a9e <__lo0bits+0x22>
 8006a86:	07da      	lsls	r2, r3, #31
 8006a88:	d423      	bmi.n	8006ad2 <__lo0bits+0x56>
 8006a8a:	0798      	lsls	r0, r3, #30
 8006a8c:	bf49      	itett	mi
 8006a8e:	085b      	lsrmi	r3, r3, #1
 8006a90:	089b      	lsrpl	r3, r3, #2
 8006a92:	2001      	movmi	r0, #1
 8006a94:	600b      	strmi	r3, [r1, #0]
 8006a96:	bf5c      	itt	pl
 8006a98:	600b      	strpl	r3, [r1, #0]
 8006a9a:	2002      	movpl	r0, #2
 8006a9c:	4770      	bx	lr
 8006a9e:	b298      	uxth	r0, r3
 8006aa0:	b9a8      	cbnz	r0, 8006ace <__lo0bits+0x52>
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	2010      	movs	r0, #16
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	b90a      	cbnz	r2, 8006aae <__lo0bits+0x32>
 8006aaa:	3008      	adds	r0, #8
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	071a      	lsls	r2, r3, #28
 8006ab0:	bf04      	itt	eq
 8006ab2:	091b      	lsreq	r3, r3, #4
 8006ab4:	3004      	addeq	r0, #4
 8006ab6:	079a      	lsls	r2, r3, #30
 8006ab8:	bf04      	itt	eq
 8006aba:	089b      	lsreq	r3, r3, #2
 8006abc:	3002      	addeq	r0, #2
 8006abe:	07da      	lsls	r2, r3, #31
 8006ac0:	d403      	bmi.n	8006aca <__lo0bits+0x4e>
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f100 0001 	add.w	r0, r0, #1
 8006ac8:	d005      	beq.n	8006ad6 <__lo0bits+0x5a>
 8006aca:	600b      	str	r3, [r1, #0]
 8006acc:	4770      	bx	lr
 8006ace:	4610      	mov	r0, r2
 8006ad0:	e7e9      	b.n	8006aa6 <__lo0bits+0x2a>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	4770      	bx	lr
 8006ad6:	2020      	movs	r0, #32
 8006ad8:	4770      	bx	lr
	...

08006adc <__i2b>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	f7ff ff03 	bl	80068ec <_Balloc>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	b928      	cbnz	r0, 8006af6 <__i2b+0x1a>
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <__i2b+0x24>)
 8006aec:	4805      	ldr	r0, [pc, #20]	; (8006b04 <__i2b+0x28>)
 8006aee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006af2:	f000 fdf5 	bl	80076e0 <__assert_func>
 8006af6:	2301      	movs	r3, #1
 8006af8:	6144      	str	r4, [r0, #20]
 8006afa:	6103      	str	r3, [r0, #16]
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	bf00      	nop
 8006b00:	08007c47 	.word	0x08007c47
 8006b04:	08007cb8 	.word	0x08007cb8

08006b08 <__multiply>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	690a      	ldr	r2, [r1, #16]
 8006b10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	bfb8      	it	lt
 8006b18:	460b      	movlt	r3, r1
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	bfbc      	itt	lt
 8006b1e:	464c      	movlt	r4, r9
 8006b20:	4699      	movlt	r9, r3
 8006b22:	6927      	ldr	r7, [r4, #16]
 8006b24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b28:	68a3      	ldr	r3, [r4, #8]
 8006b2a:	6861      	ldr	r1, [r4, #4]
 8006b2c:	eb07 060a 	add.w	r6, r7, sl
 8006b30:	42b3      	cmp	r3, r6
 8006b32:	b085      	sub	sp, #20
 8006b34:	bfb8      	it	lt
 8006b36:	3101      	addlt	r1, #1
 8006b38:	f7ff fed8 	bl	80068ec <_Balloc>
 8006b3c:	b930      	cbnz	r0, 8006b4c <__multiply+0x44>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b44      	ldr	r3, [pc, #272]	; (8006c54 <__multiply+0x14c>)
 8006b42:	4845      	ldr	r0, [pc, #276]	; (8006c58 <__multiply+0x150>)
 8006b44:	f240 115d 	movw	r1, #349	; 0x15d
 8006b48:	f000 fdca 	bl	80076e0 <__assert_func>
 8006b4c:	f100 0514 	add.w	r5, r0, #20
 8006b50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b54:	462b      	mov	r3, r5
 8006b56:	2200      	movs	r2, #0
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	d321      	bcc.n	8006ba0 <__multiply+0x98>
 8006b5c:	f104 0314 	add.w	r3, r4, #20
 8006b60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b64:	f109 0314 	add.w	r3, r9, #20
 8006b68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b6c:	9202      	str	r2, [sp, #8]
 8006b6e:	1b3a      	subs	r2, r7, r4
 8006b70:	3a15      	subs	r2, #21
 8006b72:	f022 0203 	bic.w	r2, r2, #3
 8006b76:	3204      	adds	r2, #4
 8006b78:	f104 0115 	add.w	r1, r4, #21
 8006b7c:	428f      	cmp	r7, r1
 8006b7e:	bf38      	it	cc
 8006b80:	2204      	movcc	r2, #4
 8006b82:	9201      	str	r2, [sp, #4]
 8006b84:	9a02      	ldr	r2, [sp, #8]
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d80c      	bhi.n	8006ba6 <__multiply+0x9e>
 8006b8c:	2e00      	cmp	r6, #0
 8006b8e:	dd03      	ble.n	8006b98 <__multiply+0x90>
 8006b90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05a      	beq.n	8006c4e <__multiply+0x146>
 8006b98:	6106      	str	r6, [r0, #16]
 8006b9a:	b005      	add	sp, #20
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	f843 2b04 	str.w	r2, [r3], #4
 8006ba4:	e7d8      	b.n	8006b58 <__multiply+0x50>
 8006ba6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006baa:	f1ba 0f00 	cmp.w	sl, #0
 8006bae:	d024      	beq.n	8006bfa <__multiply+0xf2>
 8006bb0:	f104 0e14 	add.w	lr, r4, #20
 8006bb4:	46a9      	mov	r9, r5
 8006bb6:	f04f 0c00 	mov.w	ip, #0
 8006bba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bbe:	f8d9 1000 	ldr.w	r1, [r9]
 8006bc2:	fa1f fb82 	uxth.w	fp, r2
 8006bc6:	b289      	uxth	r1, r1
 8006bc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8006bd4:	4461      	add	r1, ip
 8006bd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bda:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006be2:	b289      	uxth	r1, r1
 8006be4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006be8:	4577      	cmp	r7, lr
 8006bea:	f849 1b04 	str.w	r1, [r9], #4
 8006bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf2:	d8e2      	bhi.n	8006bba <__multiply+0xb2>
 8006bf4:	9a01      	ldr	r2, [sp, #4]
 8006bf6:	f845 c002 	str.w	ip, [r5, r2]
 8006bfa:	9a03      	ldr	r2, [sp, #12]
 8006bfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c00:	3304      	adds	r3, #4
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	d020      	beq.n	8006c4a <__multiply+0x142>
 8006c08:	6829      	ldr	r1, [r5, #0]
 8006c0a:	f104 0c14 	add.w	ip, r4, #20
 8006c0e:	46ae      	mov	lr, r5
 8006c10:	f04f 0a00 	mov.w	sl, #0
 8006c14:	f8bc b000 	ldrh.w	fp, [ip]
 8006c18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c1c:	fb09 220b 	mla	r2, r9, fp, r2
 8006c20:	4492      	add	sl, r2
 8006c22:	b289      	uxth	r1, r1
 8006c24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c28:	f84e 1b04 	str.w	r1, [lr], #4
 8006c2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c30:	f8be 1000 	ldrh.w	r1, [lr]
 8006c34:	0c12      	lsrs	r2, r2, #16
 8006c36:	fb09 1102 	mla	r1, r9, r2, r1
 8006c3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c3e:	4567      	cmp	r7, ip
 8006c40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c44:	d8e6      	bhi.n	8006c14 <__multiply+0x10c>
 8006c46:	9a01      	ldr	r2, [sp, #4]
 8006c48:	50a9      	str	r1, [r5, r2]
 8006c4a:	3504      	adds	r5, #4
 8006c4c:	e79a      	b.n	8006b84 <__multiply+0x7c>
 8006c4e:	3e01      	subs	r6, #1
 8006c50:	e79c      	b.n	8006b8c <__multiply+0x84>
 8006c52:	bf00      	nop
 8006c54:	08007c47 	.word	0x08007c47
 8006c58:	08007cb8 	.word	0x08007cb8

08006c5c <__pow5mult>:
 8006c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c60:	4615      	mov	r5, r2
 8006c62:	f012 0203 	ands.w	r2, r2, #3
 8006c66:	4606      	mov	r6, r0
 8006c68:	460f      	mov	r7, r1
 8006c6a:	d007      	beq.n	8006c7c <__pow5mult+0x20>
 8006c6c:	4c25      	ldr	r4, [pc, #148]	; (8006d04 <__pow5mult+0xa8>)
 8006c6e:	3a01      	subs	r2, #1
 8006c70:	2300      	movs	r3, #0
 8006c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c76:	f7ff fe9b 	bl	80069b0 <__multadd>
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	10ad      	asrs	r5, r5, #2
 8006c7e:	d03d      	beq.n	8006cfc <__pow5mult+0xa0>
 8006c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c82:	b97c      	cbnz	r4, 8006ca4 <__pow5mult+0x48>
 8006c84:	2010      	movs	r0, #16
 8006c86:	f7ff fe1b 	bl	80068c0 <malloc>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c8e:	b928      	cbnz	r0, 8006c9c <__pow5mult+0x40>
 8006c90:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <__pow5mult+0xac>)
 8006c92:	481e      	ldr	r0, [pc, #120]	; (8006d0c <__pow5mult+0xb0>)
 8006c94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c98:	f000 fd22 	bl	80076e0 <__assert_func>
 8006c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca0:	6004      	str	r4, [r0, #0]
 8006ca2:	60c4      	str	r4, [r0, #12]
 8006ca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cac:	b94c      	cbnz	r4, 8006cc2 <__pow5mult+0x66>
 8006cae:	f240 2171 	movw	r1, #625	; 0x271
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ff12 	bl	8006adc <__i2b>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	f04f 0900 	mov.w	r9, #0
 8006cc6:	07eb      	lsls	r3, r5, #31
 8006cc8:	d50a      	bpl.n	8006ce0 <__pow5mult+0x84>
 8006cca:	4639      	mov	r1, r7
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ff1a 	bl	8006b08 <__multiply>
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7ff fe47 	bl	800696c <_Bfree>
 8006cde:	4647      	mov	r7, r8
 8006ce0:	106d      	asrs	r5, r5, #1
 8006ce2:	d00b      	beq.n	8006cfc <__pow5mult+0xa0>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	b938      	cbnz	r0, 8006cf8 <__pow5mult+0x9c>
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4621      	mov	r1, r4
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff ff0b 	bl	8006b08 <__multiply>
 8006cf2:	6020      	str	r0, [r4, #0]
 8006cf4:	f8c0 9000 	str.w	r9, [r0]
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	e7e4      	b.n	8006cc6 <__pow5mult+0x6a>
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d02:	bf00      	nop
 8006d04:	08007e08 	.word	0x08007e08
 8006d08:	08007bd5 	.word	0x08007bd5
 8006d0c:	08007cb8 	.word	0x08007cb8

08006d10 <__lshift>:
 8006d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	460c      	mov	r4, r1
 8006d16:	6849      	ldr	r1, [r1, #4]
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	4607      	mov	r7, r0
 8006d22:	4691      	mov	r9, r2
 8006d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d28:	f108 0601 	add.w	r6, r8, #1
 8006d2c:	42b3      	cmp	r3, r6
 8006d2e:	db0b      	blt.n	8006d48 <__lshift+0x38>
 8006d30:	4638      	mov	r0, r7
 8006d32:	f7ff fddb 	bl	80068ec <_Balloc>
 8006d36:	4605      	mov	r5, r0
 8006d38:	b948      	cbnz	r0, 8006d4e <__lshift+0x3e>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b2a      	ldr	r3, [pc, #168]	; (8006de8 <__lshift+0xd8>)
 8006d3e:	482b      	ldr	r0, [pc, #172]	; (8006dec <__lshift+0xdc>)
 8006d40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d44:	f000 fccc 	bl	80076e0 <__assert_func>
 8006d48:	3101      	adds	r1, #1
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	e7ee      	b.n	8006d2c <__lshift+0x1c>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f100 0114 	add.w	r1, r0, #20
 8006d54:	f100 0210 	add.w	r2, r0, #16
 8006d58:	4618      	mov	r0, r3
 8006d5a:	4553      	cmp	r3, sl
 8006d5c:	db37      	blt.n	8006dce <__lshift+0xbe>
 8006d5e:	6920      	ldr	r0, [r4, #16]
 8006d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d64:	f104 0314 	add.w	r3, r4, #20
 8006d68:	f019 091f 	ands.w	r9, r9, #31
 8006d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d74:	d02f      	beq.n	8006dd6 <__lshift+0xc6>
 8006d76:	f1c9 0e20 	rsb	lr, r9, #32
 8006d7a:	468a      	mov	sl, r1
 8006d7c:	f04f 0c00 	mov.w	ip, #0
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	fa02 f209 	lsl.w	r2, r2, r9
 8006d86:	ea42 020c 	orr.w	r2, r2, ip
 8006d8a:	f84a 2b04 	str.w	r2, [sl], #4
 8006d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d92:	4298      	cmp	r0, r3
 8006d94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d98:	d8f2      	bhi.n	8006d80 <__lshift+0x70>
 8006d9a:	1b03      	subs	r3, r0, r4
 8006d9c:	3b15      	subs	r3, #21
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	3304      	adds	r3, #4
 8006da4:	f104 0215 	add.w	r2, r4, #21
 8006da8:	4290      	cmp	r0, r2
 8006daa:	bf38      	it	cc
 8006dac:	2304      	movcc	r3, #4
 8006dae:	f841 c003 	str.w	ip, [r1, r3]
 8006db2:	f1bc 0f00 	cmp.w	ip, #0
 8006db6:	d001      	beq.n	8006dbc <__lshift+0xac>
 8006db8:	f108 0602 	add.w	r6, r8, #2
 8006dbc:	3e01      	subs	r6, #1
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	612e      	str	r6, [r5, #16]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f7ff fdd2 	bl	800696c <_Bfree>
 8006dc8:	4628      	mov	r0, r5
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	e7c1      	b.n	8006d5a <__lshift+0x4a>
 8006dd6:	3904      	subs	r1, #4
 8006dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de0:	4298      	cmp	r0, r3
 8006de2:	d8f9      	bhi.n	8006dd8 <__lshift+0xc8>
 8006de4:	e7ea      	b.n	8006dbc <__lshift+0xac>
 8006de6:	bf00      	nop
 8006de8:	08007c47 	.word	0x08007c47
 8006dec:	08007cb8 	.word	0x08007cb8

08006df0 <__mcmp>:
 8006df0:	b530      	push	{r4, r5, lr}
 8006df2:	6902      	ldr	r2, [r0, #16]
 8006df4:	690c      	ldr	r4, [r1, #16]
 8006df6:	1b12      	subs	r2, r2, r4
 8006df8:	d10e      	bne.n	8006e18 <__mcmp+0x28>
 8006dfa:	f100 0314 	add.w	r3, r0, #20
 8006dfe:	3114      	adds	r1, #20
 8006e00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e10:	42a5      	cmp	r5, r4
 8006e12:	d003      	beq.n	8006e1c <__mcmp+0x2c>
 8006e14:	d305      	bcc.n	8006e22 <__mcmp+0x32>
 8006e16:	2201      	movs	r2, #1
 8006e18:	4610      	mov	r0, r2
 8006e1a:	bd30      	pop	{r4, r5, pc}
 8006e1c:	4283      	cmp	r3, r0
 8006e1e:	d3f3      	bcc.n	8006e08 <__mcmp+0x18>
 8006e20:	e7fa      	b.n	8006e18 <__mcmp+0x28>
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e26:	e7f7      	b.n	8006e18 <__mcmp+0x28>

08006e28 <__mdiff>:
 8006e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	4606      	mov	r6, r0
 8006e30:	4611      	mov	r1, r2
 8006e32:	4620      	mov	r0, r4
 8006e34:	4690      	mov	r8, r2
 8006e36:	f7ff ffdb 	bl	8006df0 <__mcmp>
 8006e3a:	1e05      	subs	r5, r0, #0
 8006e3c:	d110      	bne.n	8006e60 <__mdiff+0x38>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff fd53 	bl	80068ec <_Balloc>
 8006e46:	b930      	cbnz	r0, 8006e56 <__mdiff+0x2e>
 8006e48:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <__mdiff+0x10c>)
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f240 2132 	movw	r1, #562	; 0x232
 8006e50:	4839      	ldr	r0, [pc, #228]	; (8006f38 <__mdiff+0x110>)
 8006e52:	f000 fc45 	bl	80076e0 <__assert_func>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	bfa4      	itt	ge
 8006e62:	4643      	movge	r3, r8
 8006e64:	46a0      	movge	r8, r4
 8006e66:	4630      	mov	r0, r6
 8006e68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e6c:	bfa6      	itte	ge
 8006e6e:	461c      	movge	r4, r3
 8006e70:	2500      	movge	r5, #0
 8006e72:	2501      	movlt	r5, #1
 8006e74:	f7ff fd3a 	bl	80068ec <_Balloc>
 8006e78:	b920      	cbnz	r0, 8006e84 <__mdiff+0x5c>
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <__mdiff+0x10c>)
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e82:	e7e5      	b.n	8006e50 <__mdiff+0x28>
 8006e84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e88:	6926      	ldr	r6, [r4, #16]
 8006e8a:	60c5      	str	r5, [r0, #12]
 8006e8c:	f104 0914 	add.w	r9, r4, #20
 8006e90:	f108 0514 	add.w	r5, r8, #20
 8006e94:	f100 0e14 	add.w	lr, r0, #20
 8006e98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ea0:	f108 0210 	add.w	r2, r8, #16
 8006ea4:	46f2      	mov	sl, lr
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eb0:	fa1f f883 	uxth.w	r8, r3
 8006eb4:	fa11 f18b 	uxtah	r1, r1, fp
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	eba1 0808 	sub.w	r8, r1, r8
 8006ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ec6:	fa1f f888 	uxth.w	r8, r8
 8006eca:	1419      	asrs	r1, r3, #16
 8006ecc:	454e      	cmp	r6, r9
 8006ece:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8006ed6:	d8e7      	bhi.n	8006ea8 <__mdiff+0x80>
 8006ed8:	1b33      	subs	r3, r6, r4
 8006eda:	3b15      	subs	r3, #21
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	3415      	adds	r4, #21
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	bf38      	it	cc
 8006ee8:	2304      	movcc	r3, #4
 8006eea:	441d      	add	r5, r3
 8006eec:	4473      	add	r3, lr
 8006eee:	469e      	mov	lr, r3
 8006ef0:	462e      	mov	r6, r5
 8006ef2:	4566      	cmp	r6, ip
 8006ef4:	d30e      	bcc.n	8006f14 <__mdiff+0xec>
 8006ef6:	f10c 0203 	add.w	r2, ip, #3
 8006efa:	1b52      	subs	r2, r2, r5
 8006efc:	f022 0203 	bic.w	r2, r2, #3
 8006f00:	3d03      	subs	r5, #3
 8006f02:	45ac      	cmp	ip, r5
 8006f04:	bf38      	it	cc
 8006f06:	2200      	movcc	r2, #0
 8006f08:	441a      	add	r2, r3
 8006f0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f0e:	b17b      	cbz	r3, 8006f30 <__mdiff+0x108>
 8006f10:	6107      	str	r7, [r0, #16]
 8006f12:	e7a3      	b.n	8006e5c <__mdiff+0x34>
 8006f14:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f18:	fa11 f288 	uxtah	r2, r1, r8
 8006f1c:	1414      	asrs	r4, r2, #16
 8006f1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f22:	b292      	uxth	r2, r2
 8006f24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f28:	f84e 2b04 	str.w	r2, [lr], #4
 8006f2c:	1421      	asrs	r1, r4, #16
 8006f2e:	e7e0      	b.n	8006ef2 <__mdiff+0xca>
 8006f30:	3f01      	subs	r7, #1
 8006f32:	e7ea      	b.n	8006f0a <__mdiff+0xe2>
 8006f34:	08007c47 	.word	0x08007c47
 8006f38:	08007cb8 	.word	0x08007cb8

08006f3c <__d2b>:
 8006f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4689      	mov	r9, r1
 8006f42:	2101      	movs	r1, #1
 8006f44:	ec57 6b10 	vmov	r6, r7, d0
 8006f48:	4690      	mov	r8, r2
 8006f4a:	f7ff fccf 	bl	80068ec <_Balloc>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	b930      	cbnz	r0, 8006f60 <__d2b+0x24>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <__d2b+0xb0>)
 8006f56:	4826      	ldr	r0, [pc, #152]	; (8006ff0 <__d2b+0xb4>)
 8006f58:	f240 310a 	movw	r1, #778	; 0x30a
 8006f5c:	f000 fbc0 	bl	80076e0 <__assert_func>
 8006f60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f68:	bb35      	cbnz	r5, 8006fb8 <__d2b+0x7c>
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	d028      	beq.n	8006fc2 <__d2b+0x86>
 8006f70:	4668      	mov	r0, sp
 8006f72:	9600      	str	r6, [sp, #0]
 8006f74:	f7ff fd82 	bl	8006a7c <__lo0bits>
 8006f78:	9900      	ldr	r1, [sp, #0]
 8006f7a:	b300      	cbz	r0, 8006fbe <__d2b+0x82>
 8006f7c:	9a01      	ldr	r2, [sp, #4]
 8006f7e:	f1c0 0320 	rsb	r3, r0, #32
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	430b      	orrs	r3, r1
 8006f88:	40c2      	lsrs	r2, r0
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	61a3      	str	r3, [r4, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2202      	movne	r2, #2
 8006f98:	2201      	moveq	r2, #1
 8006f9a:	6122      	str	r2, [r4, #16]
 8006f9c:	b1d5      	cbz	r5, 8006fd4 <__d2b+0x98>
 8006f9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa2:	4405      	add	r5, r0
 8006fa4:	f8c9 5000 	str.w	r5, [r9]
 8006fa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fac:	f8c8 0000 	str.w	r0, [r8]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	b003      	add	sp, #12
 8006fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fbc:	e7d5      	b.n	8006f6a <__d2b+0x2e>
 8006fbe:	6161      	str	r1, [r4, #20]
 8006fc0:	e7e5      	b.n	8006f8e <__d2b+0x52>
 8006fc2:	a801      	add	r0, sp, #4
 8006fc4:	f7ff fd5a 	bl	8006a7c <__lo0bits>
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	6122      	str	r2, [r4, #16]
 8006fd0:	3020      	adds	r0, #32
 8006fd2:	e7e3      	b.n	8006f9c <__d2b+0x60>
 8006fd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fdc:	f8c9 0000 	str.w	r0, [r9]
 8006fe0:	6918      	ldr	r0, [r3, #16]
 8006fe2:	f7ff fd2b 	bl	8006a3c <__hi0bits>
 8006fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fea:	e7df      	b.n	8006fac <__d2b+0x70>
 8006fec:	08007c47 	.word	0x08007c47
 8006ff0:	08007cb8 	.word	0x08007cb8

08006ff4 <_calloc_r>:
 8006ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ff6:	fba1 2402 	umull	r2, r4, r1, r2
 8006ffa:	b94c      	cbnz	r4, 8007010 <_calloc_r+0x1c>
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	f000 f87a 	bl	80070f8 <_malloc_r>
 8007004:	9a01      	ldr	r2, [sp, #4]
 8007006:	4605      	mov	r5, r0
 8007008:	b930      	cbnz	r0, 8007018 <_calloc_r+0x24>
 800700a:	4628      	mov	r0, r5
 800700c:	b003      	add	sp, #12
 800700e:	bd30      	pop	{r4, r5, pc}
 8007010:	220c      	movs	r2, #12
 8007012:	6002      	str	r2, [r0, #0]
 8007014:	2500      	movs	r5, #0
 8007016:	e7f8      	b.n	800700a <_calloc_r+0x16>
 8007018:	4621      	mov	r1, r4
 800701a:	f7fe f84d 	bl	80050b8 <memset>
 800701e:	e7f4      	b.n	800700a <_calloc_r+0x16>

08007020 <_free_r>:
 8007020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007022:	2900      	cmp	r1, #0
 8007024:	d044      	beq.n	80070b0 <_free_r+0x90>
 8007026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800702a:	9001      	str	r0, [sp, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f1a1 0404 	sub.w	r4, r1, #4
 8007032:	bfb8      	it	lt
 8007034:	18e4      	addlt	r4, r4, r3
 8007036:	f000 fcdf 	bl	80079f8 <__malloc_lock>
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <_free_r+0x94>)
 800703c:	9801      	ldr	r0, [sp, #4]
 800703e:	6813      	ldr	r3, [r2, #0]
 8007040:	b933      	cbnz	r3, 8007050 <_free_r+0x30>
 8007042:	6063      	str	r3, [r4, #4]
 8007044:	6014      	str	r4, [r2, #0]
 8007046:	b003      	add	sp, #12
 8007048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800704c:	f000 bcda 	b.w	8007a04 <__malloc_unlock>
 8007050:	42a3      	cmp	r3, r4
 8007052:	d908      	bls.n	8007066 <_free_r+0x46>
 8007054:	6825      	ldr	r5, [r4, #0]
 8007056:	1961      	adds	r1, r4, r5
 8007058:	428b      	cmp	r3, r1
 800705a:	bf01      	itttt	eq
 800705c:	6819      	ldreq	r1, [r3, #0]
 800705e:	685b      	ldreq	r3, [r3, #4]
 8007060:	1949      	addeq	r1, r1, r5
 8007062:	6021      	streq	r1, [r4, #0]
 8007064:	e7ed      	b.n	8007042 <_free_r+0x22>
 8007066:	461a      	mov	r2, r3
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b10b      	cbz	r3, 8007070 <_free_r+0x50>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x46>
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	1855      	adds	r5, r2, r1
 8007074:	42a5      	cmp	r5, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x70>
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	4421      	add	r1, r4
 800707c:	1854      	adds	r4, r2, r1
 800707e:	42a3      	cmp	r3, r4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	d1e0      	bne.n	8007046 <_free_r+0x26>
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	4421      	add	r1, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	e7da      	b.n	8007046 <_free_r+0x26>
 8007090:	d902      	bls.n	8007098 <_free_r+0x78>
 8007092:	230c      	movs	r3, #12
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	e7d6      	b.n	8007046 <_free_r+0x26>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf04      	itt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6054      	str	r4, [r2, #4]
 80070ae:	e7ca      	b.n	8007046 <_free_r+0x26>
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	20000330 	.word	0x20000330

080070b8 <sbrk_aligned>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4e0e      	ldr	r6, [pc, #56]	; (80070f4 <sbrk_aligned+0x3c>)
 80070bc:	460c      	mov	r4, r1
 80070be:	6831      	ldr	r1, [r6, #0]
 80070c0:	4605      	mov	r5, r0
 80070c2:	b911      	cbnz	r1, 80070ca <sbrk_aligned+0x12>
 80070c4:	f000 f9e6 	bl	8007494 <_sbrk_r>
 80070c8:	6030      	str	r0, [r6, #0]
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f9e1 	bl	8007494 <_sbrk_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d00a      	beq.n	80070ec <sbrk_aligned+0x34>
 80070d6:	1cc4      	adds	r4, r0, #3
 80070d8:	f024 0403 	bic.w	r4, r4, #3
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d007      	beq.n	80070f0 <sbrk_aligned+0x38>
 80070e0:	1a21      	subs	r1, r4, r0
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 f9d6 	bl	8007494 <_sbrk_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d101      	bne.n	80070f0 <sbrk_aligned+0x38>
 80070ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070f0:	4620      	mov	r0, r4
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	20000334 	.word	0x20000334

080070f8 <_malloc_r>:
 80070f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fc:	1ccd      	adds	r5, r1, #3
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	2d00      	cmp	r5, #0
 800710c:	4607      	mov	r7, r0
 800710e:	db01      	blt.n	8007114 <_malloc_r+0x1c>
 8007110:	42a9      	cmp	r1, r5
 8007112:	d905      	bls.n	8007120 <_malloc_r+0x28>
 8007114:	230c      	movs	r3, #12
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	2600      	movs	r6, #0
 800711a:	4630      	mov	r0, r6
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	4e2e      	ldr	r6, [pc, #184]	; (80071dc <_malloc_r+0xe4>)
 8007122:	f000 fc69 	bl	80079f8 <__malloc_lock>
 8007126:	6833      	ldr	r3, [r6, #0]
 8007128:	461c      	mov	r4, r3
 800712a:	bb34      	cbnz	r4, 800717a <_malloc_r+0x82>
 800712c:	4629      	mov	r1, r5
 800712e:	4638      	mov	r0, r7
 8007130:	f7ff ffc2 	bl	80070b8 <sbrk_aligned>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	4604      	mov	r4, r0
 8007138:	d14d      	bne.n	80071d6 <_malloc_r+0xde>
 800713a:	6834      	ldr	r4, [r6, #0]
 800713c:	4626      	mov	r6, r4
 800713e:	2e00      	cmp	r6, #0
 8007140:	d140      	bne.n	80071c4 <_malloc_r+0xcc>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	4631      	mov	r1, r6
 8007146:	4638      	mov	r0, r7
 8007148:	eb04 0803 	add.w	r8, r4, r3
 800714c:	f000 f9a2 	bl	8007494 <_sbrk_r>
 8007150:	4580      	cmp	r8, r0
 8007152:	d13a      	bne.n	80071ca <_malloc_r+0xd2>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	3503      	adds	r5, #3
 8007158:	1a6d      	subs	r5, r5, r1
 800715a:	f025 0503 	bic.w	r5, r5, #3
 800715e:	3508      	adds	r5, #8
 8007160:	2d0c      	cmp	r5, #12
 8007162:	bf38      	it	cc
 8007164:	250c      	movcc	r5, #12
 8007166:	4629      	mov	r1, r5
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff ffa5 	bl	80070b8 <sbrk_aligned>
 800716e:	3001      	adds	r0, #1
 8007170:	d02b      	beq.n	80071ca <_malloc_r+0xd2>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	442b      	add	r3, r5
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	e00e      	b.n	8007198 <_malloc_r+0xa0>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	1b52      	subs	r2, r2, r5
 800717e:	d41e      	bmi.n	80071be <_malloc_r+0xc6>
 8007180:	2a0b      	cmp	r2, #11
 8007182:	d916      	bls.n	80071b2 <_malloc_r+0xba>
 8007184:	1961      	adds	r1, r4, r5
 8007186:	42a3      	cmp	r3, r4
 8007188:	6025      	str	r5, [r4, #0]
 800718a:	bf18      	it	ne
 800718c:	6059      	strne	r1, [r3, #4]
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	bf08      	it	eq
 8007192:	6031      	streq	r1, [r6, #0]
 8007194:	5162      	str	r2, [r4, r5]
 8007196:	604b      	str	r3, [r1, #4]
 8007198:	4638      	mov	r0, r7
 800719a:	f104 060b 	add.w	r6, r4, #11
 800719e:	f000 fc31 	bl	8007a04 <__malloc_unlock>
 80071a2:	f026 0607 	bic.w	r6, r6, #7
 80071a6:	1d23      	adds	r3, r4, #4
 80071a8:	1af2      	subs	r2, r6, r3
 80071aa:	d0b6      	beq.n	800711a <_malloc_r+0x22>
 80071ac:	1b9b      	subs	r3, r3, r6
 80071ae:	50a3      	str	r3, [r4, r2]
 80071b0:	e7b3      	b.n	800711a <_malloc_r+0x22>
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	bf0c      	ite	eq
 80071b8:	6032      	streq	r2, [r6, #0]
 80071ba:	605a      	strne	r2, [r3, #4]
 80071bc:	e7ec      	b.n	8007198 <_malloc_r+0xa0>
 80071be:	4623      	mov	r3, r4
 80071c0:	6864      	ldr	r4, [r4, #4]
 80071c2:	e7b2      	b.n	800712a <_malloc_r+0x32>
 80071c4:	4634      	mov	r4, r6
 80071c6:	6876      	ldr	r6, [r6, #4]
 80071c8:	e7b9      	b.n	800713e <_malloc_r+0x46>
 80071ca:	230c      	movs	r3, #12
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4638      	mov	r0, r7
 80071d0:	f000 fc18 	bl	8007a04 <__malloc_unlock>
 80071d4:	e7a1      	b.n	800711a <_malloc_r+0x22>
 80071d6:	6025      	str	r5, [r4, #0]
 80071d8:	e7de      	b.n	8007198 <_malloc_r+0xa0>
 80071da:	bf00      	nop
 80071dc:	20000330 	.word	0x20000330

080071e0 <__sfputc_r>:
 80071e0:	6893      	ldr	r3, [r2, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	b410      	push	{r4}
 80071e8:	6093      	str	r3, [r2, #8]
 80071ea:	da08      	bge.n	80071fe <__sfputc_r+0x1e>
 80071ec:	6994      	ldr	r4, [r2, #24]
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	db01      	blt.n	80071f6 <__sfputc_r+0x16>
 80071f2:	290a      	cmp	r1, #10
 80071f4:	d103      	bne.n	80071fe <__sfputc_r+0x1e>
 80071f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fa:	f000 b99f 	b.w	800753c <__swbuf_r>
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	1c58      	adds	r0, r3, #1
 8007202:	6010      	str	r0, [r2, #0]
 8007204:	7019      	strb	r1, [r3, #0]
 8007206:	4608      	mov	r0, r1
 8007208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720c:	4770      	bx	lr

0800720e <__sfputs_r>:
 800720e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	4614      	mov	r4, r2
 8007216:	18d5      	adds	r5, r2, r3
 8007218:	42ac      	cmp	r4, r5
 800721a:	d101      	bne.n	8007220 <__sfputs_r+0x12>
 800721c:	2000      	movs	r0, #0
 800721e:	e007      	b.n	8007230 <__sfputs_r+0x22>
 8007220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007224:	463a      	mov	r2, r7
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ffda 	bl	80071e0 <__sfputc_r>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d1f3      	bne.n	8007218 <__sfputs_r+0xa>
 8007230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007234 <_vfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	460d      	mov	r5, r1
 800723a:	b09d      	sub	sp, #116	; 0x74
 800723c:	4614      	mov	r4, r2
 800723e:	4698      	mov	r8, r3
 8007240:	4606      	mov	r6, r0
 8007242:	b118      	cbz	r0, 800724c <_vfiprintf_r+0x18>
 8007244:	6983      	ldr	r3, [r0, #24]
 8007246:	b90b      	cbnz	r3, 800724c <_vfiprintf_r+0x18>
 8007248:	f7ff fa94 	bl	8006774 <__sinit>
 800724c:	4b89      	ldr	r3, [pc, #548]	; (8007474 <_vfiprintf_r+0x240>)
 800724e:	429d      	cmp	r5, r3
 8007250:	d11b      	bne.n	800728a <_vfiprintf_r+0x56>
 8007252:	6875      	ldr	r5, [r6, #4]
 8007254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	d405      	bmi.n	8007266 <_vfiprintf_r+0x32>
 800725a:	89ab      	ldrh	r3, [r5, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d402      	bmi.n	8007266 <_vfiprintf_r+0x32>
 8007260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007262:	f7ff fb2a 	bl	80068ba <__retarget_lock_acquire_recursive>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	071b      	lsls	r3, r3, #28
 800726a:	d501      	bpl.n	8007270 <_vfiprintf_r+0x3c>
 800726c:	692b      	ldr	r3, [r5, #16]
 800726e:	b9eb      	cbnz	r3, 80072ac <_vfiprintf_r+0x78>
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f9c6 	bl	8007604 <__swsetup_r>
 8007278:	b1c0      	cbz	r0, 80072ac <_vfiprintf_r+0x78>
 800727a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800727c:	07dc      	lsls	r4, r3, #31
 800727e:	d50e      	bpl.n	800729e <_vfiprintf_r+0x6a>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007284:	b01d      	add	sp, #116	; 0x74
 8007286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	4b7b      	ldr	r3, [pc, #492]	; (8007478 <_vfiprintf_r+0x244>)
 800728c:	429d      	cmp	r5, r3
 800728e:	d101      	bne.n	8007294 <_vfiprintf_r+0x60>
 8007290:	68b5      	ldr	r5, [r6, #8]
 8007292:	e7df      	b.n	8007254 <_vfiprintf_r+0x20>
 8007294:	4b79      	ldr	r3, [pc, #484]	; (800747c <_vfiprintf_r+0x248>)
 8007296:	429d      	cmp	r5, r3
 8007298:	bf08      	it	eq
 800729a:	68f5      	ldreq	r5, [r6, #12]
 800729c:	e7da      	b.n	8007254 <_vfiprintf_r+0x20>
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	0598      	lsls	r0, r3, #22
 80072a2:	d4ed      	bmi.n	8007280 <_vfiprintf_r+0x4c>
 80072a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a6:	f7ff fb09 	bl	80068bc <__retarget_lock_release_recursive>
 80072aa:	e7e9      	b.n	8007280 <_vfiprintf_r+0x4c>
 80072ac:	2300      	movs	r3, #0
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	2320      	movs	r3, #32
 80072b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ba:	2330      	movs	r3, #48	; 0x30
 80072bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007480 <_vfiprintf_r+0x24c>
 80072c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c4:	f04f 0901 	mov.w	r9, #1
 80072c8:	4623      	mov	r3, r4
 80072ca:	469a      	mov	sl, r3
 80072cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d0:	b10a      	cbz	r2, 80072d6 <_vfiprintf_r+0xa2>
 80072d2:	2a25      	cmp	r2, #37	; 0x25
 80072d4:	d1f9      	bne.n	80072ca <_vfiprintf_r+0x96>
 80072d6:	ebba 0b04 	subs.w	fp, sl, r4
 80072da:	d00b      	beq.n	80072f4 <_vfiprintf_r+0xc0>
 80072dc:	465b      	mov	r3, fp
 80072de:	4622      	mov	r2, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ff93 	bl	800720e <__sfputs_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	f000 80aa 	beq.w	8007442 <_vfiprintf_r+0x20e>
 80072ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f0:	445a      	add	r2, fp
 80072f2:	9209      	str	r2, [sp, #36]	; 0x24
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a2 	beq.w	8007442 <_vfiprintf_r+0x20e>
 80072fe:	2300      	movs	r3, #0
 8007300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007308:	f10a 0a01 	add.w	sl, sl, #1
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007314:	931a      	str	r3, [sp, #104]	; 0x68
 8007316:	4654      	mov	r4, sl
 8007318:	2205      	movs	r2, #5
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4858      	ldr	r0, [pc, #352]	; (8007480 <_vfiprintf_r+0x24c>)
 8007320:	f7f8 ff7e 	bl	8000220 <memchr>
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	b9d8      	cbnz	r0, 8007360 <_vfiprintf_r+0x12c>
 8007328:	06d1      	lsls	r1, r2, #27
 800732a:	bf44      	itt	mi
 800732c:	2320      	movmi	r3, #32
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007332:	0713      	lsls	r3, r2, #28
 8007334:	bf44      	itt	mi
 8007336:	232b      	movmi	r3, #43	; 0x2b
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	2b2a      	cmp	r3, #42	; 0x2a
 8007342:	d015      	beq.n	8007370 <_vfiprintf_r+0x13c>
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	4654      	mov	r4, sl
 8007348:	2000      	movs	r0, #0
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	4621      	mov	r1, r4
 8007350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007354:	3b30      	subs	r3, #48	; 0x30
 8007356:	2b09      	cmp	r3, #9
 8007358:	d94e      	bls.n	80073f8 <_vfiprintf_r+0x1c4>
 800735a:	b1b0      	cbz	r0, 800738a <_vfiprintf_r+0x156>
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	e014      	b.n	800738a <_vfiprintf_r+0x156>
 8007360:	eba0 0308 	sub.w	r3, r0, r8
 8007364:	fa09 f303 	lsl.w	r3, r9, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	46a2      	mov	sl, r4
 800736e:	e7d2      	b.n	8007316 <_vfiprintf_r+0xe2>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d19      	adds	r1, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9103      	str	r1, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfbb      	ittet	lt
 800737c:	425b      	neglt	r3, r3
 800737e:	f042 0202 	orrlt.w	r2, r2, #2
 8007382:	9307      	strge	r3, [sp, #28]
 8007384:	9307      	strlt	r3, [sp, #28]
 8007386:	bfb8      	it	lt
 8007388:	9204      	strlt	r2, [sp, #16]
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	2b2e      	cmp	r3, #46	; 0x2e
 800738e:	d10c      	bne.n	80073aa <_vfiprintf_r+0x176>
 8007390:	7863      	ldrb	r3, [r4, #1]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d135      	bne.n	8007402 <_vfiprintf_r+0x1ce>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9203      	str	r2, [sp, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a6:	3402      	adds	r4, #2
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007490 <_vfiprintf_r+0x25c>
 80073ae:	7821      	ldrb	r1, [r4, #0]
 80073b0:	2203      	movs	r2, #3
 80073b2:	4650      	mov	r0, sl
 80073b4:	f7f8 ff34 	bl	8000220 <memchr>
 80073b8:	b140      	cbz	r0, 80073cc <_vfiprintf_r+0x198>
 80073ba:	2340      	movs	r3, #64	; 0x40
 80073bc:	eba0 000a 	sub.w	r0, r0, sl
 80073c0:	fa03 f000 	lsl.w	r0, r3, r0
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	4303      	orrs	r3, r0
 80073c8:	3401      	adds	r4, #1
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	482c      	ldr	r0, [pc, #176]	; (8007484 <_vfiprintf_r+0x250>)
 80073d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d6:	2206      	movs	r2, #6
 80073d8:	f7f8 ff22 	bl	8000220 <memchr>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d03f      	beq.n	8007460 <_vfiprintf_r+0x22c>
 80073e0:	4b29      	ldr	r3, [pc, #164]	; (8007488 <_vfiprintf_r+0x254>)
 80073e2:	bb1b      	cbnz	r3, 800742c <_vfiprintf_r+0x1f8>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	3307      	adds	r3, #7
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	3308      	adds	r3, #8
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	443b      	add	r3, r7
 80073f4:	9309      	str	r3, [sp, #36]	; 0x24
 80073f6:	e767      	b.n	80072c8 <_vfiprintf_r+0x94>
 80073f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fc:	460c      	mov	r4, r1
 80073fe:	2001      	movs	r0, #1
 8007400:	e7a5      	b.n	800734e <_vfiprintf_r+0x11a>
 8007402:	2300      	movs	r3, #0
 8007404:	3401      	adds	r4, #1
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	4619      	mov	r1, r3
 800740a:	f04f 0c0a 	mov.w	ip, #10
 800740e:	4620      	mov	r0, r4
 8007410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007414:	3a30      	subs	r2, #48	; 0x30
 8007416:	2a09      	cmp	r2, #9
 8007418:	d903      	bls.n	8007422 <_vfiprintf_r+0x1ee>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0c5      	beq.n	80073aa <_vfiprintf_r+0x176>
 800741e:	9105      	str	r1, [sp, #20]
 8007420:	e7c3      	b.n	80073aa <_vfiprintf_r+0x176>
 8007422:	fb0c 2101 	mla	r1, ip, r1, r2
 8007426:	4604      	mov	r4, r0
 8007428:	2301      	movs	r3, #1
 800742a:	e7f0      	b.n	800740e <_vfiprintf_r+0x1da>
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	462a      	mov	r2, r5
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <_vfiprintf_r+0x258>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4630      	mov	r0, r6
 8007438:	f7fd fee6 	bl	8005208 <_printf_float>
 800743c:	4607      	mov	r7, r0
 800743e:	1c78      	adds	r0, r7, #1
 8007440:	d1d6      	bne.n	80073f0 <_vfiprintf_r+0x1bc>
 8007442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007444:	07d9      	lsls	r1, r3, #31
 8007446:	d405      	bmi.n	8007454 <_vfiprintf_r+0x220>
 8007448:	89ab      	ldrh	r3, [r5, #12]
 800744a:	059a      	lsls	r2, r3, #22
 800744c:	d402      	bmi.n	8007454 <_vfiprintf_r+0x220>
 800744e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007450:	f7ff fa34 	bl	80068bc <__retarget_lock_release_recursive>
 8007454:	89ab      	ldrh	r3, [r5, #12]
 8007456:	065b      	lsls	r3, r3, #25
 8007458:	f53f af12 	bmi.w	8007280 <_vfiprintf_r+0x4c>
 800745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745e:	e711      	b.n	8007284 <_vfiprintf_r+0x50>
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	462a      	mov	r2, r5
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <_vfiprintf_r+0x258>)
 8007468:	a904      	add	r1, sp, #16
 800746a:	4630      	mov	r0, r6
 800746c:	f7fe f970 	bl	8005750 <_printf_i>
 8007470:	e7e4      	b.n	800743c <_vfiprintf_r+0x208>
 8007472:	bf00      	nop
 8007474:	08007c78 	.word	0x08007c78
 8007478:	08007c98 	.word	0x08007c98
 800747c:	08007c58 	.word	0x08007c58
 8007480:	08007e14 	.word	0x08007e14
 8007484:	08007e1e 	.word	0x08007e1e
 8007488:	08005209 	.word	0x08005209
 800748c:	0800720f 	.word	0x0800720f
 8007490:	08007e1a 	.word	0x08007e1a

08007494 <_sbrk_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d06      	ldr	r5, [pc, #24]	; (80074b0 <_sbrk_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fa f9f0 	bl	8001884 <_sbrk>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_sbrk_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_sbrk_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000338 	.word	0x20000338

080074b4 <__sread>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	f000 faa8 	bl	8007a10 <_read_r>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	bfab      	itete	ge
 80074c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074c6:	89a3      	ldrhlt	r3, [r4, #12]
 80074c8:	181b      	addge	r3, r3, r0
 80074ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ce:	bfac      	ite	ge
 80074d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074d2:	81a3      	strhlt	r3, [r4, #12]
 80074d4:	bd10      	pop	{r4, pc}

080074d6 <__swrite>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	461f      	mov	r7, r3
 80074dc:	898b      	ldrh	r3, [r1, #12]
 80074de:	05db      	lsls	r3, r3, #23
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4616      	mov	r6, r2
 80074e6:	d505      	bpl.n	80074f4 <__swrite+0x1e>
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	2302      	movs	r3, #2
 80074ee:	2200      	movs	r2, #0
 80074f0:	f000 f9f8 	bl	80078e4 <_lseek_r>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4628      	mov	r0, r5
 8007506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	f000 b869 	b.w	80075e0 <_write_r>

0800750e <__sseek>:
 800750e:	b510      	push	{r4, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007516:	f000 f9e5 	bl	80078e4 <_lseek_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	bf15      	itete	ne
 8007520:	6560      	strne	r0, [r4, #84]	; 0x54
 8007522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strheq	r3, [r4, #12]
 800752c:	bf18      	it	ne
 800752e:	81a3      	strhne	r3, [r4, #12]
 8007530:	bd10      	pop	{r4, pc}

08007532 <__sclose>:
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	f000 b8f1 	b.w	800771c <_close_r>
	...

0800753c <__swbuf_r>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	460e      	mov	r6, r1
 8007540:	4614      	mov	r4, r2
 8007542:	4605      	mov	r5, r0
 8007544:	b118      	cbz	r0, 800754e <__swbuf_r+0x12>
 8007546:	6983      	ldr	r3, [r0, #24]
 8007548:	b90b      	cbnz	r3, 800754e <__swbuf_r+0x12>
 800754a:	f7ff f913 	bl	8006774 <__sinit>
 800754e:	4b21      	ldr	r3, [pc, #132]	; (80075d4 <__swbuf_r+0x98>)
 8007550:	429c      	cmp	r4, r3
 8007552:	d12b      	bne.n	80075ac <__swbuf_r+0x70>
 8007554:	686c      	ldr	r4, [r5, #4]
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	071a      	lsls	r2, r3, #28
 800755e:	d52f      	bpl.n	80075c0 <__swbuf_r+0x84>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b36b      	cbz	r3, 80075c0 <__swbuf_r+0x84>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	1ac0      	subs	r0, r0, r3
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	b2f6      	uxtb	r6, r6
 800756e:	4283      	cmp	r3, r0
 8007570:	4637      	mov	r7, r6
 8007572:	dc04      	bgt.n	800757e <__swbuf_r+0x42>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f966 	bl	8007848 <_fflush_r>
 800757c:	bb30      	cbnz	r0, 80075cc <__swbuf_r+0x90>
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	701e      	strb	r6, [r3, #0]
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	3001      	adds	r0, #1
 8007590:	4283      	cmp	r3, r0
 8007592:	d004      	beq.n	800759e <__swbuf_r+0x62>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	07db      	lsls	r3, r3, #31
 8007598:	d506      	bpl.n	80075a8 <__swbuf_r+0x6c>
 800759a:	2e0a      	cmp	r6, #10
 800759c:	d104      	bne.n	80075a8 <__swbuf_r+0x6c>
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 f951 	bl	8007848 <_fflush_r>
 80075a6:	b988      	cbnz	r0, 80075cc <__swbuf_r+0x90>
 80075a8:	4638      	mov	r0, r7
 80075aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <__swbuf_r+0x9c>)
 80075ae:	429c      	cmp	r4, r3
 80075b0:	d101      	bne.n	80075b6 <__swbuf_r+0x7a>
 80075b2:	68ac      	ldr	r4, [r5, #8]
 80075b4:	e7cf      	b.n	8007556 <__swbuf_r+0x1a>
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <__swbuf_r+0xa0>)
 80075b8:	429c      	cmp	r4, r3
 80075ba:	bf08      	it	eq
 80075bc:	68ec      	ldreq	r4, [r5, #12]
 80075be:	e7ca      	b.n	8007556 <__swbuf_r+0x1a>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f81e 	bl	8007604 <__swsetup_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0cb      	beq.n	8007564 <__swbuf_r+0x28>
 80075cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075d0:	e7ea      	b.n	80075a8 <__swbuf_r+0x6c>
 80075d2:	bf00      	nop
 80075d4:	08007c78 	.word	0x08007c78
 80075d8:	08007c98 	.word	0x08007c98
 80075dc:	08007c58 	.word	0x08007c58

080075e0 <_write_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <_write_r+0x20>)
 80075e4:	4604      	mov	r4, r0
 80075e6:	4608      	mov	r0, r1
 80075e8:	4611      	mov	r1, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f7fa f8f7 	bl	80017e2 <_write>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_write_r+0x1e>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_write_r+0x1e>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20000338 	.word	0x20000338

08007604 <__swsetup_r>:
 8007604:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <__swsetup_r+0xcc>)
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	b125      	cbz	r5, 800761a <__swsetup_r+0x16>
 8007610:	69ab      	ldr	r3, [r5, #24]
 8007612:	b913      	cbnz	r3, 800761a <__swsetup_r+0x16>
 8007614:	4628      	mov	r0, r5
 8007616:	f7ff f8ad 	bl	8006774 <__sinit>
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <__swsetup_r+0xd0>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d10f      	bne.n	8007640 <__swsetup_r+0x3c>
 8007620:	686c      	ldr	r4, [r5, #4]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007628:	0719      	lsls	r1, r3, #28
 800762a:	d42c      	bmi.n	8007686 <__swsetup_r+0x82>
 800762c:	06dd      	lsls	r5, r3, #27
 800762e:	d411      	bmi.n	8007654 <__swsetup_r+0x50>
 8007630:	2309      	movs	r3, #9
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800763e:	e03e      	b.n	80076be <__swsetup_r+0xba>
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <__swsetup_r+0xd4>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <__swsetup_r+0x46>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7eb      	b.n	8007622 <__swsetup_r+0x1e>
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <__swsetup_r+0xd8>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7e6      	b.n	8007622 <__swsetup_r+0x1e>
 8007654:	0758      	lsls	r0, r3, #29
 8007656:	d512      	bpl.n	800767e <__swsetup_r+0x7a>
 8007658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765a:	b141      	cbz	r1, 800766e <__swsetup_r+0x6a>
 800765c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007660:	4299      	cmp	r1, r3
 8007662:	d002      	beq.n	800766a <__swsetup_r+0x66>
 8007664:	4630      	mov	r0, r6
 8007666:	f7ff fcdb 	bl	8007020 <_free_r>
 800766a:	2300      	movs	r3, #0
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	2300      	movs	r3, #0
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0308 	orr.w	r3, r3, #8
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	b94b      	cbnz	r3, 800769e <__swsetup_r+0x9a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d003      	beq.n	800769e <__swsetup_r+0x9a>
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f000 f95b 	bl	8007954 <__smakebuf_r>
 800769e:	89a0      	ldrh	r0, [r4, #12]
 80076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a4:	f010 0301 	ands.w	r3, r0, #1
 80076a8:	d00a      	beq.n	80076c0 <__swsetup_r+0xbc>
 80076aa:	2300      	movs	r3, #0
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	425b      	negs	r3, r3
 80076b2:	61a3      	str	r3, [r4, #24]
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b943      	cbnz	r3, 80076ca <__swsetup_r+0xc6>
 80076b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076bc:	d1ba      	bne.n	8007634 <__swsetup_r+0x30>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	0781      	lsls	r1, r0, #30
 80076c2:	bf58      	it	pl
 80076c4:	6963      	ldrpl	r3, [r4, #20]
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	e7f4      	b.n	80076b4 <__swsetup_r+0xb0>
 80076ca:	2000      	movs	r0, #0
 80076cc:	e7f7      	b.n	80076be <__swsetup_r+0xba>
 80076ce:	bf00      	nop
 80076d0:	2000000c 	.word	0x2000000c
 80076d4:	08007c78 	.word	0x08007c78
 80076d8:	08007c98 	.word	0x08007c98
 80076dc:	08007c58 	.word	0x08007c58

080076e0 <__assert_func>:
 80076e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076e2:	4614      	mov	r4, r2
 80076e4:	461a      	mov	r2, r3
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <__assert_func+0x2c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4605      	mov	r5, r0
 80076ec:	68d8      	ldr	r0, [r3, #12]
 80076ee:	b14c      	cbz	r4, 8007704 <__assert_func+0x24>
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <__assert_func+0x30>)
 80076f2:	9100      	str	r1, [sp, #0]
 80076f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076f8:	4906      	ldr	r1, [pc, #24]	; (8007714 <__assert_func+0x34>)
 80076fa:	462b      	mov	r3, r5
 80076fc:	f000 f8e0 	bl	80078c0 <fiprintf>
 8007700:	f000 f9a5 	bl	8007a4e <abort>
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <__assert_func+0x38>)
 8007706:	461c      	mov	r4, r3
 8007708:	e7f3      	b.n	80076f2 <__assert_func+0x12>
 800770a:	bf00      	nop
 800770c:	2000000c 	.word	0x2000000c
 8007710:	08007e25 	.word	0x08007e25
 8007714:	08007e32 	.word	0x08007e32
 8007718:	08007e60 	.word	0x08007e60

0800771c <_close_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_close_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7fa f877 	bl	800181a <_close>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_close_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_close_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000338 	.word	0x20000338

0800773c <__sflush_r>:
 800773c:	898a      	ldrh	r2, [r1, #12]
 800773e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007742:	4605      	mov	r5, r0
 8007744:	0710      	lsls	r0, r2, #28
 8007746:	460c      	mov	r4, r1
 8007748:	d458      	bmi.n	80077fc <__sflush_r+0xc0>
 800774a:	684b      	ldr	r3, [r1, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dc05      	bgt.n	800775c <__sflush_r+0x20>
 8007750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	dc02      	bgt.n	800775c <__sflush_r+0x20>
 8007756:	2000      	movs	r0, #0
 8007758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800775e:	2e00      	cmp	r6, #0
 8007760:	d0f9      	beq.n	8007756 <__sflush_r+0x1a>
 8007762:	2300      	movs	r3, #0
 8007764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007768:	682f      	ldr	r7, [r5, #0]
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	d032      	beq.n	80077d4 <__sflush_r+0x98>
 800776e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	075a      	lsls	r2, r3, #29
 8007774:	d505      	bpl.n	8007782 <__sflush_r+0x46>
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	1ac0      	subs	r0, r0, r3
 800777a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800777c:	b10b      	cbz	r3, 8007782 <__sflush_r+0x46>
 800777e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007780:	1ac0      	subs	r0, r0, r3
 8007782:	2300      	movs	r3, #0
 8007784:	4602      	mov	r2, r0
 8007786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	4628      	mov	r0, r5
 800778c:	47b0      	blx	r6
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	d106      	bne.n	80077a2 <__sflush_r+0x66>
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	291d      	cmp	r1, #29
 8007798:	d82c      	bhi.n	80077f4 <__sflush_r+0xb8>
 800779a:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <__sflush_r+0x108>)
 800779c:	40ca      	lsrs	r2, r1
 800779e:	07d6      	lsls	r6, r2, #31
 80077a0:	d528      	bpl.n	80077f4 <__sflush_r+0xb8>
 80077a2:	2200      	movs	r2, #0
 80077a4:	6062      	str	r2, [r4, #4]
 80077a6:	04d9      	lsls	r1, r3, #19
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	d504      	bpl.n	80077b8 <__sflush_r+0x7c>
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	d101      	bne.n	80077b6 <__sflush_r+0x7a>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b903      	cbnz	r3, 80077b8 <__sflush_r+0x7c>
 80077b6:	6560      	str	r0, [r4, #84]	; 0x54
 80077b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	2900      	cmp	r1, #0
 80077be:	d0ca      	beq.n	8007756 <__sflush_r+0x1a>
 80077c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <__sflush_r+0x92>
 80077c8:	4628      	mov	r0, r5
 80077ca:	f7ff fc29 	bl	8007020 <_free_r>
 80077ce:	2000      	movs	r0, #0
 80077d0:	6360      	str	r0, [r4, #52]	; 0x34
 80077d2:	e7c1      	b.n	8007758 <__sflush_r+0x1c>
 80077d4:	6a21      	ldr	r1, [r4, #32]
 80077d6:	2301      	movs	r3, #1
 80077d8:	4628      	mov	r0, r5
 80077da:	47b0      	blx	r6
 80077dc:	1c41      	adds	r1, r0, #1
 80077de:	d1c7      	bne.n	8007770 <__sflush_r+0x34>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0c4      	beq.n	8007770 <__sflush_r+0x34>
 80077e6:	2b1d      	cmp	r3, #29
 80077e8:	d001      	beq.n	80077ee <__sflush_r+0xb2>
 80077ea:	2b16      	cmp	r3, #22
 80077ec:	d101      	bne.n	80077f2 <__sflush_r+0xb6>
 80077ee:	602f      	str	r7, [r5, #0]
 80077f0:	e7b1      	b.n	8007756 <__sflush_r+0x1a>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	e7ad      	b.n	8007758 <__sflush_r+0x1c>
 80077fc:	690f      	ldr	r7, [r1, #16]
 80077fe:	2f00      	cmp	r7, #0
 8007800:	d0a9      	beq.n	8007756 <__sflush_r+0x1a>
 8007802:	0793      	lsls	r3, r2, #30
 8007804:	680e      	ldr	r6, [r1, #0]
 8007806:	bf08      	it	eq
 8007808:	694b      	ldreq	r3, [r1, #20]
 800780a:	600f      	str	r7, [r1, #0]
 800780c:	bf18      	it	ne
 800780e:	2300      	movne	r3, #0
 8007810:	eba6 0807 	sub.w	r8, r6, r7
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	f1b8 0f00 	cmp.w	r8, #0
 800781a:	dd9c      	ble.n	8007756 <__sflush_r+0x1a>
 800781c:	6a21      	ldr	r1, [r4, #32]
 800781e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007820:	4643      	mov	r3, r8
 8007822:	463a      	mov	r2, r7
 8007824:	4628      	mov	r0, r5
 8007826:	47b0      	blx	r6
 8007828:	2800      	cmp	r0, #0
 800782a:	dc06      	bgt.n	800783a <__sflush_r+0xfe>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007838:	e78e      	b.n	8007758 <__sflush_r+0x1c>
 800783a:	4407      	add	r7, r0
 800783c:	eba8 0800 	sub.w	r8, r8, r0
 8007840:	e7e9      	b.n	8007816 <__sflush_r+0xda>
 8007842:	bf00      	nop
 8007844:	20400001 	.word	0x20400001

08007848 <_fflush_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b913      	cbnz	r3, 8007858 <_fflush_r+0x10>
 8007852:	2500      	movs	r5, #0
 8007854:	4628      	mov	r0, r5
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	b118      	cbz	r0, 8007862 <_fflush_r+0x1a>
 800785a:	6983      	ldr	r3, [r0, #24]
 800785c:	b90b      	cbnz	r3, 8007862 <_fflush_r+0x1a>
 800785e:	f7fe ff89 	bl	8006774 <__sinit>
 8007862:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <_fflush_r+0x6c>)
 8007864:	429c      	cmp	r4, r3
 8007866:	d11b      	bne.n	80078a0 <_fflush_r+0x58>
 8007868:	686c      	ldr	r4, [r5, #4]
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0ef      	beq.n	8007852 <_fflush_r+0xa>
 8007872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007874:	07d0      	lsls	r0, r2, #31
 8007876:	d404      	bmi.n	8007882 <_fflush_r+0x3a>
 8007878:	0599      	lsls	r1, r3, #22
 800787a:	d402      	bmi.n	8007882 <_fflush_r+0x3a>
 800787c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787e:	f7ff f81c 	bl	80068ba <__retarget_lock_acquire_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	4621      	mov	r1, r4
 8007886:	f7ff ff59 	bl	800773c <__sflush_r>
 800788a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788c:	07da      	lsls	r2, r3, #31
 800788e:	4605      	mov	r5, r0
 8007890:	d4e0      	bmi.n	8007854 <_fflush_r+0xc>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	d4dd      	bmi.n	8007854 <_fflush_r+0xc>
 8007898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789a:	f7ff f80f 	bl	80068bc <__retarget_lock_release_recursive>
 800789e:	e7d9      	b.n	8007854 <_fflush_r+0xc>
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_fflush_r+0x70>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d101      	bne.n	80078aa <_fflush_r+0x62>
 80078a6:	68ac      	ldr	r4, [r5, #8]
 80078a8:	e7df      	b.n	800786a <_fflush_r+0x22>
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <_fflush_r+0x74>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	bf08      	it	eq
 80078b0:	68ec      	ldreq	r4, [r5, #12]
 80078b2:	e7da      	b.n	800786a <_fflush_r+0x22>
 80078b4:	08007c78 	.word	0x08007c78
 80078b8:	08007c98 	.word	0x08007c98
 80078bc:	08007c58 	.word	0x08007c58

080078c0 <fiprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	b503      	push	{r0, r1, lr}
 80078c4:	4601      	mov	r1, r0
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <fiprintf+0x20>)
 80078ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ce:	6800      	ldr	r0, [r0, #0]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f7ff fcaf 	bl	8007234 <_vfiprintf_r>
 80078d6:	b002      	add	sp, #8
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b003      	add	sp, #12
 80078de:	4770      	bx	lr
 80078e0:	2000000c 	.word	0x2000000c

080078e4 <_lseek_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d07      	ldr	r5, [pc, #28]	; (8007904 <_lseek_r+0x20>)
 80078e8:	4604      	mov	r4, r0
 80078ea:	4608      	mov	r0, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	2200      	movs	r2, #0
 80078f0:	602a      	str	r2, [r5, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	f7f9 ffb8 	bl	8001868 <_lseek>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_lseek_r+0x1e>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_lseek_r+0x1e>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20000338 	.word	0x20000338

08007908 <__swhatbuf_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460e      	mov	r6, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2900      	cmp	r1, #0
 8007912:	b096      	sub	sp, #88	; 0x58
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	da08      	bge.n	800792c <__swhatbuf_r+0x24>
 800791a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	061a      	lsls	r2, r3, #24
 8007924:	d410      	bmi.n	8007948 <__swhatbuf_r+0x40>
 8007926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792a:	e00e      	b.n	800794a <__swhatbuf_r+0x42>
 800792c:	466a      	mov	r2, sp
 800792e:	f000 f895 	bl	8007a5c <_fstat_r>
 8007932:	2800      	cmp	r0, #0
 8007934:	dbf1      	blt.n	800791a <__swhatbuf_r+0x12>
 8007936:	9a01      	ldr	r2, [sp, #4]
 8007938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800793c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007940:	425a      	negs	r2, r3
 8007942:	415a      	adcs	r2, r3
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	e7ee      	b.n	8007926 <__swhatbuf_r+0x1e>
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	2000      	movs	r0, #0
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	b016      	add	sp, #88	; 0x58
 8007950:	bd70      	pop	{r4, r5, r6, pc}
	...

08007954 <__smakebuf_r>:
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007958:	079d      	lsls	r5, r3, #30
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d507      	bpl.n	8007970 <__smakebuf_r+0x1c>
 8007960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	2301      	movs	r3, #1
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	b002      	add	sp, #8
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	ab01      	add	r3, sp, #4
 8007972:	466a      	mov	r2, sp
 8007974:	f7ff ffc8 	bl	8007908 <__swhatbuf_r>
 8007978:	9900      	ldr	r1, [sp, #0]
 800797a:	4605      	mov	r5, r0
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff fbbb 	bl	80070f8 <_malloc_r>
 8007982:	b948      	cbnz	r0, 8007998 <__smakebuf_r+0x44>
 8007984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007988:	059a      	lsls	r2, r3, #22
 800798a:	d4ef      	bmi.n	800796c <__smakebuf_r+0x18>
 800798c:	f023 0303 	bic.w	r3, r3, #3
 8007990:	f043 0302 	orr.w	r3, r3, #2
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	e7e3      	b.n	8007960 <__smakebuf_r+0xc>
 8007998:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <__smakebuf_r+0x7c>)
 800799a:	62b3      	str	r3, [r6, #40]	; 0x28
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	6020      	str	r0, [r4, #0]
 80079a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	6163      	str	r3, [r4, #20]
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	6120      	str	r0, [r4, #16]
 80079ae:	b15b      	cbz	r3, 80079c8 <__smakebuf_r+0x74>
 80079b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 f863 	bl	8007a80 <_isatty_r>
 80079ba:	b128      	cbz	r0, 80079c8 <__smakebuf_r+0x74>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	89a0      	ldrh	r0, [r4, #12]
 80079ca:	4305      	orrs	r5, r0
 80079cc:	81a5      	strh	r5, [r4, #12]
 80079ce:	e7cd      	b.n	800796c <__smakebuf_r+0x18>
 80079d0:	0800670d 	.word	0x0800670d

080079d4 <__ascii_mbtowc>:
 80079d4:	b082      	sub	sp, #8
 80079d6:	b901      	cbnz	r1, 80079da <__ascii_mbtowc+0x6>
 80079d8:	a901      	add	r1, sp, #4
 80079da:	b142      	cbz	r2, 80079ee <__ascii_mbtowc+0x1a>
 80079dc:	b14b      	cbz	r3, 80079f2 <__ascii_mbtowc+0x1e>
 80079de:	7813      	ldrb	r3, [r2, #0]
 80079e0:	600b      	str	r3, [r1, #0]
 80079e2:	7812      	ldrb	r2, [r2, #0]
 80079e4:	1e10      	subs	r0, r2, #0
 80079e6:	bf18      	it	ne
 80079e8:	2001      	movne	r0, #1
 80079ea:	b002      	add	sp, #8
 80079ec:	4770      	bx	lr
 80079ee:	4610      	mov	r0, r2
 80079f0:	e7fb      	b.n	80079ea <__ascii_mbtowc+0x16>
 80079f2:	f06f 0001 	mvn.w	r0, #1
 80079f6:	e7f8      	b.n	80079ea <__ascii_mbtowc+0x16>

080079f8 <__malloc_lock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_lock+0x8>)
 80079fa:	f7fe bf5e 	b.w	80068ba <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	2000032c 	.word	0x2000032c

08007a04 <__malloc_unlock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__malloc_unlock+0x8>)
 8007a06:	f7fe bf59 	b.w	80068bc <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	2000032c 	.word	0x2000032c

08007a10 <_read_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_read_r+0x20>)
 8007a14:	4604      	mov	r4, r0
 8007a16:	4608      	mov	r0, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7f9 fec2 	bl	80017a8 <_read>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_read_r+0x1e>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_read_r+0x1e>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000338 	.word	0x20000338

08007a34 <__ascii_wctomb>:
 8007a34:	b149      	cbz	r1, 8007a4a <__ascii_wctomb+0x16>
 8007a36:	2aff      	cmp	r2, #255	; 0xff
 8007a38:	bf85      	ittet	hi
 8007a3a:	238a      	movhi	r3, #138	; 0x8a
 8007a3c:	6003      	strhi	r3, [r0, #0]
 8007a3e:	700a      	strbls	r2, [r1, #0]
 8007a40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a44:	bf98      	it	ls
 8007a46:	2001      	movls	r0, #1
 8007a48:	4770      	bx	lr
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	4770      	bx	lr

08007a4e <abort>:
 8007a4e:	b508      	push	{r3, lr}
 8007a50:	2006      	movs	r0, #6
 8007a52:	f000 f84d 	bl	8007af0 <raise>
 8007a56:	2001      	movs	r0, #1
 8007a58:	f7f9 fe9c 	bl	8001794 <_exit>

08007a5c <_fstat_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_fstat_r+0x20>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7f9 fee2 	bl	8001832 <_fstat>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_fstat_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_fstat_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000338 	.word	0x20000338

08007a80 <_isatty_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_isatty_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7f9 fee1 	bl	8001852 <_isatty>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_isatty_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_isatty_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000338 	.word	0x20000338

08007aa0 <_raise_r>:
 8007aa0:	291f      	cmp	r1, #31
 8007aa2:	b538      	push	{r3, r4, r5, lr}
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	d904      	bls.n	8007ab4 <_raise_r+0x14>
 8007aaa:	2316      	movs	r3, #22
 8007aac:	6003      	str	r3, [r0, #0]
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ab6:	b112      	cbz	r2, 8007abe <_raise_r+0x1e>
 8007ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007abc:	b94b      	cbnz	r3, 8007ad2 <_raise_r+0x32>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 f830 	bl	8007b24 <_getpid_r>
 8007ac4:	462a      	mov	r2, r5
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4620      	mov	r0, r4
 8007aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ace:	f000 b817 	b.w	8007b00 <_kill_r>
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d00a      	beq.n	8007aec <_raise_r+0x4c>
 8007ad6:	1c59      	adds	r1, r3, #1
 8007ad8:	d103      	bne.n	8007ae2 <_raise_r+0x42>
 8007ada:	2316      	movs	r3, #22
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7e7      	b.n	8007ab2 <_raise_r+0x12>
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ae8:	4628      	mov	r0, r5
 8007aea:	4798      	blx	r3
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7e0      	b.n	8007ab2 <_raise_r+0x12>

08007af0 <raise>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <raise+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f7ff bfd3 	b.w	8007aa0 <_raise_r>
 8007afa:	bf00      	nop
 8007afc:	2000000c 	.word	0x2000000c

08007b00 <_kill_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	; (8007b20 <_kill_r+0x20>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f7f9 fe31 	bl	8001774 <_kill>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	d102      	bne.n	8007b1c <_kill_r+0x1c>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b103      	cbz	r3, 8007b1c <_kill_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000338 	.word	0x20000338

08007b24 <_getpid_r>:
 8007b24:	f7f9 be1e 	b.w	8001764 <_getpid>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
